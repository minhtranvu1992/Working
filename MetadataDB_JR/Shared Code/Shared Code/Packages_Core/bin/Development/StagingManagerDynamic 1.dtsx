<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/13/2008 2:40:15 PM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="AU-L234"
  DTS:CreatorName="BRIGHTSTAR\slawson"
  DTS:DelayValidation="True"
  DTS:DTSID="{BC1EB304-8F9C-42C1-AC64-10805C69B97D}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="11.0.3402.0"
  DTS:LocaleID="3081"
  DTS:ObjectName="StagingManagerDynamic"
  DTS:PackageType="5"
  DTS:SuppressConfigurationWarnings="True"
  DTS:VersionBuild="553"
  DTS:VersionGUID="{920867E9-E821-4E79-B457-0FAF32CCEBBC}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ETLReference]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{9D79D394-39F6-4915-B8C8-57B87CCEBB03}"
      DTS:ObjectName="ETLReference">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ConnStr_ETLReference]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=05w8f2apsq03\Dev2012;Initial Catalog=GDWReference;Provider=SQLNCLI11.1;Integrated Security=SSPI;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[msdb]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{01A033F0-EA06-4CCA-B027-B83907F7B6DF}"
      DTS:ObjectName="msdb">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ConnStr_msdb]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=05w8f2apsq03\Dev2012;Initial Catalog=msdb;Provider=SQLNCLI11.1;Integrated Security=SSPI;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="msdb"
      DTS:CreationName="DTS.LogProviderSQLServer.3"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{9E95AFDE-4B62-4FBD-8AD0-85E00BE65898}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FF3C4362-3166-4CE1-AAB0-0AA8A98CCF95}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnStr_ETLReference">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=05w8f2apsq03\Dev2012;Initial Catalog=GDWReference;Provider=SQLNCLI11.1;Integrated Security=SSPI;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{83ABCF99-4215-444F-8929-DE7E759C1AFB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnStr_msdb">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=05w8f2apsq03\Dev2012;Initial Catalog=msdb;Provider=SQLNCLI11.1;Integrated Security=SSPI;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CB204207-CA71-4B28-8038-2A9A8D169DF8}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorMessage">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EF72537B-FA50-4868-8D9A-04E99B6CF004}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorSource">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{358C2587-7CC9-4989-A6FF-415EEB0449D2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileNameSeparator">
      <DTS:VariableValue
        DTS:DataType="8">_</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9ACA1416-02E6-4F30-95E1-E2A9F4CA61B7}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="IsOutageWindowActive">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{022E8861-361B-4FEF-975A-282267DE3AC3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Server">
      <DTS:VariableValue
        DTS:DataType="8">05W8F2APSQ03</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0A694434-2B7B-48EB-8C64-BE358E2E9BDF}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StagingExecutionLocation">
      <DTS:VariableValue
        DTS:DataType="8">\Core\StagingExecutionDynamic</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A15E992C-CE94-4411-9B04-CDC31F3E4ABB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="StagingJobID">
      <DTS:VariableValue
        DTS:DataType="3">423</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F58322AF-8305-482A-9B1E-3B9AA58C6B87}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StagingPackageName">
      <DTS:VariableValue
        DTS:DataType="8">Ven</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A8142A2E-C81E-438E-BD96-94776DBF09DB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StartTime">
      <DTS:VariableValue
        DTS:DataType="8">2011-08-04 15:19:00</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4D18521F-D8D3-4F38-B1C7-555CCAB92E89}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Suite">
      <DTS:VariableValue
        DTS:DataType="8">AUBS01</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7AD1079E-E2AF-420E-918C-90F3EA90B28B}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="SuiteList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">4,7,OnError,13,OnPostExecute,12,OnPreExecute,9,OnWarning</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnInformation"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPostExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPreExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnWarning"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{9E95AFDE-4B62-4FBD-8AD0-85E00BE65898}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Insert Error Record into StagingExecutionLog"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{B730BF4D-E81B-4C7C-88E0-9716C7CA9162}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:FailPackageOnFailure="True"
      DTS:LocaleID="-1"
      DTS:ObjectName="Insert Error Record into StagingExecutionLog"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:PropertyExpression
        DTS:Name="SqlStatementSource">"EXEC [dbo].[spInsertStagingExecutionLog]
 @StagingJobID =-1,
 @StartTime = '" + @[User::StartTime] + "',
@ManagerGUID ='" + @[System::ExecutionInstanceGUID] + "',
@SuccessFlag =0,
@CompletedFlag =1,
@MessageSource ='Log StagingManager Error: " + @[User::ErrorSource]  + "'  ,
@Message = '" + @[User::ErrorMessage]  + "', 
@RowsStaged = 0, @RowsInserted = 0, @RowsDeleted = 0, @RowsUpdated = 0,
@StagingPackagePathAndName =NULL,
@ActualFileName = NULL,
@StagingControlID=-1, @ExtractStartTime = NULL, @ExtractEndTime = NULL"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{9D79D394-39F6-4915-B8C8-57B87CCEBB03}"
          SQLTask:SqlStatementSource="EXEC [dbo].[spInsertStagingExecutionLog]&#xA; @StagingJobID =-1,&#xA; @StartTime = '2011-08-04 15:19:00',&#xA;@ManagerGUID ='{6F3945C6-583C-4C53-9E1F-72E90DBAD483}',&#xA;@SuccessFlag =0,&#xA;@CompletedFlag =1,&#xA;@MessageSource ='Log StagingManager Error: '  ,&#xA;@Message = '', &#xA;@RowsStaged = 0, @RowsInserted = 0, @RowsDeleted = 0, @RowsUpdated = 0,&#xA;@StagingPackagePathAndName =NULL,&#xA;@ActualFileName = NULL,&#xA;@StagingControlID=-1, @ExtractStartTime = NULL, @ExtractEndTime = NULL" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Sequence Container"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{438F8A6F-CD8D-4673-85C1-5AC519BCC2CA}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Check Outage Window"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{6A0396D1-618A-4215-9001-D3AC559C7912}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Check Outage Window"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">"DECLARE @CheckDate DATETIME
SET @CheckDate = GETDATE()
EXEC [dbo].[spCheckOutageWindow] @CheckDate"</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9D79D394-39F6-4915-B8C8-57B87CCEBB03}"
              SQLTask:SqlStatementSource="DECLARE @CheckDate DATETIME&#xA;SET @CheckDate = GETDATE()&#xA;EXEC [dbo].[spCheckOutageWindow] @CheckDate"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="IsOutageWindowActive"
                SQLTask:DtsVariableName="User::IsOutageWindowActive" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Foreach Suite Container"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{4BBF7FF8-AD81-40A8-8907-439C46E31708}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Foreach Suite Container">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{BFC0B551-AD95-469C-BCF5-91BB0CEF8E53}"
            DTS:ObjectName="{940C8B57-839D-48C9-ABC6-AB0889AF3AA5}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::SuiteList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Foreach Suite Container\ProcessFiles"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{5CA4F2BC-5E40-4A85-A47D-6385F9732913}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="ProcessFiles"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_b636f6701e514449b3f0cb2c07fb8f51"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp">
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptHelper.cs"
                    Encoding="UTF8"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
//This code is copied to:
//Packages_Core.StagingManagerDynamic
//Packages_Core.StagingExecutionDynamic
//and StagingHelper
//The problem is referencing the dll on all servers used. 
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;
using Oracle.DataAccess.Client;

namespace DWReferenceHelper
{
    public class ScriptHelper
    {

        #region Properties
        public int RowsInserted { get; set; }
        public int RowsDeleted { get; set; }
        public int RowsUpdated { get; set; }
        public int RowsStaged { get; set; }
        public string SuiteFolderLocation { get; set; }
        public string unProcessedFileFullName { get; set; }
        public string InProcessedFileFullName { get; set; }
        public Dictionary<int, ProcessInformation> ProcessControl = new Dictionary<int, ProcessInformation>();
        public int SSISPackagesCount = 0;

        public List<string> ORACLE = new List<string> { "OLEDB_ORACLE", "ODBC_ORACLE" };
        public List<string> SQL = new List<string> { "OLEDB", "ODBC", "OLEDB_SQL", "ODBC_SQL" };

        #endregion

        #region Staging Manager

        /// <summary>
        /// Staging Manager Process Files Task
        /// Checks if any files are to be loaded or sql extracts and run them
        /// </summary>
        /// <param name="values"></param>
        public void MainStagingManagerProcessFiles(Dictionary<string, object> values)
        {
            string Suite = values["Suite"].ToString();
            string StagingExecutionLocation = values["StagingExecutionLocation"].ToString();
            string Server = values["Server"].ToString();
            string FileNameSeparator = values["FileNameSeparator"].ToString();
            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string ExecutionInstanceGUID = values["ExecutionInstanceGUID"].ToString();
            string StartTime = values["StartTime"].ToString();

            //Process Files

            var ds = GetData(ConnStr_ETLReference, "[dbo].[spGetStagingManagerFolderLocation] @SuiteName = '" + Suite + "'");



            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                string FolderLocationUprocessed = Path.Combine(dr["BaseFolder"].ToString(),
                                                               dr["Environment"].ToString(),
                                                               dr["SuiteName"].ToString(),
                                                               dr["Folder"].ToString());
                var files = GetFiles(FolderLocationUprocessed);

                if (files != null && files.Count > 0)
                {
                    foreach (int stagingControlID in GetStagingControlIDs(ConnStr_ETLReference, files, Suite, FileNameSeparator))
                    {
                        ds = GetData(ConnStr_ETLReference, "SELECT RunAs32Bit FROM StagingControl WHERE StagingControlID = " + stagingControlID);
                        bool runAs32Bit = Convert.ToBoolean(ds.Tables[0].Rows[0]["RunAs32Bit"]);

                        string dtexec = GetDtexecLocation(runAs32Bit, ConnStr_ETLReference);


                        string ExecutionCommand = CreateStagingExecutionCommand(StagingExecutionLocation, Server, stagingControlID, ExecutionInstanceGUID, StartTime, ConnStr_ETLReference);

                        StagingLogMessage(ConnStr_ETLReference,
                            -1,
                            1,
                            0,
                            "Log Manager Starting StagingExecution File Extract",
                            dtexec + " " + ExecutionCommand,
                            0,
                            0,
                            0,
                            0,
                            "",
                            StartTime,
                            "",
                            "",
                            stagingControlID,
                            ExecutionInstanceGUID);

                        StartSSISPackage(ExecutionCommand, stagingControlID, runAs32Bit, ConnStr_ETLReference);
                    }
                }
            }
            //Process Data Extracts
            foreach (int stagingControlID in GetNextRunDateTimeStagingControlID(ConnStr_ETLReference, Suite))
            {
                ds = GetData(ConnStr_ETLReference, "SELECT RunAs32Bit FROM StagingControl WHERE StagingControlID = " + stagingControlID);
                bool runAs32Bit = Convert.ToBoolean(ds.Tables[0].Rows[0]["RunAs32Bit"]);

                string dtexec = GetDtexecLocation(runAs32Bit, ConnStr_ETLReference);

                string ExecutionCommand = CreateStagingExecutionCommand(StagingExecutionLocation, Server, stagingControlID, ExecutionInstanceGUID,
                    StartTime, ConnStr_ETLReference);

                StagingLogMessage(ConnStr_ETLReference,
                    -1,
                    1,
                    0,
                    "Log Manager Starting StagingExecution Data Extracts",
                    dtexec + " " + ExecutionCommand,
                    0,
                    0,
                    0,
                    0,
                    "",
                    StartTime,
                    "",
                    "",
                    stagingControlID,
                    ExecutionInstanceGUID);

                StartSSISPackage(ExecutionCommand, stagingControlID, false, ConnStr_ETLReference);
            }
            while (0 < SSISPackagesCount)
            {
                //Check every 5 secs to see if the packages have completed.
                Thread.Sleep(5000);
            }

            foreach (var value in ProcessControl.Values)
            {
                if (value.ExitCode != 0)
                {
                    StagingLogMessage(ConnStr_ETLReference,
                        -1,
                        0,
                        1,
                        "Log Manager Error Log for StagingExecutionDynamic",
                        value.OutputMessage,
                        0,
                        0,
                        0,
                        0,
                        "",
                        StartTime,
                        "",
                        "",
                        value.ControlID,
                        ExecutionInstanceGUID);
                }
            }

            StagingLogMessage(ConnStr_ETLReference,
                   -1,
                   1,
                   1,
                   "Log Manager Complete",
                   "",
                   0,
                   0,
                   0,
                   0,
                   "",
                   StartTime,
                   "",
                   "",
                   -1,
                   ExecutionInstanceGUID);
        }

        /// <summary>
        /// Staging Execution Sql BulkUpload
        /// Checks if any sql extracts need to occur and run them
        /// </summary>
        /// <param name="values"></param>
        public void MainStagingExecutionSqlBulkUpload(Dictionary<string, object> values)
        {
            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string ConnStr_Staging = values["ConnStr_Staging"].ToString();
            string ConnStr_Source = values["ConnStr_Source"].ToString();
            int StagingJobID = Convert.ToInt32(values["StagingJobID"]);
            string SourceCmdText = values["SourceCmdText"].ToString();
            string StartTime = values["StartTime"].ToString();
            string ExtractStartTime = values["ExtractStartTime"].ToString();
            string ExtractEndTime = values["ExtractEndTime"].ToString();
            int StagingControlID = Convert.ToInt32(values["StagingControlID"]);
            string ManagerGUID = values["ManagerGUID"].ToString();
            int BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            string StagingTable = values["StagingTable"].ToString();
            string SourceQueryMapping = values["SourceQueryMapping"].ToString();
            bool bTruncateStagingTable = Convert.ToBoolean(values["TruncateStagingTable"]);
            string SourceTypeName = values["SourceTypeName"].ToString();

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            checkConnection(ConnStr_Staging);
            dsb.ConnectionString = ConnStr_Staging;
            dsb.Remove("Provider");
            ConnStr_Staging = dsb.ConnectionString + ";Connect Timeout=0";

            checkConnection(ConnStr_Source, SourceTypeName);
            dsb.ConnectionString = ConnStr_Source;
            dsb.Remove("Provider");

            ConnStr_Source = dsb.ConnectionString;
            if (SQL.Contains(SourceTypeName))
            {
                ConnStr_Source += ";Connect Timeout=0";
            }

            StagingLogMessage(ConnStr_ETLReference,
                StagingJobID,
                1,
                0,
                "Log StagingExecution BulkSQL evaluated Source Query",
                SourceCmdText,
                0,
                0,
                0,
                0,
                "",
                StartTime,
                ExtractStartTime,
                ExtractEndTime,
                StagingControlID,
                ManagerGUID);

            TruncateTable(StagingTable, ConnStr_Staging, bTruncateStagingTable);

            int rowsCopied = PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Staging, BulkUploadLoadSize, StagingTable, SourceQueryMapping, SourceTypeName);
            values.Add("rowsCopied", rowsCopied);

        }

        public void MainStagingExecutionFileBulkUpload(Dictionary<string, object> values)
        {

            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string Environment = values["Environment"].ToString();
            string FileNameSeparator = values["FileNameSeparator"].ToString();
            string StagingPackageName = values["StagingPackageName"].ToString();
            string ConnStr_Staging = values["ConnStr_Staging"].ToString();
            string SourceQueryMapping = values["SourceQueryMapping"].ToString();
            char DelimiterChar = Convert.ToChar(values["DelimiterChar"]);
            string Suite = values["Suite"].ToString();
            string FolderBaseLocation = values["FolderBaseLocation"].ToString();
            string StagingTable = values["StagingTable"].ToString();
            string MergeQuery = values["MergeQuery"].ToString();
            bool bHasHeader = Convert.ToBoolean(values["HasHeader"]);
            int BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            string StartTime = values["StartTime"].ToString();
            string FileTimeStampFormat = values["FileTimeStampFormat"].ToString();
            int StagingControlID = Convert.ToInt32(values["StagingControlID"]);
            string ManagerGUID = values["ManagerGUID"].ToString();
            bool bTruncateStagingTable = Convert.ToBoolean(values["TruncateStagingTable"]);

            SuiteFolderLocation = GetSuiteFolderLocation(FolderBaseLocation, Environment, Suite);

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            checkConnection(ConnStr_Staging);
            dsb.ConnectionString = ConnStr_Staging;
            dsb.Remove("Provider");
            ConnStr_Staging = dsb.ConnectionString + ";Connect Timeout=0";

            List<Mapping> Mappings = SplitMappings(SourceQueryMapping);

            var fileFullNames = GetFiles(Path.Combine(SuiteFolderLocation, "Unprocessed"));
            var OrderFiles = GetOrderFiles(fileFullNames, FileNameSeparator, StagingPackageName, FileTimeStampFormat);

            if (OrderFiles != null)
            {
                foreach (var file in OrderFiles)
                {

                    int StagingJobID = GetStagingJobID(ConnStr_ETLReference);
                    unProcessedFileFullName = file.Value;

                    StagingLogMessage(ConnStr_ETLReference,
                        StagingJobID,
                        1,
                        0,
                        "Log StagingExecution Starting file process.",
                        "",
                        0,
                        0,
                        0,
                        0,
                        unProcessedFileFullName,
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);


                    InProcessedFileFullName = moveFileToInProcess(unProcessedFileFullName, StagingJobID, SuiteFolderLocation);

                    CheckFileHeadersAndColumns(InProcessedFileFullName, SourceQueryMapping, StagingTable, ConnStr_Staging, DelimiterChar);

                    TruncateTable(StagingTable, ConnStr_Staging, bTruncateStagingTable);

                    ProcessFile(StagingJobID, InProcessedFileFullName, ConnStr_Staging, Mappings, BulkUploadLoadSize, StagingTable, SuiteFolderLocation, bHasHeader, DelimiterChar);

                    RowCountStaged(ConnStr_Staging, StagingTable, StagingJobID);

                    MergeData(ConnStr_Staging, MergeQuery, StagingJobID);

                    StagingLogMessage(ConnStr_ETLReference,
                        StagingJobID,
                        1,
                        1,
                        "Log StagingExecution Completed files processed.",
                        "",
                        RowsInserted,
                        RowsDeleted,
                        RowsUpdated,
                        RowsStaged,
                        unProcessedFileFullName,
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);
                }
            }
            else
            {
                StagingLogMessage(ConnStr_ETLReference,
                        -1,
                        1,
                        1,
                        "Log StagingExecution Completed no files found.",
                        "",
                        0,
                        0,
                        0,
                        0,
                        "",
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);
            }

        }

        public string GetPackageName(string fileFullName, string fileNameSeparator)
        {
            string fileName = Path.GetFileName(fileFullName);

            string packageName = fileName.Substring(0, fileName.LastIndexOf(fileNameSeparator));
            return packageName;
        }

        public string GetSuiteFolderLocation(string FolderBaseLocation, string Environment, string Suite)
        {
            return Path.Combine(FolderBaseLocation, Environment, Suite);
        }

        public string CreateStagingExecutionCommand(string StagingExecutionLocation, string Server, int StagingControlID, string ManagerGUID, string StartTime,
            string ConnStr_ETLReference)
        {
            string command = "/SQL \"" + StagingExecutionLocation
                             + "\" /SERVER \"" + Server
                             + "\"" + " /MAXCONCURRENT \" -1 \" /CHECKPOINTING OFF"
                             + " /SET \"\\Package.Variables[StagingControlID].Value\";" + StagingControlID
                             + " /SET \"\\Package.Variables[ManagerGUID].Value\";\"" + ManagerGUID + "\""
                             + " /SET \"\\Package.Variables[User::StartTime].Value\";\"" + StartTime + "\""
                             + " /SET \"\\Package.Variables[ConnStr_ETLReference].Value\";\"\\\"" + ConnStr_ETLReference + "\\\"\"";
            return command;
        }

        public void StartManagerPackageStaging(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            string command = "/SQL \"" + packageLocationlocation
                             + "\" /SERVER \"" + server + "\""
                             + " /CHECKPOINTING OFF"
                             + " /SET \"\\Package.Variables[ConnStr_ETLReference].Value\";\"\\\"" + ConnStr_ETLReference + "\\\"\""
                             + " /REPORTING E";

            StartSSISPackage(command, -1, false, ConnStr_ETLReference);
        }

        public string GetTimeStamp(string fileFullName, string fileNameSeparator)
        {
            string fileName = Path.GetFileName(fileFullName);
            int index = fileName.LastIndexOf(fileNameSeparator);
            string timeStamp = fileName.Substring((fileName.LastIndexOf(fileNameSeparator) + 1), (fileName.Length - 1 - index));
            return Path.GetFileNameWithoutExtension(timeStamp);
        }

        public List<string> GetFiles(string suiteFolderLocation)
        {
            if (Directory.Exists(suiteFolderLocation))
            {
                var files =
                    Directory.GetFiles(suiteFolderLocation, "*.*")
                        .Where(file => file.ToLower().EndsWith("csv")
                                       || file.ToLower().EndsWith("zip")
                                       || file.ToLower().EndsWith("txt"))
                        .ToList();
                return files;
            }
            return null;
        }

        public List<int> GetStagingControlIDs(string ConnStr_ETLReference, List<string> fileFullNames, String suite, string fileNameSeparator)
        {
            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");

            string packages = "";
            foreach (var fileFullName in fileFullNames)
            {
                string packageName = GetPackageName(fileFullName, fileNameSeparator);

                if (!String.IsNullOrEmpty(packages))
                {
                    packages += ", ";
                }
                packages += "''" + packageName + "''";
            }
            if (!String.IsNullOrEmpty(packages))
            {
                string sqlQuery = "EXEC dbo.spGetStagingPackagesFile @SuiteName='" + suite + "', @Packages='" + packages + "' ";

                var ds = GetData(ConnStr_ETLReference, sqlQuery);

                if (ds.Tables.Count > 0)
                {
                    DataTable dtPackages = ds.Tables[0];
                    var query = from r in dtPackages.AsEnumerable()
                                select r.Field<int>("StagingControlID");

                    return query.ToList();

                }
            }

            return null;
        }

        public SortedList<DateTime, String> GetOrderFiles(List<string> fileFullNames, string fileNameSeparator, string PackageName, string fileTimeStampFormat)
        {
            var files = new SortedList<DateTime, String>();
            foreach (var filefullName in fileFullNames)
            {
                if (PackageName == GetPackageName(filefullName, fileNameSeparator))
                {
                    string timeStamp = GetTimeStamp(filefullName, fileNameSeparator);

                    CultureInfo provider = CultureInfo.InvariantCulture;
                    DateTime dt = DateTime.ParseExact(timeStamp, fileTimeStampFormat, provider);

                    files.Add(dt, filefullName);
                }
            }
            if (files.Count > 0)
            {
                return files;
            }
            return null;
        }

        public void RowCountStaged(string ConnStr_Staging, string StagingExtractTable, int StagingJobID)
        {
            var ds = GetData(ConnStr_Staging, "SELECT COUNT(*) AS 'RowsStaged' FROM " + StagingExtractTable + " WHERE StagingJobID = " + StagingJobID);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                RowsStaged = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsStaged"]);
            }
            else
            {
                throw new Exception("RowCountStaged - Failed to return row count");
            }

        }

        public void MergeData(string ConnStr_Staging, string MergeQuery, int StagingJobID)
        {
            var ds = GetData(ConnStr_Staging, "EXEC " + MergeQuery + " @StagingJobID = " + StagingJobID);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                RowsInserted = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsInserted"]);
                RowsDeleted = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsDeleted"]);
                RowsUpdated = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsUpdated"]);
            }
            else
            {
                throw new Exception("MergeData stored proc failed to return row count details");
            }
        }

        public int GetStagingJobID(string ConnStr_ETLReference)
        {
            var ds = GetData(ConnStr_ETLReference, "EXEC dbo.spGetJobID @Type = 'StagingJobID'");

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return Convert.ToInt32(ds.Tables[0].Rows[0]["JobID"]);
            }

            throw new Exception("GetStagingJobID failed to return a StagingJobID");
        }

        public void CleanUpFiles(string unProcessedFileFullName, string InProcessedFileFullName, string SuiteFolderLocation)
        {
            if (String.IsNullOrEmpty(SuiteFolderLocation) == false)
            {
                if (String.IsNullOrEmpty(InProcessedFileFullName) == false && File.Exists(InProcessedFileFullName))
                {
                    string archiveFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(InProcessedFileFullName));
                    if (File.Exists(archiveFileFullName))
                    {
                        File.Delete(archiveFileFullName);
                    }

                    File.Move(InProcessedFileFullName, archiveFileFullName);

                    if (Directory.Exists(Path.GetDirectoryName(InProcessedFileFullName)))
                    {
                        //Todo: Delete files
                        Directory.Delete(Path.GetDirectoryName(InProcessedFileFullName), true);
                    }
                }

                if (String.IsNullOrEmpty(unProcessedFileFullName) == false && File.Exists(unProcessedFileFullName))
                {
                    string archiveFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName));
                    if (File.Exists(archiveFileFullName))
                    {
                        //Todo: Delete files
                        File.Delete(archiveFileFullName);
                    }

                    File.Move(unProcessedFileFullName, Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName)));
                }
            }
        }

        public int PerformSQLBulkCopy(string ConnStr_Source, string SourceCmdText, string ConnStr_Destination,
            int BulkUploadLoadSize, string StagingTable, string SourceQueryMapping, string SourceTypeName)
        {
            List<Mapping> Mappings = SplitMappings(SourceQueryMapping);

            return PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Destination, BulkUploadLoadSize,
                StagingTable, Mappings, SourceTypeName);
        }


        public int PerformFileBulkCopy(string SourceCmdText, string ConnStr_Destination, string FileFullName,
            int BulkUploadLoadSize, string DestinationTable, List<Mapping> Mappings, bool HasHeader, char DelimiterChar)
        {

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_Destination;
            dsb.Remove("Provider");
            ConnStr_Destination = dsb.ConnectionString + ";Connect Timeout=0";

            CreateShemaIniFile(FileFullName, Mappings, HasHeader, DelimiterChar);

            var bulkCopy = new SqlBulkCopy(ConnStr_Destination, SqlBulkCopyOptions.KeepIdentity);

            bulkCopy.BatchSize = BulkUploadLoadSize;
            bulkCopy.BulkCopyTimeout = 0;
            bulkCopy.DestinationTableName = DestinationTable;

            BulkCopyMapping(bulkCopy, Mappings);

            var connString = string.Format(
                @"Provider=Microsoft.Jet.OleDb.4.0; Data Source={0};Extended Properties=""Text;HDR=YES;FMT=Delimited""",
                Path.GetDirectoryName(FileFullName)
            );

            using (var conn = new OleDbConnection(connString))
            {
                conn.Open();

                using (OleDbCommand cmd = new OleDbCommand(SourceCmdText, conn))
                {

                    using (OleDbDataReader reader = cmd.ExecuteReader())
                    {
                        bulkCopy.WriteToServer(reader);
                    }
                }
            }
            int result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);

            bulkCopy.Close();
            return result;
        }

        public void ProcessFile(int StagingJobID, string InProcessedFileFullName, string ConnStr_Staging, List<Mapping> Mappings, int BulkUploadLoadSize,
            string StagingExtractTable, string SuiteFolderLocation, bool HasHeader, char DelimiterChar)
        {
            string selectColumns = "";
            foreach (var mapping in Mappings)
            {
                selectColumns += mapping.OledSourceMap + ", ";
            }

            var query = "SELECT " + selectColumns + StagingJobID + " AS [StagingJobID] FROM [" +
                            Path.GetFileName(InProcessedFileFullName) + "]";

            PerformFileBulkCopy(query, ConnStr_Staging, InProcessedFileFullName, BulkUploadLoadSize, StagingExtractTable,
                Mappings, HasHeader, DelimiterChar);

            string archiveFileFullName = Path.Combine(SuiteFolderLocation, "Processed", Path.GetFileName(InProcessedFileFullName));

            if (File.Exists(archiveFileFullName))
            {
                //TODO: Fix deletion
                File.Delete(archiveFileFullName);
            }

            File.Move(InProcessedFileFullName, archiveFileFullName);

            if (Directory.Exists(Path.GetDirectoryName(InProcessedFileFullName)))
            {
                Directory.Delete(Path.GetDirectoryName(InProcessedFileFullName), true);
            }

            // Move zip file into Processed

            if (Path.GetExtension(unProcessedFileFullName).ToLower() == ".zip")
            {
                archiveFileFullName = Path.Combine(SuiteFolderLocation, "Processed", Path.GetFileName(unProcessedFileFullName));

                if (File.Exists(archiveFileFullName))
                {
                    File.Delete(archiveFileFullName);
                }
                File.Move(unProcessedFileFullName, archiveFileFullName);
            }
        }

        /// <summary>
        /// This is used to create the Schema.ini file used by the OleDbConnection. To forece column types
        /// </summary>
        /// <param name="InProcessedFileFullName"></param>
        public void CreateShemaIniFile(string FileFullName, List<Mapping> Mappings, bool HasHeader, char DelimiterChar)
        {
            StringBuilder schema = new StringBuilder();

            schema.AppendLine("[" + Path.GetFileName(FileFullName) + "]");

            if (HasHeader)
            {
                schema.AppendLine("ColNameHeader=True");
            }
            else
            {
                schema.AppendLine("ColNameHeader=False");
            }

            //Delimited Character
            switch (DelimiterChar)
            {
                case ',':
                    schema.AppendLine("Format=CSVDelimited");
                    break;
                case '\t':
                    schema.AppendLine("Format=TabDelimited");
                    break;
                default:
                    schema.AppendLine("Format=Delimited(" + DelimiterChar + ")");
                    break;
            }

            for (int i = 0; i < Mappings.Count; i++)
            {
                schema.AppendLine("col" + (i + 1).ToString() + "=" + Mappings[i].OledSourceMap + " Text");
            }

            string schemaFileName = Path.Combine(Path.GetDirectoryName(FileFullName), "Schema.ini");
            TextWriter tw = new StreamWriter(schemaFileName);
            tw.WriteLine(schema.ToString());
            tw.Close();

        }

        public string moveFileToInProcess(string unProcessedFileFullName, int StagingJobID, string SuiteFolderLocation)
        {
            string InProcessFileFullName = "";
            string InProcessDirectory = Path.Combine(SuiteFolderLocation, "InProcess", Guid.NewGuid().ToString());
            if (Path.GetExtension(unProcessedFileFullName).ToLower() == ".zip")
            {
                var zip = ZipFile.Open(unProcessedFileFullName, ZipArchiveMode.Read);

                string zippedFileName = "";
                if (zip.Entries.Count == 1)
                {
                    zippedFileName = zip.Entries[0].FullName;
                }
                else
                {
                    zip.Dispose();
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "Zip file has more than one file: ");
                }

                if (zippedFileName.Split('.').Count() > 2)
                {
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "file has to many fullstops in the name expected format *.*: ");
                }

                string newTempDir = Path.Combine(SuiteFolderLocation, Guid.NewGuid().ToString());
                Directory.CreateDirectory(newTempDir);
                zip.ExtractToDirectory(newTempDir);
                zip.Dispose();

                string extractedFilePathName = Path.Combine(newTempDir, zippedFileName);

                if (File.Exists(extractedFilePathName))
                {
                    InProcessFileFullName = Path.Combine(InProcessDirectory, StagingJobID.ToString().PadLeft(5, '0') + "_" + zippedFileName);
                    Directory.CreateDirectory(InProcessDirectory);
                    System.IO.File.Move(extractedFilePathName, InProcessFileFullName);
                    Directory.Delete(newTempDir, true);
                }
                else
                {
                    throw new Exception("Unzipped file cannot be found: " + extractedFilePathName);
                }
            }
            else
            {
                if (Path.GetFileName(unProcessedFileFullName).Split('.').Count() > 2)
                {
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "file has to many fullstops in the name expected format *.*: ");
                }

                InProcessFileFullName = Path.Combine(InProcessDirectory, Path.GetFileName(unProcessedFileFullName));
                Directory.CreateDirectory(InProcessDirectory);
                System.IO.File.Move(unProcessedFileFullName, InProcessFileFullName);
            }
            return InProcessFileFullName;
        }

        public string getFailedDir(string SuiteFolderLocation)
        {
            return Path.Combine(SuiteFolderLocation, "Failed");
        }
        public void MoveToUnProcessedToFailedDir(string unProcessedFileFullName, string SuiteFolderLocation, string ErrorMessage)
        {
            string FailedFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName));

            //handle zip files
            if (File.Exists(unProcessedFileFullName))
            {
                if (File.Exists(FailedFileFullName))
                {
                    //Todo:Fix deletion
                    File.Delete(FailedFileFullName);
                }

                File.Move(unProcessedFileFullName, FailedFileFullName);
            }

            throw new Exception(ErrorMessage + unProcessedFileFullName);
        }

        public List<int> GetNextRunDateTimeStagingControlID(string ConnStr_ETLReference, string Suite)
        {
            var ds = GetData(ConnStr_ETLReference, "[dbo].[spGetStagingPackagesSql] '" + Suite + "'");

            if (ds.Tables.Count > 0)
            {
                DataTable dtPackages = ds.Tables[0];
                var query = from r in dtPackages.AsEnumerable()
                            select r.Field<int>("StagingControlID");
                return query.ToList();
            }

            return null;
        }

        public bool CheckFileHeadersAndColumns(string filename, string SourceQueryMapping, string StagingTable, string ConnStr_Staging, char Delimeter)
        {
            var schemaName = string.Empty;
            var tableName = StagingTable;

            if (StagingTable.Split('.').Count() > 1)
            {
                schemaName = StagingTable.Split('.')[0];
                tableName = StagingTable.Split('.')[1];
            }

            var query = "SELECT c.COLUMN_NAME AS column_name FROM INFORMATION_SCHEMA.COLUMNS c WHERE c.TABLE_NAME = '" + tableName + "' " + (schemaName != string.Empty ? " AND  c.TABLE_SCHEMA='" + schemaName + "'" : "");
            var columnsDs = GetData(ConnStr_Staging, query);
            List<string> listColumns = (from DataRow row in columnsDs.Tables[0].Rows select row[0].ToString()).ToList();

            var listHeaderFromFile = ReadFileHeader(filename, Delimeter);

            var Mappings = SplitMappings(SourceQueryMapping);

            // Check File Header fields should be valid fair with sourcequerymapping
            bool isHeaderValid = true;
            foreach (var header in listHeaderFromFile)
            {
                isHeaderValid = Mappings.FirstOrDefault(f => f.SourceMap == header) != null;
                if (!isHeaderValid)
                {
                    throw new Exception("File header field is not existed. File header fields: " + header + " doesn't existed in source query mapping: " + SourceQueryMapping + ". File name: " + filename + ", Staging table: " + StagingTable);
                }
            }

            // Check Columns from table should be valid fair with sourcequerymapping
            bool isColumnValid = true;

            foreach (var mapping in Mappings)
            {
                isColumnValid = listColumns.Contains(mapping.DestinationMap);
                if (!isColumnValid)
                {
                    throw new Exception("Sourcequerymaping is unvalid. Mapping: " + mapping.DestinationMap + " in source query mapping: " + SourceQueryMapping + " does not existed in table: " + StagingTable);
                }
            }

            // Check File Header fields should be in the same order and value as the sourcequerymapping
            if (listHeaderFromFile.Count > Mappings.Count)
            {
                isHeaderValid = false;
            }
            else
            {
                if (listHeaderFromFile.Where((t, i) => t != Mappings[i].SourceMap).Any())
                {
                    isHeaderValid = false;
                    throw new Exception("Wrong header order. File header fields in file: " + filename + " has order: " + GenerateListToString(listHeaderFromFile) + " is not matched to source query mapping: " + SourceQueryMapping);
                }
            }

            return isHeaderValid && isColumnValid;
        }

        public static List<string> ReadFileHeader(string filename, char delimiter)
        {
            string strHeader = string.Empty;
            var file = new StreamReader(filename);
            while ((strHeader = file.ReadLine()) != null)
            {
                break;
            }

            file.Close();
            var listHeader = new List<string>();
            if (!string.IsNullOrEmpty(strHeader))
            {
                string[] headers = strHeader.Split(delimiter);

                listHeader.AddRange(headers);
            }

            return listHeader;
        }

        public void StagingLogMessage(string ConnStr_ETLReference,
                      int StagingJobID,
                      int SuccessFlag,
                      int CompletedFlag,
                      string MessageSource,
                      string Message,
                      int RowsInserted,
                      int RowsDeleted,
                      int RowsUpdated,
                      int RowsStaged,
                      string ActualFileName,
                      string StartTime,
                      string ExtractStartTime,
                      string ExtractEndTime,
                      int StagingControlID,
                      string ManagerGUID)
        {
            string tempMessage = Message.Replace("'", "''");

            string sqlCmdLog = "[spInsertStagingExecutionLog] "
                               + "@StagingJobID = " + StagingJobID + ", "
                               + "@ManagerGUID = '" + ManagerGUID + "', "
                               + "@SuccessFlag = " + SuccessFlag + ", "
                               + "@CompletedFlag = " + CompletedFlag + ", "
                               + "@MessageSource = '" + MessageSource + "', "
                               + "@Message = '" + tempMessage + "', "
                               + "@RowsStaged = " + RowsStaged + ", "
                               + "@RowsInserted = " + RowsInserted + ", "
                               + "@RowsDeleted = " + RowsDeleted + ", "
                               + "@RowsUpdated = " + RowsUpdated + ", "
                               + "@StagingPackagePathAndName = NULL, "
                               + "@ActualFileName = '" + ActualFileName + "', "
                               + "@StartTime = '" + StartTime + "', ";

            if (String.IsNullOrEmpty(ExtractStartTime))
            {
                sqlCmdLog += "@ExtractStartTime = NULL, ";
            }
            else
            {
                sqlCmdLog += "@ExtractStartTime = '" + ExtractStartTime + "', ";
            }

            if (String.IsNullOrEmpty(ExtractStartTime))
            {
                sqlCmdLog += "@ExtractEndTime = NULL, ";
            }
            else
            {
                sqlCmdLog += "@ExtractEndTime = '" + ExtractEndTime + "', ";
            }

            sqlCmdLog += "@StagingControlID = " + StagingControlID;

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");
            ConnStr_ETLReference = dsb.ConnectionString;

            var SrcConn = new SqlConnection(ConnStr_ETLReference);

            var sCommand = new SqlCommand(sqlCmdLog, SrcConn);
            SrcConn.Open();
            sCommand.ExecuteNonQuery();
            SrcConn.Close();
            SrcConn.Dispose();
        }
        #endregion

        #region Extract Manager

        public void MainExtractManagerBulkUpload(Dictionary<string, object> values)
        {
            var dsb = new DbConnectionStringBuilder();
            var ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            var ConnStr_Destination = values["ConnStr_Destination"].ToString();
            var ConnStr_Source = values["ConnStr_Source"].ToString();
            var SourceTypeName = values["SourceTypeName"].ToString();
            var SourceCmdText = values["SourceCmdText"].ToString();
            var bTruncateExtractTable = Convert.ToBoolean(values["bTruncateExtractTable"]);
            var ExtractTable = values["ExtractTable"].ToString();
            var BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            var SourceQueryMapping = values["SourceQueryMapping"].ToString();
            var ExtractStartTime = values["ExtractStartTime"].ToString();
            var ExtractEndTime = values["ExtractEndTime"].ToString();
            var ExtractJobID = Convert.ToInt32(values["ExtractJobID"]);
            var ExtractControlID = Convert.ToInt32(values["ExtractControlID"]);
            var ManagerGUID = values["ManagerGUID"].ToString();


            checkConnection(ConnStr_Destination);
            dsb.ConnectionString = ConnStr_Destination;
            dsb.Remove("Provider");
            ConnStr_Destination = dsb.ConnectionString + ";Connect Timeout=0";

            checkConnection(ConnStr_Source, SourceTypeName);
            dsb.ConnectionString = ConnStr_Source;
            dsb.Remove("Provider");

            ConnStr_Source = dsb.ConnectionString;
            if (SQL.Contains(SourceTypeName))
            {
                ConnStr_Source += ";Connect Timeout=0";
            }

            //This is to handle if the source query uses any paramters. All evaluted paramters
            //must be part if the readlonly collection

            string tempSourceCmdText = SourceCmdText.Replace("'", "''");

            ExtractLogMessage(ConnStr_ETLReference,
               ExtractJobID,
               1,
               0,
               "Log ExtractExecution.BulkUpload",
               tempSourceCmdText,
               0,
               "",
               null,
               ExtractStartTime,
               ExtractEndTime,
               ExtractEndTime,
               ExtractControlID,
               ManagerGUID
               );

            TruncateTable(ExtractTable, ConnStr_Destination, bTruncateExtractTable);

            int rowsCopied = PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Destination, BulkUploadLoadSize, ExtractTable, SourceQueryMapping, SourceTypeName);
            values.Add("rowsCopied", rowsCopied);
        }

        private void ExtractLogMessage(string ConnStr_ETLReference,
                     int ExtractJobID,
                     int SuccessFlag,
                     int CompletedFlag,
                     string MessageSource,
                     string Message,
                     int RowsExtracted,
                     string ExtractPackagePathAndName,
                     string StartTime,
                     string ExtractStartTime,
                     string ExtractEndTime,
                     string NextExtractStartTime,
                     int ExtractControlID,
                     string ManagerGUID
          )
        {
            StartTime = StartTime == null ? "NULL" : "'" + StartTime + "'";
            ExtractStartTime = ExtractStartTime == null ? "NULL" : "'" + ExtractStartTime + "'";
            ExtractEndTime = ExtractEndTime == null ? "NULL" : "'" + ExtractEndTime + "'";
            NextExtractStartTime = NextExtractStartTime == null ? "NULL" : "'" + NextExtractStartTime + "'";

            string sqlCmdLog = "[spInsertExtractExecutionLog] "
                 + "@ExtractJobID = " + ExtractJobID + ", "
                 + "@StartTime = " + StartTime + ","
                 + "@ManagerGUID = '" + ManagerGUID + "', "
                 + "@SuccessFlag = " + SuccessFlag + ", "
                 + "@CompletedFlag = " + CompletedFlag + ", "
                 + "@MessageSource = '" + MessageSource + "', "
                 + "@Message = '" + Message + "', "
                 + "@RowsExtracted = " + RowsExtracted + ", "
                 + "@ExtractStartTime = " + ExtractStartTime + ", "
                 + "@ExtractEndTime = " + ExtractEndTime + ", "
                 + "@NextExtractStartTime = " + NextExtractStartTime + ", "
                 + "@ExtractPackagePathAndName = '" + ExtractPackagePathAndName + "', "
                 + "@ExtractControlID = " + ExtractControlID;

            //string sqlCmdLog = "[spInsertExtractExecutionLog] "
            //     + "@ExtractJobID = " + ExtractJobID + ", "
            //     + "@StartTime = NULL,"
            //     + "@ManagerGUID = '" + ManagerGUID + "', "
            //     + "@SuccessFlag = 1, "
            //     + "@CompletedFlag = 0, "
            //     + "@MessageSource = 'Log ExtractExecution.BulkUpload', "
            //     + "@Message = '" + tempSourceCmdText + "', "
            //     + "@RowsExtracted = 0, "
            //     + "@ExtractStartTime = '" + ExtractEndTime + "', "
            //     + "@ExtractEndTime = '" + ExtractEndTime + "', "
            //     + "@NextExtractStartTime = '" + ExtractEndTime + "', "
            //     + "@ExtractPackagePathAndName = '', "
            //     + "@ExtractControlID = " + ExtractControlID;

            var dsb = new DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");
            ConnStr_ETLReference = dsb.ConnectionString;

            var SrcConn = new SqlConnection(ConnStr_ETLReference);

            var sCommand = new SqlCommand(sqlCmdLog, SrcConn);
            SrcConn.Open();
            sCommand.ExecuteNonQuery();
            SrcConn.Close();
            SrcConn.Dispose();
        }

        public void StartManagerPackageExtract(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }

        #endregion

        #region Delivery Manager
        public void StartManagerPackageDelivery(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }
        #endregion

        #region Summary Manager

        public void StartManagerPackageSummary(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }
        #endregion

        #region Common

        public int PerformSQLBulkCopy(string ConnStr_Source, string SourceCmdText, string ConnStr_Destination,
         int BulkUploadLoadSize, string DestinatonTable, List<Mapping> Mappings, string SourceTypeName)
        {

            int result = 0;
            var bulkCopy = new SqlBulkCopy(ConnStr_Destination, SqlBulkCopyOptions.KeepIdentity);

            bulkCopy.BatchSize = BulkUploadLoadSize;
            bulkCopy.BulkCopyTimeout = 0;
            bulkCopy.DestinationTableName = DestinatonTable;

            BulkCopyMapping(bulkCopy, Mappings);

            if (SQL.Contains(SourceTypeName))
            {
                var SrcConn = new SqlConnection(ConnStr_Source);
                var sCommand = new SqlCommand(SourceCmdText, SrcConn);
                sCommand.CommandTimeout = 0;

                SrcConn.Open();
                var SqlReader = sCommand.ExecuteReader();
                bulkCopy.WriteToServer(SqlReader);

                SqlReader.Close();
                SrcConn.Close();
                SrcConn.Dispose();
                result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);
                bulkCopy.Close();
            }
            else if (ORACLE.Contains(SourceTypeName))
            {

                var SrcConn = new OracleConnection(ConnStr_Source);
                SrcConn.Open();

                var sCommand = new OracleCommand(SourceCmdText, SrcConn);
                sCommand.CommandTimeout = 0;
                sCommand.Parameters.Add("cur", OracleDbType.RefCursor);
                sCommand.Parameters["cur"].Direction = ParameterDirection.Output;
                sCommand.ExecuteNonQuery();

                var SqlReader = sCommand.ExecuteReader();
                bulkCopy.WriteToServer(SqlReader);

                SqlReader.Close();
                SrcConn.Close();
                SrcConn.Dispose();

                result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);
                bulkCopy.Close();
            }

            return result;
        }

        public List<Mapping> SplitMappings(string SourceQueryMapping)
        {
            var lMapping = new List<Mapping>();
            if ((!String.IsNullOrEmpty(SourceQueryMapping)) && SourceQueryMapping.Contains(";"))
            {
                List<string> lSourceQueryMapping = new List<string>(SourceQueryMapping.Split(';'));

                foreach (var map in lSourceQueryMapping)
                {
                    List<string> cols = new List<string>(map.Split(','));
                    if (cols.Count == 2)
                    {
                        if (String.IsNullOrEmpty(cols[0]) || String.IsNullOrEmpty(cols[1]))
                        {
                            throw new System.Exception("Bulk copy SourceQueryMapping has an invalid pair (empty string)");
                        }
                        lMapping.Add(new Mapping()
                        {
                            SourceMap = cols[0].Trim(),
                            DestinationMap = cols[1].Trim()
                        });

                    }
                    else
                    {
                        throw new System.Exception("Bulk copy SourceQueryMapping has an invalid pair (count does not match): " + map);
                    }
                }
            }
            return lMapping;
        }

        public void checkConnection(string ConnStr, string SourceTypeName = "OLEDB")
        {
            var dsb = new DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr;
            dsb.Remove("Provider");
            if (SQL.Contains(SourceTypeName))
            {

                var con = new SqlConnection(dsb.ConnectionString);
                con.Open();
                con.Close();
            }
            else if (ORACLE.Contains(SourceTypeName))
            {
                var con = new OracleConnection(dsb.ConnectionString);
                con.Open();
                con.Close();
            }

        }

        public void BulkCopyMapping(SqlBulkCopy bulkCopy, List<Mapping> Mappings)
        {
            foreach (var mapping in Mappings)
            {
                var m = new SqlBulkCopyColumnMapping();

                bulkCopy.ColumnMappings.Add(new
                 SqlBulkCopyColumnMapping(mapping.OledSourceMap, mapping.DestinationMap));
            }
        }

        public string GetDtexecLocation(bool RunAs32Bit, string ConnStr_ETLReference)
        {
            var ds = GetData(ConnStr_ETLReference, "EXEC spGetDtexecLocation @RunAs32Bit='" + RunAs32Bit.ToString() + "'");

            string dtexec = ds.Tables[0].Rows[0]["LocationDtexec"].ToString();

            if (dtexec.Contains(" "))
            {
                dtexec = "\"" + dtexec + "\"";
            }
            return dtexec;
        }
        public void StartSSISPackage(string command, int ControlID, bool RunAs32Bit, string ConnStr_ETLReference)
        {
            string dtexec = GetDtexecLocation(RunAs32Bit, ConnStr_ETLReference);

            ProcessInformation p = new ProcessInformation() { ControlID = ControlID };
            ProcessControl.Add(ControlID, p);
            p.EnableRaisingEvents = true;
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;
            p.Exited += p_Exited;

            p.OutputDataReceived += new DataReceivedEventHandler
            (
                delegate(object sender, DataReceivedEventArgs e)
                {
                    ((ProcessInformation)sender).OutputMessage += e.Data + Environment.NewLine;
                }
            );

            p.StartInfo.FileName = dtexec;
            p.StartInfo.Arguments = command;
            p.StartInfo.CreateNoWindow = true;

            SSISPackagesCount++;

            p.Start();
            p.BeginOutputReadLine();
        }

        void p_Exited(object sender, EventArgs e)
        {
            SSISPackagesCount--;
        }

        public string GenerateListToString(List<string> list)
        {
            string str = list.Aggregate(string.Empty, (current, item) => current + (item + ","));
            if (str.Length > 1)
            {
                str = str.Substring(0, str.Length - 1);
            }

            return str;
        }

        public DataSet GetData(string connnectionString, string sqlQuery)
        {
            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = connnectionString;
            dsb.Remove("Provider");

            var ds = new DataSet();
            using (var conn = new SqlConnection(dsb.ConnectionString))
            {
                var adapter = new SqlDataAdapter(sqlQuery, conn);
                adapter.Fill(ds);
            }

            return ds;
        }

        public void TruncateTable(string Table, string ConnStr_Destination, bool bTruncateTable)
        {
            if (bTruncateTable)
            {
                var trcConn = new SqlConnection(ConnStr_Destination);

                var trcCommand = new SqlCommand("TRUNCATE TABLE " + Table, trcConn);
                trcCommand.CommandTimeout = 0;

                trcConn.Open();
                trcCommand.ExecuteNonQuery();
                trcConn.Close();
                trcConn.Dispose();
            }
        }
        #endregion

    }

    public class ProcessInformation : Process
    {
        public int ControlID { get; set; }
        public string OutputMessage { get; set; }
    }
    static class SqlBulkCopyExtension
    {
        public static int RowsCopiedCount(this SqlBulkCopy bulkCopy)
        {
            FieldInfo _rowsCopiedField = typeof(SqlBulkCopy).GetField("_rowsCopied", BindingFlags.NonPublic | BindingFlags.GetField | BindingFlags.Instance);
            return (int)_rowsCopiedField.GetValue(bulkCopy);
        }

    }
    public class Mapping
    {
        public string SourceMap { get; set; }
        public string OledSourceMap
        {
            get { return SourceMap.Replace(".", ""); }
        }
        public string DestinationMap { get; set; }
    }

}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5eb9ca1c7ae4439c833bf7c7d2a49721.Properties.Settings.get_Default():ST_5eb9ca1c7ae4439c833bf7c7d2a49721.Properties.Sett" +
    "ings")]

namespace ST_5eb9ca1c7ae4439c833bf7c7d2a49721.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using DWReferenceHelper;
#endregion

namespace ST_5eb9ca1c7ae4439c833bf7c7d2a49721
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
			// TODO: Add your code here
            Dictionary<string,object> values = new Dictionary<string, object>();
		    try
		    {


		        Variables vars = null;
		        Dts.VariableDispenser.LockOneForRead("User::Suite", ref vars);
		        values.Add("Suite", vars[0].Value.ToString());
		        vars.Unlock();

		        Dts.VariableDispenser.LockOneForRead("User::StagingExecutionLocation", ref vars);
		        values.Add("StagingExecutionLocation", vars[0].Value.ToString());
		        vars.Unlock();

		        Dts.VariableDispenser.LockOneForRead("User::Server", ref vars);
		        values.Add("Server", vars[0].Value.ToString());
		        vars.Unlock();

		        Dts.VariableDispenser.LockOneForRead("User::FileNameSeparator", ref vars);
		        values.Add("FileNameSeparator", vars[0].Value.ToString());
		        vars.Unlock();

		        Dts.VariableDispenser.LockOneForRead("User::ConnStr_ETLReference", ref vars);
		        values.Add("ConnStr_ETLReference", vars[0].Value.ToString());
		        vars.Unlock();

		        Dts.VariableDispenser.LockOneForRead("System::ExecutionInstanceGUID", ref vars);
		        values.Add("ExecutionInstanceGUID", vars[0].Value.ToString());
		        vars.Unlock();

		        Dts.VariableDispenser.LockOneForRead("User::StartTime", ref vars);
		        values.Add("StartTime", vars[0].Value.ToString());
		        vars.Unlock();

		        ScriptHelper sh = new ScriptHelper();
		        sh.MainStagingManagerProcessFiles(values);

                Dts.TaskResult = (int)ScriptResults.Success;
		    }
            catch (Exception ex)
		    {
                Variables vars = null;
                Dts.VariableDispenser.LockOneForRead("System::TaskName", ref vars);
                string TaskName = vars[0].Value.ToString();
                vars.Unlock();

                Dts.Events.FireError(1, TaskName, ex.ToString(), "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
		    }
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_b636f6701e514449b3f0cb2c07fb8f51.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{1A69DDFA-D68D-40F4-AD1F-C453619A7290}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_5eb9ca1c7ae4439c833bf7c7d2a49721</RootNamespace>
    <AssemblyName>ST_b636f6701e514449b3f0cb2c07fb8f51</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Oracle.DataAccess, Version=4.112.3.0, Culture=neutral, PublicKeyToken=89b483f429c47342, processorArchitecture=AMD64" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.IO.Compression" />
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="ScriptHelper.cs">
      <SubType>Component</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_5eb9ca1c7ae4439c833bf7c7d2a49721</msb:CodeName>
		<msb:DisplayName>ST_5eb9ca1c7ae4439c833bf7c7d2a49721</msb:DisplayName>
		<msb:ProjectId>{62DAFADE-86E5-4693-8EBE-D15D8900F10F}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_b636f6701e514449b3f0cb2c07fb8f51.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="ScriptHelper.cs"/>
		<msb:Breakpoint Include="e9e87939d5cd4649b7809b099ff2cc5d">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>11</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>136</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="600a23adc8154bae821e503615ac5964">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>11</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>106</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_5eb9ca1c7ae4439c833bf7c7d2a49721")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_5eb9ca1c7ae4439c833bf7c7d2a49721")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5eb9ca1c7ae4439c833bf7c7d2a49721.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5eb9ca1c7ae4439c833bf7c7d2a49721.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5eb9ca1c7ae4439c833bf7c7d2a49721.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_5eb9ca1c7ae4439c833bf7c7d2a49721.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_5eb9ca1c7ae4439c833bf7c7d2a49721.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_b636f6701e514449b3f0cb2c07fb8f51.dll">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
JgAAAW/RAAAKb9IAAApvEAAACm8vAAAKB2/TAAAKczgAAAYMCAZvDwAABgIozgAAChZv1AAACt5p
DRQTBAIozgAACm/PAAAKcuQeAHASBG/QAAAKEQQWjCYAAAFv0QAACm/SAAAKbxAAAAoTBREEb9MA
AAoCKM4AAApv1QAAChcRBQlvEAAACnKhAgBwFm/WAAAKJgIozgAAChdv1AAACt4AKgBBHAAAAAAA
AAYAAADPAQAA1QEAAGkAAAA4AAABHgIo1wAACiq0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNv
dXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9
bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2Vz
LlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAA
AHY0LjAuMzAzMTkAAAAABQBsAAAAlBYAACN+AAAAFwAAWB0AACNTdHJpbmdzAAAAAFg0AAAIHwAA
I1VTAGBTAAAQAAAAI0dVSUQAAABwUwAAdAkAACNCbG9iAAAAAAAAAAIAAAFXHaIJCQsAAAD6JTMA
FgAAAQAAAHYAAAALAAAAHgAAAFcAAACsAAAA1wAAAAMAAABBAAAAJAAAAAUAAAAPAAAAGwAAABQA
AAABAAAACgAAAAEAAAADAAAADAAAAAAACgABAAAAAAAGABABCQEKACoBFwEKAEcBMgEOAKcBfgEG
AMMBCQEGAAMD6AIGADED6AIKADEE6AIGAD4ECQESAC8GGQYGAG4GCQESAJYGDQYGAIIJcQkGALMJ
ngkGALYNnA0GAOENzw0GAPgNzw0GABUOzw0GADQOzw0GAE0Ozw0GAGYOzw0GAIEOzw0GAJwOzw0G
ALUOzw0GAO4Ozg4GAA4Pzg4GACwPzg4GAGMPzg4GAJAPCQESAJ4PDQYSAL0PDQYSAMcPDQYSAOIP
DQYGABAQ/Q8SADYQDQYGAEgQPhAfAF8QAAAGAGoQCQEGAHAQCQEGAIsQCQEGALAQnxAbAL0QAACr
AF8QAAASAAAR7RAGAF8R6AIGAG0R6AIGAOMRCQEGACISPhAWAEsSPxIGAFYS6AIaANMSDQYaAPkS
DQYaAA0TDQYaADQTDQYGAH4TCQEGAJkTCQEGAKMTPhASAMUTGQYSACwUGhQSADwU7RASAE4UGhQS
AFsUGhQSAHkUDQYGALIUphQGAMsUCQEGANAUPhAGAN0UPhAGAPIUCQEeADYVIBUiAD4VIBUiAEkV
IBUGAHcVWBUiAIwVIBUGAMEVPhAeAN8VIBUGAEEX/Q8GAGEXCQEGAGwXPhAGAHkXPhASAJ4XGQYS
AKwXGQYSALcX7RAKAOcX0RcGAPEXCQESABwYGQYSACoY7RAmAGIYSRgmAHMYSRgmAIEYSRgmAKoY
SRgmALoYSRgSAMcY7RASANMYDQYmAPQYSRgSAAoZGQYSACMZGQYGAFkZCQEKAGEZFwEKAI8ZFwEG
AIMKCQEKAP0ZFwEGAGUaCQESADcbGQYSAEYb7RAGAFcbCQEGAFwbCQEGAIAbzw0GAIobzw0GAKkb
FwEGAMYbzw0KANwb0RcKAPUb0RcOABEcfgEOADMcfgEqAIwcbBwqALQcbBwqAM0cbBwOAOwcfgEA
AAAAAQAAAAAAAQABAAEAEAAyAD8ABQABAAEAAQAQAFEAPwAJABIAPwCAARAAZAA/AAUAFABEAAEA
EAB5AD8ABQAUAEUAAAAQAIEAiwAFABYASwAAARAAugCLAA0AGABPAAEAEADDAM4AEQAZAFIAAwEA
APIAAAAVABkAVAADARAAXBYAAAUAHABUAAMBEACUFgAABQAdAFYABgAQAyUABgAfAy4ABgA4AzEA
BgA/AzEAAQC6Bi4AAQDYBi4AAQD1Bi4AAQASBy4AAQAuB30BAQBTB30BAQB8B30BEQDqEZ0DEQCO
EvkDEQA1FvkDEQAGF8QFEQCoGbAHEQAFG9oHAQBZCC4AAQB0CH0BAQAPCX0BAQAqCX0BEQCSCY4B
EQC/CZIBEQADCrABBgYsCi4AVoA0Cr4BVoA8Cr4BBgAlDKUFBgCnFrMFBgC3Fn0BUCAAAAAAhgjI
ARMAAQBYIAAAAACGCNkBFwABAGEgAAAAAIYI6gETAAIAaSAAAAAAhgj6ARcAAgByIAAAAACGCAoC
EwADAHogAAAAAIYIGgIXAAMAgyAAAAAAhggqAhMABACLIAAAAACGCDkCFwAEAJQgAAAAAIYISAIc
AAUAnCAAAAAAhghgAiAABQClIAAAAACGCHgCHAAGAK0gAAAAAIYIlAIgAAYAtiAAAAAAhgiwAhwA
BwC+IAAAAACGCMwCIAAHAMggAAAAAIYAQwM4AAgAACUAAAAAhgBiAzgACQDoJgAAAACGAIQDOAAK
ADAqAAAAAIYApwNCAAsAVCoAAAAAhgC2A0gADQBgKgAAAACGAM0DTwAQANwqAAAAAIYA6wNZABYA
MCsAAAAAhgAGBEIAGQCkKwAAAACGABMEYAAbAPwrAAAAAIYAHARpABwANC0AAAAAhgBHBHkAIADE
LQAAAACGAFUEiwAkAGQuAAAAAIYAZASLACcAYC8AAAAAhgBuBJIAKgDULwAAAACGAH4EWQArAIgw
AAAAAIYAiwSXAC4AsDAAAAAAhgCeBKIANQC4MQAAAACGALIEswA9AAAzAAAAAIYAvgTFAEYAJDQA
AAAAhgDRBNIASgC8NQAAAACGAOUE2QBNAMw1AAAAAIYA8gRZAE4AJDYAAAAAhgAPBd4AUQDgNgAA
AACGADIF6ABTAOw5AAAAAJYATQXxAFgARDoAAAAAhgBcBfsAWgAUPAAAAACGAG4FOABqAPg9AAAA
AIEAiwUPAWsAwj8AAAAAhgCdBVkAeQDJPwAAAACGALgFWQB8ANA/AAAAAIYA1AVZAH8A2D8AAAAA
hgCLBCEBggAMQQAAAACGAO8FMQGJACxCAAAAAIYA/QU7AYoAoEIAAAAAhgA7BkEBjAAMQwAAAACG
AEsGTQGOAKBDAAAAAIYAXQZTAZAAckQAAAAAgQB4BlsBlACQRAAAAACGAIEGYgGWAOBEAAAAAIYA
ngZrAZcASEUAAAAAhgCmBnIBmQCURQAAAACGGLQGeQGcAGwrAAAAAJEAzxGYA5wA7ysAAAAAkQBx
EvIDnQAVNgAAAACRAAwW8gOeAKU2AAAAAJEA4Ra9BZ8AfUMAAAAAkQB3GagHoACCRAAAAACRANwa
ywKiAA5GAAAAAIYIGQgTAKQAFkYAAAAAhggnCBcApAAfRgAAAACGCDUIHAClACdGAAAAAIYIRwgg
AKUAMEYAAAAAhhi0BnkBpgA4RgAAAACWAKsIiAGmAGtGAAAAAIYIuwgcAKcAc0YAAAAAhgjJCCAA
pwB8RgAAAACGCNcIHACoAJNGAAAAAIYI6QgcAKgAm0YAAAAAhgj8CCAAqACkRgAAAACGGLQGeQGp
AKxGAAAAAIMYtAZ5AakAtEYAAAAAkwjPCZYBqQDtRgAAAACTCOMJmwGpAPRGAAAAAJMI7wmgAakA
/EYAAAAAlggTCrQBqgAPRwAAAACGGLQGeQGqAANHAAAAAJEYChx3CKoAGEcAAAAAhgAnCnkBqgCA
SQAAAACGGLQGeQGqAJU2AAAAAIYYtAZ5AaoAxjYAAAAAhgBvFq0FqgCdNgAAAACGGLQGeQGsALM2
AAAAAIYAvha3BawAAAABAEQKAAABAEQKAAABAEQKAAABAEQKAAABAEQKAAABAEQKAAABAEQKAAAB
AEoKAAABAEoKAAABAEoKAAABAFEKAAACAF4KAAABAHAKAAACAIMKAAADAI8KAAABAJUKAAACAK4K
AAADALUKAAAEAMYKAAAFANIKAAAGANwKAAABAPEKAAACAPgKAAADANwKAAABAFEKAAACAF4KAAAB
ABALAAABANwKAAACACQLAAADADILAAAEAF4KAAABACQLAAACAF4KAAADADgLAAAEAEQLAAABAFgL
AAACAGgLAAADAHwLAAABAFgLAAACAIkLAAADAHwLAAABANwKAAABAOkHAAACAAEIAAADANUHAAAB
AJQLAAACAKMLAAADALELAAAEAMULAAAFANgLAAAGAOULAAAHAPgLAAABAKMLAAACALELAAADAAcM
AAAEAMULAAAFABQMAAAGACUMAAAHAC4MAAAIADgMAAABAHwLAAACAAEIAAADAFgLAAAEACUMAAAF
AMULAAAGAGgLAAAHANUHAAAIAC4MAAAJADgMAAABAAcMAAACACUMAAADAC4MAAAEADgMAAABAOkH
AAACAHwLAAADANUHAAABANUHAAABAOkHAAACANUHAAADAEYMAAABANwKAAACAI8KAAABAFMMAAAC
AOULAAADANgLAAAEAFgLAAAFAFwMAAABAFMMAAACAGYMAAABANwKAAACAHwLAAADAHAMAAAEAHwM
AAAFAIoMAAAGAJgMAAAHAKUHAAAIALIHAAAJAL4HAAAKAMoHAAALAKAMAAAMANIKAAANAK8MAAAO
AMAMAAAPALUKAAAQAMYKAAABAEoKAAABANwKAAACAM8MAAADAHAMAAAEAHwMAAAFAIoMAAAGAJgM
AAAHANwMAAAIAOoMAAAJANIKAAAKAK8MAAALAMAMAAAMAAQNAAANABkNAAAOAMYKAAABAPEKAAAC
APgKAAADANwKAAABAPEKAAACAPgKAAADANwKAAABAPEKAAACAPgKAAADANwKAAABAJQLAAACAKML
AAADALELAAAEAMULAAAFACoNAAAGACUMAAAHAPgLAAABAOULAAABADoNEBACAPgLAAABAEINAAAC
ACUMAAABAEsNAAACANwKAAABAFYNAAACAJMIAAADAEsNAAAEANwKAAABAF4NAAACAGUNAAABAGcN
AAABAGwNAAACAH4NAAABAIcNAAACALELAAADAI0NAAABAN4RAAABAIwSAAABAIwSAAABAAIXAAAB
AF4NAAACAGUNAAABAPgaAAACAAAbAAABAEQKAAABAEQKAAABAEINAAABAEQKAAABAEQKAAABAEQK
AAABAJAWAAACAJIWAAABAN8WeQC0BiAAgQC0BiAAiQC0BiAAkQC0BiAAmQC0BiAAoQC0BiAAqQC0
BiAAsQC0BiAAuQC0BiAAwQC0BiAAyQC0BhcA0QC0BnkB2QC0BnkB4QC0BnkBDAB+D94BCQCHDxwA
6QCXD+UBYQCyD+wB8QB+D/EB+QDZD/cBCQEcEP0BEQEqEAMCGQF+DwcCIQFNEAwCFABVEBMAHAAc
ECACJAAqEDEC6QCXDzYCAQF+DzwCOQF4EEMCJACCEEgCQQGXEHkBEQGCEEgCSQG3EEwCLADNEFkC
NAAcEG4CPAAqEIMCEQDYEBMAPACCEEgCOQHlEMECYQG0BnkBYQEaESAAYQEvEcYCYQE2ERwA6QCX
D8sCFABLEdECDABUEdcCOQFYEfUCIQFNEMsCRAAcEAIDTAAqEDECVAB8EYMCIQGGEWoD6QCSEZIA
6QCeEW8DIQFNEOUB6QCXD3oD6QCXD4YD6QCoERMAIQGzEWoD6QAREhwA6QAZEsYCgQEsEpgDgQET
BKYDXAC0BrUDiQFkErsDiQFqEtkDmQHlEgQEFAAcECACZAAqEDEC6QDrEpgD6QCXDwwCZACCEEgC
CQFVEBMAoQEnExkEbAC0BrUDsQFWEzAERAC0BnkB6QBdE24EcQBpE5sBSQCOE3QERABUEdcCRABV
EBMAwQG0BiAAyQEsEpgDyQGoE6AEyQGvE6UEIQG0E2oDgQGoE6sEUQC0BroEUQDYExcAUQDmExcA
UQD6EyAA6QATFMIE2QG0BiAA4QFJFHkB6QG0BsgE6QFrFNAEUQCFFNYEUQCTFHkBdAAcECACfAAq
EDECfACCEEgCIQGZFGoDAQK0BnkBAQLAFBAF6QCXDxcFMQGHDxwAdAB+Dx4FdABVEBMAEQK0BiAA
GQLoFCAAGQKTFHkBIQL3FDMFKQJJFDkFMQKcFUMFhABVEBMAhAB+Dx4FSQKoFRwAMQKXEHkB6QC1
FVcFiQG7FV4FgQHPFWoFWQLxFXEF6QAEFnkFCQC0BnkBGQF+D88F6QAtF24E6QA7F30BiQFNF9QF
jAC0BrUDiQFWE/IFlAC0BrUDiQFSFx0GnAC0BrUDiQFkEkAGiQFoF1sGcQK0BiAAeQKEFxwAeQKT
FHkBFAC0BnkBFACNF6oG6QCWF0IAgQK0BiAAiQK0BsUGkQLBFxMA4QGTFHkBmQKXEHkBoQK0BnkB
kQIJGBcAiQJrFAIHsQKTFHkBuQK0BiAAwQK0BhEHwQKbGBkHyQJUER8HyQJ+DykH4QLmGDAHwQJr
FDcHdAC0BnkB6QBLEcYCFAC0BqoGFAB+Dx4F6QAFGRwAdABUEVUH+QK0BnkBUQBGGYcH+QK0BjsB
AQNUEY0HCQOHDxwAEQPQGRwAIQPZGbUHLABUEdcCEQDlGbkHEQAOGr4HKQMcGrkHKQMwGrkHKQNL
GrkHMQO0BrUDEQByGsQHGQO0BrUDEQB9GssHKQOUGiAAKQOhGiAAKQOvGrkHEQDCGkgCEQDIGnkB
pAC0BrUDiQEtG+0HYQC0BnkBOQO0BsUGQQNSGwwILAC0BnkBFABUEVUHEQC0BnkBSQNuGzYISQOX
Gz8IWQOgG0kIaQO0BnkBSQPPG1QIaQC0BloIeQO0BmcIGQC0BnkBiQO0BnkBDAC0BnkBIQBFHHsI
kQOeHIEImQO+HIcIoQN+D5AIqQN8EQMCoQPWHHkBkQPdHBcAkQMAHZcIsQMLHZ0IIQC0BnkBCABo
AMIBCABsAMcBDgAtAswBIABzAMcBLgBjAFQJLgBbAEsJLgBrAMcBLgALALsILgATAAUJLgAbAC4J
LgAjAC4JLgArAC4JLgAzAAUJLgA7ADQJLgBDAC4JQABzAMcBYABzAMcBgABzAMcBgwBrAMcBoABz
AMcBoQBzAMcBwABzAMcBwQBzAMcBwwA7BscB4ABzAMcB4QBzAMcBAAFzAMcBAQFzAMcBAwFjBscB
IAFzAMcBIQFzAMcBQAFzAMcBQQFzAMcBQwFzAMcBYAFzAMcBYQFzAMcBYwFzAMcBgAFzAMcBgQFz
AMcBoAFzAMcBoQFzAMcBqQFTBm4IwAFzAMcBwQFzAMcByQFTBm4I4QFzAMcBAQJzAMcBIQJzAMcB
QQJzAMcBYQJzAMcBgQJzAMcBoQJzAMcBAQNzAMcBIAdzAMcBQAdzAMcBYAdzAMcBgAdzAMcBoAdz
AMcBwAdzAMcB4AdzAMcBAAhzAMcBIAhzAMcBQAhzAMcBgAhrAMcBoAhzAMcBwAhzAMcBAAlzAMcB
IAlzAMcBiALfAioDdQOAA4wDkgPqA1IEfgSUBJsEsQTdBP8EJAV/BZQFmAVnBrUGzQbdBvMGPQdb
B3sHlgeiB9IHEgggCCkITghiCKYIAgABAAMACAAFAAoABgANAAcADwAAAKUHgAEAALIHgAEAAL4H
gAEAAMoHgAEAANUHhAEAAOkHhAEAAAEIhAEAAJMIgAEAAJ0IhAEAAEoJhAEAAFQJhAEAAGIJhAEA
AIIJpgEAAPsJqwEAAB8KuQECAAEAAwABAAIAAwACAAMABQABAAQABQABAAYABwACAAUABwACAAcA
CQABAAgACQACAAkACwABAAoACwACAAsADQABAAwADQABAA4ADwACAA0ADwABAEAAEQACAD8AEQAC
AEEAEwABAEIAEwABAEYAFQACAEUAFQACAEcAFwABAEkAGQACAEgAGQACAEwAGwACAE0AHQABAE4A
HQACAE8AHwDXARQCGgIqAlECZQJ6AvoCEwMhA60DEgQmBPAE9wROBegFFAY3BuQHBIAAAAEAAADa
FHp7AAAAAAAAPw8AAAQAAAAAAAAAAAAAAAEAAAEAAAAABAAAAAAAAAAAAAAAAQAJAQAAAAALAAAA
AAAAAAAAAAAKAF8BAAAAAAQAAAAAAAAAAAAAAAEADQYAAAAABAAAAAAAAAAAAAAAAQAzEgAAAAAE
AAAAAAAAAAAAAAABALUSAAAAAAQAAAAAAAAAAAAAAAEA/xQAAAAABAAAAAAAAAAAAAAAAQAgFQAA
AAAEAHAAAwAAAAAAAAAIBzcYAAAAAAsAAAAAAAAAAAAAAAoATRwAAAAAAAAAAAEAAAAVHQAACQAI
AAoAAgALAAIAhQDVA4cA1QOJAA4EmwBLBIcADgT1ANUDBQHiBQkBDQYNATIGEQHVAxMB1QN7AQcI
AAAAPE1vZHVsZT4AU1RfYjYzNmY2NzAxZTUxNDQ0OWIzZjBjYjJjMDdmYjhmNTEuZGxsAFNjcmlw
dEhlbHBlcgBEV1JlZmVyZW5jZUhlbHBlcgBQcm9jZXNzSW5mb3JtYXRpb24AU3FsQnVsa0NvcHlF
eHRlbnNpb24ATWFwcGluZwBSZXNvdXJjZXMAU1RfNWViOWNhMWM3YWU0NDM5YzgzM2JmN2M3ZDJh
NDk3MjEuUHJvcGVydGllcwBTZXR0aW5ncwBTY3JpcHRNYWluAFNUXzVlYjljYTFjN2FlNDQzOWM4
MzNiZjdjN2QyYTQ5NzIxAFNjcmlwdFJlc3VsdHMAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABTeXN0
ZW0uRGlhZ25vc3RpY3MAUHJvY2VzcwBTeXN0ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNl
dHRpbmdzQmFzZQBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UARW51
bQBnZXRfUm93c0luc2VydGVkAHNldF9Sb3dzSW5zZXJ0ZWQAZ2V0X1Jvd3NEZWxldGVkAHNldF9S
b3dzRGVsZXRlZABnZXRfUm93c1VwZGF0ZWQAc2V0X1Jvd3NVcGRhdGVkAGdldF9Sb3dzU3RhZ2Vk
AHNldF9Sb3dzU3RhZ2VkAGdldF9TdWl0ZUZvbGRlckxvY2F0aW9uAHNldF9TdWl0ZUZvbGRlckxv
Y2F0aW9uAGdldF91blByb2Nlc3NlZEZpbGVGdWxsTmFtZQBzZXRfdW5Qcm9jZXNzZWRGaWxlRnVs
bE5hbWUAZ2V0X0luUHJvY2Vzc2VkRmlsZUZ1bGxOYW1lAHNldF9JblByb2Nlc3NlZEZpbGVGdWxs
TmFtZQBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBEaWN0aW9uYXJ5YDIAUHJvY2Vzc0NvbnRy
b2wAU1NJU1BhY2thZ2VzQ291bnQATGlzdGAxAE9SQUNMRQBTUUwATWFpblN0YWdpbmdNYW5hZ2Vy
UHJvY2Vzc0ZpbGVzAE1haW5TdGFnaW5nRXhlY3V0aW9uU3FsQnVsa1VwbG9hZABNYWluU3RhZ2lu
Z0V4ZWN1dGlvbkZpbGVCdWxrVXBsb2FkAEdldFBhY2thZ2VOYW1lAEdldFN1aXRlRm9sZGVyTG9j
YXRpb24AQ3JlYXRlU3RhZ2luZ0V4ZWN1dGlvbkNvbW1hbmQAU3RhcnRNYW5hZ2VyUGFja2FnZVN0
YWdpbmcAR2V0VGltZVN0YW1wAEdldEZpbGVzAEdldFN0YWdpbmdDb250cm9sSURzAFNvcnRlZExp
c3RgMgBEYXRlVGltZQBHZXRPcmRlckZpbGVzAFJvd0NvdW50U3RhZ2VkAE1lcmdlRGF0YQBHZXRT
dGFnaW5nSm9iSUQAQ2xlYW5VcEZpbGVzAFBlcmZvcm1TUUxCdWxrQ29weQBQZXJmb3JtRmlsZUJ1
bGtDb3B5AFByb2Nlc3NGaWxlAENyZWF0ZVNoZW1hSW5pRmlsZQBtb3ZlRmlsZVRvSW5Qcm9jZXNz
AGdldEZhaWxlZERpcgBNb3ZlVG9VblByb2Nlc3NlZFRvRmFpbGVkRGlyAEdldE5leHRSdW5EYXRl
VGltZVN0YWdpbmdDb250cm9sSUQAQ2hlY2tGaWxlSGVhZGVyc0FuZENvbHVtbnMAUmVhZEZpbGVI
ZWFkZXIAU3RhZ2luZ0xvZ01lc3NhZ2UATWFpbkV4dHJhY3RNYW5hZ2VyQnVsa1VwbG9hZABFeHRy
YWN0TG9nTWVzc2FnZQBTdGFydE1hbmFnZXJQYWNrYWdlRXh0cmFjdABTdGFydE1hbmFnZXJQYWNr
YWdlRGVsaXZlcnkAU3RhcnRNYW5hZ2VyUGFja2FnZVN1bW1hcnkAU3BsaXRNYXBwaW5ncwBjaGVj
a0Nvbm5lY3Rpb24AU3lzdGVtLkRhdGEAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AFNxbEJ1bGtDb3B5
AEJ1bGtDb3B5TWFwcGluZwBHZXREdGV4ZWNMb2NhdGlvbgBTdGFydFNTSVNQYWNrYWdlAEV2ZW50
QXJncwBwX0V4aXRlZABHZW5lcmF0ZUxpc3RUb1N0cmluZwBEYXRhU2V0AEdldERhdGEAVHJ1bmNh
dGVUYWJsZQAuY3RvcgA8Um93c0luc2VydGVkPmtfX0JhY2tpbmdGaWVsZAA8Um93c0RlbGV0ZWQ+
a19fQmFja2luZ0ZpZWxkADxSb3dzVXBkYXRlZD5rX19CYWNraW5nRmllbGQAPFJvd3NTdGFnZWQ+
a19fQmFja2luZ0ZpZWxkADxTdWl0ZUZvbGRlckxvY2F0aW9uPmtfX0JhY2tpbmdGaWVsZAA8dW5Q
cm9jZXNzZWRGaWxlRnVsbE5hbWU+a19fQmFja2luZ0ZpZWxkADxJblByb2Nlc3NlZEZpbGVGdWxs
TmFtZT5rX19CYWNraW5nRmllbGQAUm93c0luc2VydGVkAFJvd3NEZWxldGVkAFJvd3NVcGRhdGVk
AFJvd3NTdGFnZWQAU3VpdGVGb2xkZXJMb2NhdGlvbgB1blByb2Nlc3NlZEZpbGVGdWxsTmFtZQBJ
blByb2Nlc3NlZEZpbGVGdWxsTmFtZQBnZXRfQ29udHJvbElEAHNldF9Db250cm9sSUQAZ2V0X091
dHB1dE1lc3NhZ2UAc2V0X091dHB1dE1lc3NhZ2UAPENvbnRyb2xJRD5rX19CYWNraW5nRmllbGQA
PE91dHB1dE1lc3NhZ2U+a19fQmFja2luZ0ZpZWxkAENvbnRyb2xJRABPdXRwdXRNZXNzYWdlAFJv
d3NDb3BpZWRDb3VudABnZXRfU291cmNlTWFwAHNldF9Tb3VyY2VNYXAAZ2V0X09sZWRTb3VyY2VN
YXAAZ2V0X0Rlc3RpbmF0aW9uTWFwAHNldF9EZXN0aW5hdGlvbk1hcAA8U291cmNlTWFwPmtfX0Jh
Y2tpbmdGaWVsZAA8RGVzdGluYXRpb25NYXA+a19fQmFja2luZ0ZpZWxkAFNvdXJjZU1hcABPbGVk
U291cmNlTWFwAERlc3RpbmF0aW9uTWFwAFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2Vy
AHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3Vs
dHVyZQBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUA
ZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQATWFpbgB2YWx1ZV9fAFN1Y2Nlc3MA
RmFpbHVyZQB2YWx1ZQB2YWx1ZXMAZmlsZUZ1bGxOYW1lAGZpbGVOYW1lU2VwYXJhdG9yAEZvbGRl
ckJhc2VMb2NhdGlvbgBFbnZpcm9ubWVudABTdWl0ZQBTdGFnaW5nRXhlY3V0aW9uTG9jYXRpb24A
U2VydmVyAFN0YWdpbmdDb250cm9sSUQATWFuYWdlckdVSUQAU3RhcnRUaW1lAENvbm5TdHJfRVRM
UmVmZXJlbmNlAHNlcnZlcgBwYWNrYWdlTG9jYXRpb25sb2NhdGlvbgBzdWl0ZUZvbGRlckxvY2F0
aW9uAGZpbGVGdWxsTmFtZXMAc3VpdGUAUGFja2FnZU5hbWUAZmlsZVRpbWVTdGFtcEZvcm1hdABD
b25uU3RyX1N0YWdpbmcAU3RhZ2luZ0V4dHJhY3RUYWJsZQBTdGFnaW5nSm9iSUQATWVyZ2VRdWVy
eQBDb25uU3RyX1NvdXJjZQBTb3VyY2VDbWRUZXh0AENvbm5TdHJfRGVzdGluYXRpb24AQnVsa1Vw
bG9hZExvYWRTaXplAFN0YWdpbmdUYWJsZQBTb3VyY2VRdWVyeU1hcHBpbmcAU291cmNlVHlwZU5h
bWUARmlsZUZ1bGxOYW1lAERlc3RpbmF0aW9uVGFibGUATWFwcGluZ3MASGFzSGVhZGVyAERlbGlt
aXRlckNoYXIARXJyb3JNZXNzYWdlAGZpbGVuYW1lAERlbGltZXRlcgBkZWxpbWl0ZXIAU3VjY2Vz
c0ZsYWcAQ29tcGxldGVkRmxhZwBNZXNzYWdlU291cmNlAE1lc3NhZ2UAQWN0dWFsRmlsZU5hbWUA
RXh0cmFjdFN0YXJ0VGltZQBFeHRyYWN0RW5kVGltZQBFeHRyYWN0Sm9iSUQAUm93c0V4dHJhY3Rl
ZABFeHRyYWN0UGFja2FnZVBhdGhBbmROYW1lAE5leHRFeHRyYWN0U3RhcnRUaW1lAEV4dHJhY3RD
b250cm9sSUQARGVzdGluYXRvblRhYmxlAENvbm5TdHIAYnVsa0NvcHkAUnVuQXMzMkJpdABjb21t
YW5kAHNlbmRlcgBlAGxpc3QAY29ubm5lY3Rpb25TdHJpbmcAc3FsUXVlcnkAVGFibGUAYlRydW5j
YXRlVGFibGUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1
dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2Ny
aXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNv
bXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJp
YnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2
aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5
QXR0cmlidXRlAEV4dGVuc2lvbkF0dHJpYnV0ZQBTVF9iNjM2ZjY3MDFlNTE0NDQ5YjNmMGNiMmMw
N2ZiOGY1MQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBnZXRfSXRlbQBUb1N0cmluZwBTdHJp
bmcAQ29uY2F0AERhdGFUYWJsZUNvbGxlY3Rpb24AZ2V0X1RhYmxlcwBEYXRhVGFibGUARGF0YVJv
d0NvbGxlY3Rpb24AZ2V0X1Jvd3MASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAU3lzdGVtLkNv
bGxlY3Rpb25zAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IAZ2V0X0N1cnJlbnQARGF0YVJvdwBT
eXN0ZW0uSU8AUGF0aABDb21iaW5lAGdldF9Db3VudABFbnVtZXJhdG9yAEludDMyAENvbnZlcnQA
VG9Cb29sZWFuAE1vdmVOZXh0AElEaXNwb3NhYmxlAERpc3Bvc2UAU3lzdGVtLlRocmVhZGluZwBU
aHJlYWQAU2xlZXAAVmFsdWVDb2xsZWN0aW9uAGdldF9WYWx1ZXMAZ2V0X0V4aXRDb2RlAFRvSW50
MzIAU3lzdGVtLkRhdGEuQ29tbW9uAERiQ29ubmVjdGlvblN0cmluZ0J1aWxkZXIAc2V0X0Nvbm5l
Y3Rpb25TdHJpbmcAUmVtb3ZlAGdldF9Db25uZWN0aW9uU3RyaW5nAENvbnRhaW5zAEFkZABUb0No
YXIASUVudW1lcmF0b3JgMQBLZXlWYWx1ZVBhaXJgMgBnZXRfVmFsdWUAR2V0RmlsZU5hbWUATGFz
dEluZGV4T2YAU3Vic3RyaW5nAGdldF9MZW5ndGgAR2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9u
ADxHZXRGaWxlcz5iX18wAGZpbGUARnVuY2AyAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9k
RGVsZWdhdGUxAFRvTG93ZXIARW5kc1dpdGgARGlyZWN0b3J5AEV4aXN0cwBTeXN0ZW0uQ29yZQBT
eXN0ZW0uTGlucQBFbnVtZXJhYmxlAElFbnVtZXJhYmxlYDEAV2hlcmUAVG9MaXN0ADxHZXRTdGFn
aW5nQ29udHJvbElEcz5iX18yAHIAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0
ZTMAU3lzdGVtLkRhdGEuRGF0YVNldEV4dGVuc2lvbnMARGF0YVJvd0V4dGVuc2lvbnMARmllbGQA
SXNOdWxsT3JFbXB0eQBEYXRhVGFibGVFeHRlbnNpb25zAEVudW1lcmFibGVSb3dDb2xsZWN0aW9u
YDEAQXNFbnVtZXJhYmxlAEVudW1lcmFibGVSb3dDb2xsZWN0aW9uRXh0ZW5zaW9ucwBTZWxlY3QA
b3BfRXF1YWxpdHkAZ2V0X0ludmFyaWFudEN1bHR1cmUASUZvcm1hdFByb3ZpZGVyAFBhcnNlRXhh
Y3QARXhjZXB0aW9uAEZpbGUARGVsZXRlAE1vdmUAR2V0RGlyZWN0b3J5TmFtZQBTcWxCdWxrQ29w
eU9wdGlvbnMAc2V0X0JhdGNoU2l6ZQBzZXRfQnVsa0NvcHlUaW1lb3V0AHNldF9EZXN0aW5hdGlv
blRhYmxlTmFtZQBGb3JtYXQAU3lzdGVtLkRhdGEuT2xlRGIAT2xlRGJDb25uZWN0aW9uAERiQ29u
bmVjdGlvbgBPcGVuAE9sZURiQ29tbWFuZABPbGVEYkRhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgBJ
RGF0YVJlYWRlcgBXcml0ZVRvU2VydmVyAENsb3NlAEdldEV4dGVuc2lvbgBTeXN0ZW0uVGV4dABT
dHJpbmdCdWlsZGVyAEFwcGVuZExpbmUAQ2hhcgBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBXcml0
ZUxpbmUAR3VpZABOZXdHdWlkAFN5c3RlbS5JTy5Db21wcmVzc2lvbi5GaWxlU3lzdGVtAFN5c3Rl
bS5JTy5Db21wcmVzc2lvbgBaaXBGaWxlAFppcEFyY2hpdmUAWmlwQXJjaGl2ZU1vZGUAU3lzdGVt
LkNvbGxlY3Rpb25zLk9iamVjdE1vZGVsAFJlYWRPbmx5Q29sbGVjdGlvbmAxAFppcEFyY2hpdmVF
bnRyeQBnZXRfRW50cmllcwBnZXRfRnVsbE5hbWUAU3BsaXQAQ291bnQARGlyZWN0b3J5SW5mbwBD
cmVhdGVEaXJlY3RvcnkAWmlwRmlsZUV4dGVuc2lvbnMARXh0cmFjdFRvRGlyZWN0b3J5AFBhZExl
ZnQAPEdldE5leHRSdW5EYXRlVGltZVN0YWdpbmdDb250cm9sSUQ+Yl9fNABDUyQ8PjlfX0NhY2hl
ZEFub255bW91c01ldGhvZERlbGVnYXRlNQA8PmNfX0Rpc3BsYXlDbGFzc2IAPENoZWNrRmlsZUhl
YWRlcnNBbmRDb2x1bW5zPmJfXzgAdABpADw+Y19fRGlzcGxheUNsYXNzZQBDUyQ8PjhfX2xvY2Fs
c2MAaGVhZGVyADxDaGVja0ZpbGVIZWFkZXJzQW5kQ29sdW1ucz5iX183AGYAPENoZWNrRmlsZUhl
YWRlcnNBbmRDb2x1bW5zPmJfXzYAcm93AENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVs
ZWdhdGU5AG9wX0luZXF1YWxpdHkARW1wdHkASUVudW1lcmFibGUAQ2FzdABGaXJzdE9yRGVmYXVs
dABGdW5jYDMAQW55AFN0cmVhbVJlYWRlcgBUZXh0UmVhZGVyAFJlYWRMaW5lAEFkZFJhbmdlAFJl
cGxhY2UAU3FsQ29ubmVjdGlvbgBTcWxDb21tYW5kAERiQ29tbWFuZABFeGVjdXRlTm9uUXVlcnkA
U3lzdGVtLkNvbXBvbmVudE1vZGVsAENvbXBvbmVudABOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbgBz
ZXRfQ29tbWFuZFRpbWVvdXQAU3FsRGF0YVJlYWRlcgBEYkRhdGFSZWFkZXIAT3JhY2xlLkRhdGFB
Y2Nlc3MAT3JhY2xlLkRhdGFBY2Nlc3MuQ2xpZW50AE9yYWNsZUNvbm5lY3Rpb24AT3JhY2xlQ29t
bWFuZABPcmFjbGVQYXJhbWV0ZXJDb2xsZWN0aW9uAGdldF9QYXJhbWV0ZXJzAE9yYWNsZVBhcmFt
ZXRlcgBPcmFjbGVEYlR5cGUARGJQYXJhbWV0ZXIAUGFyYW1ldGVyRGlyZWN0aW9uAHNldF9EaXJl
Y3Rpb24AT3JhY2xlRGF0YVJlYWRlcgBUcmltAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZwBTcWxC
dWxrQ29weUNvbHVtbk1hcHBpbmdDb2xsZWN0aW9uAGdldF9Db2x1bW5NYXBwaW5ncwBCb29sZWFu
AERhdGFSZWNlaXZlZEV2ZW50QXJncwA8U3RhcnRTU0lTUGFja2FnZT5iX18xMgBEYXRhUmVjZWl2
ZWRFdmVudEhhbmRsZXIAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTEzAGdl
dF9EYXRhAGdldF9OZXdMaW5lAHNldF9FbmFibGVSYWlzaW5nRXZlbnRzAFByb2Nlc3NTdGFydElu
Zm8AZ2V0X1N0YXJ0SW5mbwBzZXRfVXNlU2hlbGxFeGVjdXRlAHNldF9SZWRpcmVjdFN0YW5kYXJk
T3V0cHV0AHNldF9SZWRpcmVjdFN0YW5kYXJkRXJyb3IARXZlbnRIYW5kbGVyAGFkZF9FeGl0ZWQA
YWRkX091dHB1dERhdGFSZWNlaXZlZABzZXRfRmlsZU5hbWUAc2V0X0FyZ3VtZW50cwBzZXRfQ3Jl
YXRlTm9XaW5kb3cAU3RhcnQAQmVnaW5PdXRwdXRSZWFkTGluZQA8R2VuZXJhdGVMaXN0VG9TdHJp
bmc+Yl9fMTQAY3VycmVudABpdGVtAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdh
dGUxNQBBZ2dyZWdhdGUAU3FsRGF0YUFkYXB0ZXIARGF0YUFkYXB0ZXIARmlsbABUeXBlAFJ1bnRp
bWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEZpZWxkSW5mbwBCaW5kaW5nRmxhZ3MAR2V0
RmllbGQAR2V0VmFsdWUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBBc3NlbWJseQBnZXRf
QXNzZW1ibHkARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAC5j
Y3RvcgBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAU2NyaXB0T2JqZWN0TW9kZWwA
Z2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMATWljcm9zb2Z0LlNxbFNlcnZl
ci5EdHMuUnVudGltZQBWYXJpYWJsZURpc3BlbnNlcgBnZXRfVmFyaWFibGVEaXNwZW5zZXIAVmFy
aWFibGVzAExvY2tPbmVGb3JSZWFkAFZhcmlhYmxlAFVubG9jawBzZXRfVGFza1Jlc3VsdABFdmVu
dHNPYmplY3RXcmFwcGVyAGdldF9FdmVudHMARmlyZUVycm9yAFNUXzVlYjljYTFjN2FlNDQzOWM4
MzNiZjdjN2QyYTQ5NzIxLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAC1MAdQBpAHQA
ZQAAMVMAdABhAGcAaQBuAGcARQB4AGUAYwB1AHQAaQBvAG4ATABvAGMAYQB0AGkAbwBuAAANUwBl
AHIAdgBlAHIAACNGAGkAbABlAE4AYQBtAGUAUwBlAHAAYQByAGEAdABvAHIAAClDAG8AbgBuAFMA
dAByAF8ARQBUAEwAUgBlAGYAZQByAGUAbgBjAGUAACtFAHgAZQBjAHUAdABpAG8AbgBJAG4AcwB0
AGEAbgBjAGUARwBVAEkARAAAE1MAdABhAHIAdABUAGkAbQBlAABxWwBkAGIAbwBdAC4AWwBzAHAA
RwBlAHQAUwB0AGEAZwBpAG4AZwBNAGEAbgBhAGcAZQByAEYAbwBsAGQAZQByAEwAbwBjAGEAdABp
AG8AbgBdACAAQABTAHUAaQB0AGUATgBhAG0AZQAgAD0AIAAnAAEDJwABFUIAYQBzAGUARgBvAGwA
ZABlAHIAABdFAG4AdgBpAHIAbwBuAG0AZQBuAHQAABNTAHUAaQB0AGUATgBhAG0AZQAADUYAbwBs
AGQAZQByAAB/UwBFAEwARQBDAFQAIABSAHUAbgBBAHMAMwAyAEIAaQB0ACAARgBSAE8ATQAgAFMA
dABhAGcAaQBuAGcAQwBvAG4AdAByAG8AbAAgAFcASABFAFIARQAgAFMAdABhAGcAaQBuAGcAQwBv
AG4AdAByAG8AbABJAEQAIAA9ACAAABVSAHUAbgBBAHMAMwAyAEIAaQB0AABlTABvAGcAIABNAGEA
bgBhAGcAZQByACAAUwB0AGEAcgB0AGkAbgBnACAAUwB0AGEAZwBpAG4AZwBFAHgAZQBjAHUAdABp
AG8AbgAgAEYAaQBsAGUAIABFAHgAdAByAGEAYwB0AAADIAAAAQBnTABvAGcAIABNAGEAbgBhAGcA
ZQByACAAUwB0AGEAcgB0AGkAbgBnACAAUwB0AGEAZwBpAG4AZwBFAHgAZQBjAHUAdABpAG8AbgAg
AEQAYQB0AGEAIABFAHgAdAByAGEAYwB0AHMAAGNMAG8AZwAgAE0AYQBuAGEAZwBlAHIAIABFAHIA
cgBvAHIAIABMAG8AZwAgAGYAbwByACAAUwB0AGEAZwBpAG4AZwBFAHgAZQBjAHUAdABpAG8AbgBE
AHkAbgBhAG0AaQBjAAApTABvAGcAIABNAGEAbgBhAGcAZQByACAAQwBvAG0AcABsAGUAdABlAAAf
QwBvAG4AbgBTAHQAcgBfAFMAdABhAGcAaQBuAGcAAB1DAG8AbgBuAFMAdAByAF8AUwBvAHUAcgBj
AGUAABlTAHQAYQBnAGkAbgBnAEoAbwBiAEkARAAAG1MAbwB1AHIAYwBlAEMAbQBkAFQAZQB4AHQA
ACFFAHgAdAByAGEAYwB0AFMAdABhAHIAdABUAGkAbQBlAAAdRQB4AHQAcgBhAGMAdABFAG4AZABU
AGkAbQBlAAAhUwB0AGEAZwBpAG4AZwBDAG8AbgB0AHIAbwBsAEkARAAAF00AYQBuAGEAZwBlAHIA
RwBVAEkARAAAJUIAdQBsAGsAVQBwAGwAbwBhAGQATABvAGEAZABTAGkAegBlAAAZUwB0AGEAZwBp
AG4AZwBUAGEAYgBsAGUAACVTAG8AdQByAGMAZQBRAHUAZQByAHkATQBhAHAAcABpAG4AZwAAKVQA
cgB1AG4AYwBhAHQAZQBTAHQAYQBnAGkAbgBnAFQAYQBiAGwAZQAAHVMAbwB1AHIAYwBlAFQAeQBw
AGUATgBhAG0AZQAAC08ATABFAEQAQgAAEVAAcgBvAHYAaQBkAGUAcgAAJTsAQwBvAG4AbgBlAGMA
dAAgAFQAaQBtAGUAbwB1AHQAPQAwAABnTABvAGcAIABTAHQAYQBnAGkAbgBnAEUAeABlAGMAdQB0
AGkAbwBuACAAQgB1AGwAawBTAFEATAAgAGUAdgBhAGwAdQBhAHQAZQBkACAAUwBvAHUAcgBjAGUA
IABRAHUAZQByAHkAABVyAG8AdwBzAEMAbwBwAGkAZQBkAAAlUwB0AGEAZwBpAG4AZwBQAGEAYwBr
AGEAZwBlAE4AYQBtAGUAABtEAGUAbABpAG0AaQB0AGUAcgBDAGgAYQByAAAlRgBvAGwAZABlAHIA
QgBhAHMAZQBMAG8AYwBhAHQAaQBvAG4AABVNAGUAcgBnAGUAUQB1AGUAcgB5AAATSABhAHMASABl
AGEAZABlAHIAACdGAGkAbABlAFQAaQBtAGUAUwB0AGEAbQBwAEYAbwByAG0AYQB0AAAXVQBuAHAA
cgBvAGMAZQBzAHMAZQBkAABXTABvAGcAIABTAHQAYQBnAGkAbgBnAEUAeABlAGMAdQB0AGkAbwBu
ACAAUwB0AGEAcgB0AGkAbgBnACAAZgBpAGwAZQAgAHAAcgBvAGMAZQBzAHMALgAAX0wAbwBnACAA
UwB0AGEAZwBpAG4AZwBFAHgAZQBjAHUAdABpAG8AbgAgAEMAbwBtAHAAbABlAHQAZQBkACAAZgBp
AGwAZQBzACAAcAByAG8AYwBlAHMAcwBlAGQALgAAXUwAbwBnACAAUwB0AGEAZwBpAG4AZwBFAHgA
ZQBjAHUAdABpAG8AbgAgAEMAbwBtAHAAbABlAHQAZQBkACAAbgBvACAAZgBpAGwAZQBzACAAZgBv
AHUAbgBkAC4AAA0vAFMAUQBMACAAIgAAFyIAIAAvAFMARQBSAFYARQBSACAAIgAAgLsiACAALwBN
AEEAWABDAE8ATgBDAFUAUgBSAEUATgBUACAAIgAgAC0AMQAgACIAIAAvAEMASABFAEMASwBQAE8A
SQBOAFQASQBOAEcAIABPAEYARgAgAC8AUwBFAFQAIAAiAFwAUABhAGMAawBhAGcAZQAuAFYAYQBy
AGkAYQBiAGwAZQBzAFsAUwB0AGEAZwBpAG4AZwBDAG8AbgB0AHIAbwBsAEkARABdAC4AVgBhAGwA
dQBlACIAOwABXyAALwBTAEUAVAAgACIAXABQAGEAYwBrAGEAZwBlAC4AVgBhAHIAaQBhAGIAbABl
AHMAWwBNAGEAbgBhAGcAZQByAEcAVQBJAEQAXQAuAFYAYQBsAHUAZQAiADsAIgAAaSIAIAAvAFMA
RQBUACAAIgBcAFAAYQBjAGsAYQBnAGUALgBWAGEAcgBpAGEAYgBsAGUAcwBbAFUAcwBlAHIAOgA6
AFMAdABhAHIAdABUAGkAbQBlAF0ALgBWAGEAbAB1AGUAIgA7ACIAAHciACAALwBTAEUAVAAgACIA
XABQAGEAYwBrAGEAZwBlAC4AVgBhAHIAaQBhAGIAbABlAHMAWwBDAG8AbgBuAFMAdAByAF8ARQBU
AEwAUgBlAGYAZQByAGUAbgBjAGUAXQAuAFYAYQBsAHUAZQAiADsAIgBcACIAAAdcACIAIgAAgJ0i
ACAALwBDAEgARQBDAEsAUABPAEkATgBUAEkATgBHACAATwBGAEYAIAAvAFMARQBUACAAIgBcAFAA
YQBjAGsAYQBnAGUALgBWAGEAcgBpAGEAYgBsAGUAcwBbAEMAbwBuAG4AUwB0AHIAXwBFAFQATABS
AGUAZgBlAHIAZQBuAGMAZQBdAC4AVgBhAGwAdQBlACIAOwAiAFwAIgAAIVwAIgAiACAALwBSAEUA
UABPAFIAVABJAE4ARwAgAEUAAAdjAHMAdgAAB3oAaQBwAAAHdAB4AHQAAAcqAC4AKgAABSwAIAAA
BScAJwABXUUAWABFAEMAIABkAGIAbwAuAHMAcABHAGUAdABTAHQAYQBnAGkAbgBnAFAAYQBjAGsA
YQBnAGUAcwBGAGkAbABlACAAQABTAHUAaQB0AGUATgBhAG0AZQA9ACcAAR0nACwAIABAAFAAYQBj
AGsAYQBnAGUAcwA9ACcAAQUnACAAAUtTAEUATABFAEMAVAAgAEMATwBVAE4AVAAoACoAKQAgAEEA
UwAgACcAUgBvAHcAcwBTAHQAYQBnAGUAZAAnACAARgBSAE8ATQAgAAEtIABXAEgARQBSAEUAIABT
AHQAYQBnAGkAbgBnAEoAbwBiAEkARAAgAD0AIAAAFVIAbwB3AHMAUwB0AGEAZwBlAGQAAFdSAG8A
dwBDAG8AdQBuAHQAUwB0AGEAZwBlAGQAIAAtACAARgBhAGkAbABlAGQAIAB0AG8AIAByAGUAdAB1
AHIAbgAgAHIAbwB3ACAAYwBvAHUAbgB0AAELRQBYAEUAQwAgAAAjIABAAFMAdABhAGcAaQBuAGcA
SgBvAGIASQBEACAAPQAgAAAZUgBvAHcAcwBJAG4AcwBlAHIAdABlAGQAABdSAG8AdwBzAEQAZQBs
AGUAdABlAGQAABdSAG8AdwBzAFUAcABkAGEAdABlAGQAAHFNAGUAcgBnAGUARABhAHQAYQAgAHMA
dABvAHIAZQBkACAAcAByAG8AYwAgAGYAYQBpAGwAZQBkACAAdABvACAAcgBlAHQAdQByAG4AIABy
AG8AdwAgAGMAbwB1AG4AdAAgAGQAZQB0AGEAaQBsAHMAAFVFAFgARQBDACAAZABiAG8ALgBzAHAA
RwBlAHQASgBvAGIASQBEACAAQABUAHkAcABlACAAPQAgACcAUwB0AGEAZwBpAG4AZwBKAG8AYgBJ
AEQAJwABC0oAbwBiAEkARAAAX0cAZQB0AFMAdABhAGcAaQBuAGcASgBvAGIASQBEACAAZgBhAGkA
bABlAGQAIAB0AG8AIAByAGUAdAB1AHIAbgAgAGEAIABTAHQAYQBnAGkAbgBnAEoAbwBiAEkARAAA
gMVQAHIAbwB2AGkAZABlAHIAPQBNAGkAYwByAG8AcwBvAGYAdAAuAEoAZQB0AC4ATwBsAGUARABi
AC4ANAAuADAAOwAgAEQAYQB0AGEAIABTAG8AdQByAGMAZQA9AHsAMAB9ADsARQB4AHQAZQBuAGQA
ZQBkACAAUAByAG8AcABlAHIAdABpAGUAcwA9ACIAVABlAHgAdAA7AEgARABSAD0AWQBFAFMAOwBG
AE0AVAA9AEQAZQBsAGkAbQBpAHQAZQBkACIAAA9TAEUATABFAEMAVAAgAAAzIABBAFMAIABbAFMA
dABhAGcAaQBuAGcASgBvAGIASQBEAF0AIABGAFIATwBNACAAWwAAA10AABNQAHIAbwBjAGUAcwBz
AGUAZAAACS4AegBpAHAAAANbAAAlQwBvAGwATgBhAG0AZQBIAGUAYQBkAGUAcgA9AFQAcgB1AGUA
ACdDAG8AbABOAGEAbQBlAEgAZQBhAGQAZQByAD0ARgBhAGwAcwBlAAAnRgBvAHIAbQBhAHQAPQBD
AFMAVgBEAGUAbABpAG0AaQB0AGUAZAAAJ0YAbwByAG0AYQB0AD0AVABhAGIARABlAGwAaQBtAGkA
dABlAGQAACNGAG8AcgBtAGEAdAA9AEQAZQBsAGkAbQBpAHQAZQBkACgAAAMpAAAHYwBvAGwAAAM9
AAALIABUAGUAeAB0AAAVUwBjAGgAZQBtAGEALgBpAG4AaQAAE0kAbgBQAHIAbwBjAGUAcwBzAABD
WgBpAHAAIABmAGkAbABlACAAaABhAHMAIABtAG8AcgBlACAAdABoAGEAbgAgAG8AbgBlACAAZgBp
AGwAZQA6ACAAAHlmAGkAbABlACAAaABhAHMAIAB0AG8AIABtAGEAbgB5ACAAZgB1AGwAbABzAHQA
bwBwAHMAIABpAG4AIAB0AGgAZQAgAG4AYQBtAGUAIABlAHgAcABlAGMAdABlAGQAIABmAG8AcgBt
AGEAdAAgACoALgAqADoAIAAAA18AAD9VAG4AegBpAHAAcABlAGQAIABmAGkAbABlACAAYwBhAG4A
bgBvAHQAIABiAGUAIABmAG8AdQBuAGQAOgAgAAANRgBhAGkAbABlAGQAAENbAGQAYgBvAF0ALgBb
AHMAcABHAGUAdABTAHQAYQBnAGkAbgBnAFAAYQBjAGsAYQBnAGUAcwBTAHEAbABdACAAJwABgLlT
AEUATABFAEMAVAAgAGMALgBDAE8ATABVAE0ATgBfAE4AQQBNAEUAIABBAFMAIABjAG8AbAB1AG0A
bgBfAG4AYQBtAGUAIABGAFIATwBNACAASQBOAEYATwBSAE0AQQBUAEkATwBOAF8AUwBDAEgARQBN
AEEALgBDAE8ATABVAE0ATgBTACAAYwAgAFcASABFAFIARQAgAGMALgBUAEEAQgBMAEUAXwBOAEEA
TQBFACAAPQAgACcAAS0gAEEATgBEACAAIABjAC4AVABBAEIATABFAF8AUwBDAEgARQBNAEEAPQAn
AAFtRgBpAGwAZQAgAGgAZQBhAGQAZQByACAAZgBpAGUAbABkACAAaQBzACAAbgBvAHQAIABlAHgA
aQBzAHQAZQBkAC4AIABGAGkAbABlACAAaABlAGEAZABlAHIAIABmAGkAZQBsAGQAcwA6ACAAAFUg
AGQAbwBlAHMAbgAnAHQAIABlAHgAaQBzAHQAZQBkACAAaQBuACAAcwBvAHUAcgBjAGUAIABxAHUA
ZQByAHkAIABtAGEAcABwAGkAbgBnADoAIAABGy4AIABGAGkAbABlACAAbgBhAG0AZQA6ACAAACMs
ACAAUwB0AGEAZwBpAG4AZwAgAHQAYQBiAGwAZQA6ACAAAE9TAG8AdQByAGMAZQBxAHUAZQByAHkA
bQBhAHAAaQBuAGcAIABpAHMAIAB1AG4AdgBhAGwAaQBkAC4AIABNAGEAcABwAGkAbgBnADoAIAAA
NSAAaQBuACAAcwBvAHUAcgBjAGUAIABxAHUAZQByAHkAIABtAGEAcABwAGkAbgBnADoAIAAAOSAA
ZABvAGUAcwAgAG4AbwB0ACAAZQB4AGkAcwB0AGUAZAAgAGkAbgAgAHQAYQBiAGwAZQA6ACAAAGFX
AHIAbwBuAGcAIABoAGUAYQBkAGUAcgAgAG8AcgBkAGUAcgAuACAARgBpAGwAZQAgAGgAZQBhAGQA
ZQByACAAZgBpAGUAbABkAHMAIABpAG4AIABmAGkAbABlADoAIAAAGSAAaABhAHMAIABvAHIAZABl
AHIAOgAgAABTIABpAHMAIABuAG8AdAAgAG0AYQB0AGMAaABlAGQAIAB0AG8AIABzAG8AdQByAGMA
ZQAgAHEAdQBlAHIAeQAgAG0AYQBwAHAAaQBuAGcAOgAgAABdWwBzAHAASQBuAHMAZQByAHQAUwB0
AGEAZwBpAG4AZwBFAHgAZQBjAHUAdABpAG8AbgBMAG8AZwBdACAAQABTAHQAYQBnAGkAbgBnAEoA
bwBiAEkARAAgAD0AIAAAJSwAIABAAE0AYQBuAGEAZwBlAHIARwBVAEkARAAgAD0AIAAnAAElJwAs
ACAAQABTAHUAYwBjAGUAcwBzAEYAbABhAGcAIAA9ACAAAScsACAAQABDAG8AbQBwAGwAZQB0AGUA
ZABGAGwAYQBnACAAPQAgAAApLAAgAEAATQBlAHMAcwBhAGcAZQBTAG8AdQByAGMAZQAgAD0AIAAn
AAEfJwAsACAAQABNAGUAcwBzAGEAZwBlACAAPQAgACcAASMnACwAIABAAFIAbwB3AHMAUwB0AGEA
ZwBlAGQAIAA9ACAAASUsACAAQABSAG8AdwBzAEkAbgBzAGUAcgB0AGUAZAAgAD0AIAAAIywAIABA
AFIAbwB3AHMARABlAGwAZQB0AGUAZAAgAD0AIAAAIywAIABAAFIAbwB3AHMAVQBwAGQAYQB0AGUA
ZAAgAD0AIAAAcSwAIABAAFMAdABhAGcAaQBuAGcAUABhAGMAawBhAGcAZQBQAGEAdABoAEEAbgBk
AE4AYQBtAGUAIAA9ACAATgBVAEwATAAsACAAQABBAGMAdAB1AGEAbABGAGkAbABlAE4AYQBtAGUA
IAA9ACAAJwABIycALAAgAEAAUwB0AGEAcgB0AFQAaQBtAGUAIAA9ACAAJwABBycALAAgAAE1QABF
AHgAdAByAGEAYwB0AFMAdABhAHIAdABUAGkAbQBlACAAPQAgAE4AVQBMAEwALAAgAAArQABFAHgA
dAByAGEAYwB0AFMAdABhAHIAdABUAGkAbQBlACAAPQAgACcAATFAAEUAeAB0AHIAYQBjAHQARQBu
AGQAVABpAG0AZQAgAD0AIABOAFUATABMACwAIAAAJ0AARQB4AHQAcgBhAGMAdABFAG4AZABUAGkA
bQBlACAAPQAgACcAASlAAFMAdABhAGcAaQBuAGcAQwBvAG4AdAByAG8AbABJAEQAIAA9ACAAACdD
AG8AbgBuAFMAdAByAF8ARABlAHMAdABpAG4AYQB0AGkAbwBuAAArYgBUAHIAdQBuAGMAYQB0AGUA
RQB4AHQAcgBhAGMAdABUAGEAYgBsAGUAABlFAHgAdAByAGEAYwB0AFQAYQBiAGwAZQAAGUUAeAB0
AHIAYQBjAHQASgBvAGIASQBEAAAhRQB4AHQAcgBhAGMAdABDAG8AbgB0AHIAbwBsAEkARAAAP0wA
bwBnACAARQB4AHQAcgBhAGMAdABFAHgAZQBjAHUAdABpAG8AbgAuAEIAdQBsAGsAVQBwAGwAbwBh
AGQAAAlOAFUATABMAABdWwBzAHAASQBuAHMAZQByAHQARQB4AHQAcgBhAGMAdABFAHgAZQBjAHUA
dABpAG8AbgBMAG8AZwBdACAAQABFAHgAdAByAGEAYwB0AEoAbwBiAEkARAAgAD0AIAAAHywAIABA
AFMAdABhAHIAdABUAGkAbQBlACAAPQAgAAAjLABAAE0AYQBuAGEAZwBlAHIARwBVAEkARAAgAD0A
IAAnAAEpJwAsACAAQABSAG8AdwBzAEUAeAB0AHIAYQBjAHQAZQBkACAAPQAgAAEtLAAgAEAARQB4
AHQAcgBhAGMAdABTAHQAYQByAHQAVABpAG0AZQAgAD0AIAAAKSwAIABAAEUAeAB0AHIAYQBjAHQA
RQBuAGQAVABpAG0AZQAgAD0AIAAANSwAIABAAE4AZQB4AHQARQB4AHQAcgBhAGMAdABTAHQAYQBy
AHQAVABpAG0AZQAgAD0AIAAAQSwAIABAAEUAeAB0AHIAYQBjAHQAUABhAGMAawBhAGcAZQBQAGEA
dABoAEEAbgBkAE4AYQBtAGUAIAA9ACAAJwABLycALAAgAEAARQB4AHQAcgBhAGMAdABDAG8AbgB0
AHIAbwBsAEkARAAgAD0AIAABB2MAdQByAAADOwAAf0IAdQBsAGsAIABjAG8AcAB5ACAAUwBvAHUA
cgBjAGUAUQB1AGUAcgB5AE0AYQBwAHAAaQBuAGcAIABoAGEAcwAgAGEAbgAgAGkAbgB2AGEAbABp
AGQAIABwAGEAaQByACAAKABlAG0AcAB0AHkAIABzAHQAcgBpAG4AZwApAACAk0IAdQBsAGsAIABj
AG8AcAB5ACAAUwBvAHUAcgBjAGUAUQB1AGUAcgB5AE0AYQBwAHAAaQBuAGcAIABoAGEAcwAgAGEA
bgAgAGkAbgB2AGEAbABpAGQAIABwAGEAaQByACAAKABjAG8AdQBuAHQAIABkAG8AZQBzACAAbgBv
AHQAIABtAGEAdABjAGgAKQA6ACAAAE1FAFgARQBDACAAcwBwAEcAZQB0AEQAdABlAHgAZQBjAEwA
bwBjAGEAdABpAG8AbgAgAEAAUgB1AG4AQQBzADMAMgBCAGkAdAA9ACcAAR1MAG8AYwBhAHQAaQBv
AG4ARAB0AGUAeABlAGMAAAMiAAADLAAAH1QAUgBVAE4AQwBBAFQARQAgAFQAQQBCAEwARQAgAAAZ
TwBMAEUARABCAF8ATwBSAEEAQwBMAEUAABdPAEQAQgBDAF8ATwBSAEEAQwBMAEUAAAlPAEQAQgBD
AAATTwBMAEUARABCAF8AUwBRAEwAABFPAEQAQgBDAF8AUwBRAEwAABdfAHIAbwB3AHMAQwBvAHAA
aQBlAGQAAAMuAABxUwBUAF8ANQBlAGIAOQBjAGEAMQBjADcAYQBlADQANAAzADkAYwA4ADMAMwBi
AGYANwBjADcAZAAyAGEANAA5ADcAMgAxAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8A
dQByAGMAZQBzAAAXVQBzAGUAcgA6ADoAUwB1AGkAdABlAAA9VQBzAGUAcgA6ADoAUwB0AGEAZwBp
AG4AZwBFAHgAZQBjAHUAdABpAG8AbgBMAG8AYwBhAHQAaQBvAG4AABlVAHMAZQByADoAOgBTAGUA
cgB2AGUAcgAAL1UAcwBlAHIAOgA6AEYAaQBsAGUATgBhAG0AZQBTAGUAcABhAHIAYQB0AG8AcgAA
NVUAcwBlAHIAOgA6AEMAbwBuAG4AUwB0AHIAXwBFAFQATABSAGUAZgBlAHIAZQBuAGMAZQAAO1MA
eQBzAHQAZQBtADoAOgBFAHgAZQBjAHUAdABpAG8AbgBJAG4AcwB0AGEAbgBjAGUARwBVAEkARAAA
H1UAcwBlAHIAOgA6AFMAdABhAHIAdABUAGkAbQBlAAAhUwB5AHMAdABlAG0AOgA6AFQAYQBzAGsA
TgBhAG0AZQAAAABo6Hgtr0lmSJCLPknPl/cVAAi3elxWGTTgiQiJhF3NgIDMkQMgAAgEIAEBCAMg
AA4EIAEBDggGFRIZAggSDAIGCAYGFRIdAQ4JIAEBFRIZAg4cBSACDg4OBiADDg4ODgkgBg4ODggO
Dg4GIAMBDg4OCCABFRIdAQ4ODyAEFRIdAQgOFRIdAQ4ODhEgBBUSIQIRJQ4VEh0BDg4ODgYgAwEO
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
BAYSgY0DAAAOBCABAQIFIAASgZUGIAEBEoGZBiABARKBjQcHAw4SDBIMCQYVEoE1Aw4ODggVEoE1
Aw4ODhkQAgMeARUSgMkBHgAeARUSgTUDHgEeAB4BBAoCDg4FIAEIEjENBwQSgLESMRKBQRKBnQgH
AhKBQRKBRQwHAhUSHQEOFRIdAQ4IAAESgaURgakJIAISga0OEYGxBCABHBwFBwESga0FIAASgbkH
IAIBDhKBuQQHARI1BiABARGBwQgBAAIAAAAAAAMAAAEFIAASgckFIAASgc0IIAIBDhASgdEGIAES
gdUcBSAAEoHZCCAFAggODg4IFAcGFRIZAg4cEoHREggSgOESgdEOSQEAGi5ORVRGcmFtZXdvcmss
VmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUo
AQAjU1RfNWViOWNhMWM3YWU0NDM5YzgzM2JmN2M3ZDJhNDk3MjEAAAUBAAAAABYBABFDb3B5cmln
aHQgQCAgMjAxNAAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQBMpwAA
AAAAAAAAAABupwAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYKcAAAAAAAAAAAAAAAAAAAAAAAAA
AF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWMAAALADAAAAAAAAAAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQB6e9oUAAABAHp72hQ/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsAQQAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAAMAAw
ADAANABiADAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8A
NQBlAGIAOQBjAGEAMQBjADcAYQBlADQANAAzADkAYwA4ADMAMwBiAGYANwBjADcAZAAyAGEANAA5
ADcAMgAxAAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADUAMwAzADgA
LgAzADEANgAxADAAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYgA2
ADMANgBmADYANwAwADEAZQA1ADEANAA0ADQAOQBiADMAZgAwAGMAYgAyAGMAMAA3AGYAYgA4AGYA
NQAxAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5
AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADQAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwA
ZQBuAGEAbQBlAAAAUwBUAF8AYgA2ADMANgBmADYANwAwADEAZQA1ADEANAA0ADQAOQBiADMAZgAw
AGMAYgAyAGMAMAA3AGYAYgA4AGYANQAxAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4A
YQBtAGUAAAAAAFMAVABfADUAZQBiADkAYwBhADEAYwA3AGEAZQA0ADQAMwA5AGMAOAAzADMAYgBm
ADcAYwA3AGQAMgBhADQAOQA3ADIAMQAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8A
bgAAADEALgAwAC4ANQAzADMAOAAuADMAMQA2ADEAMAAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5
ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANQAzADMAOAAuADMAMQA2ADEAMAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAwAAACANwAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                  <Breakpoint
                    Enabled="True"
                    File="ScriptMain.cs"
                    Line="136"
                    Column="11" />
                  <Breakpoint
                    Enabled="True"
                    File="ScriptMain.cs"
                    Line="106"
                    Column="11" />
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{D3F453C2-C843-40C1-9779-5A3DA847C461}"
              DTS:ObjectName="{E105FAC6-C8B7-4530-82D8-9A4FEAAA3B9C}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::Suite" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Get File Manager Variables"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{D9EDC7BB-83A6-4BB9-90F2-D576BEC99F1C}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get File Manager Variables"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9D79D394-39F6-4915-B8C8-57B87CCEBB03}"
              SQLTask:SqlStatementSource="EXEC [dbo].[spGetStagingManagerVariables]"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="Server"
                SQLTask:DtsVariableName="User::Server" />
              <SQLTask:ResultBinding
                SQLTask:ResultName="StagingExecutionLocation"
                SQLTask:DtsVariableName="User::StagingExecutionLocation" />
              <SQLTask:ResultBinding
                SQLTask:ResultName="ConnStr_msdb"
                SQLTask:DtsVariableName="User::ConnStr_msdb" />
              <SQLTask:ResultBinding
                SQLTask:ResultName="FileNameSeparator"
                SQLTask:DtsVariableName="User::FileNameSeparator" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Get StartTime"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{8631C489-7B8F-48A2-B345-F6C09937E7D5}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get StartTime"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9D79D394-39F6-4915-B8C8-57B87CCEBB03}"
              SQLTask:SqlStatementSource="SELECT CONVERT(CHAR(23), GETDATE(), 121)"
              SQLTask:ResultType="ResultSetType_SingleRow"
              SQLTask:TypeConversionMode="None" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::StartTime" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Get the Execution Suite List"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{AF122E42-4CFF-40FC-9BCA-12D492C3BA0B}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get the Execution Suite List"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">"EXEC [dbo].[spGetStagingSuites]"</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9D79D394-39F6-4915-B8C8-57B87CCEBB03}"
              SQLTask:SqlStatementSource="EXEC [dbo].[spGetStagingSuites]"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::SuiteList" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Log Information Manger Guid and version"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Log Information"
          DTS:DTSID="{612946EB-3F2B-4A50-B9AA-1AF7B8951E94}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Log Information Manger Guid and version"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">"EXEC [dbo].[spInsertStagingExecutionLog]
@StagingJobID =-1,
@StartTime = '" + @[User::StartTime]  + "',
@ManagerGUID ='" + @[System::ExecutionInstanceGUID] + "',
@SuccessFlag =1,
@CompletedFlag =1,
@MessageSource ='Log StagingManager Starting',
@Message = 'ExectionInstanceGUID:" + @[System::ExecutionInstanceGUID] + ",BuildVersion:" + (DT_STR, 20, 1252)@[System::VersionBuild]  + "',
@RowsStaged = 0, @RowsInserted = 0, @RowsDeleted = 0, @RowsUpdated = 0,
@StagingPackagePathAndName =NULL,
@ActualFileName =NULL,
@StagingControlID = -1
, @ExtractStartTime = NULL, @ExtractEndTime = NULL"</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9D79D394-39F6-4915-B8C8-57B87CCEBB03}"
              SQLTask:SqlStatementSource="EXEC [dbo].[spInsertStagingExecutionLog]&#xA;@StagingJobID =-1,&#xA;@StartTime = '2011-08-04 15:19:00',&#xA;@ManagerGUID ='{6F3945C6-583C-4C53-9E1F-72E90DBAD483}',&#xA;@SuccessFlag =1,&#xA;@CompletedFlag =1,&#xA;@MessageSource ='Log StagingManager Starting',&#xA;@Message = 'ExectionInstanceGUID:{6F3945C6-583C-4C53-9E1F-72E90DBAD483},BuildVersion:553',&#xA;@RowsStaged = 0, @RowsInserted = 0, @RowsDeleted = 0, @RowsUpdated = 0,&#xA;@StagingPackagePathAndName =NULL,&#xA;@ActualFileName =NULL,&#xA;@StagingControlID = -1&#xA;, @ExtractStartTime = NULL, @ExtractEndTime = NULL" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Log Outage Window Active"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Log Outage Window Active"
          DTS:DTSID="{5BD41F6C-C349-498B-850A-7B9D97FCBA39}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="3081"
          DTS:ObjectName="Log Outage Window Active"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">"EXEC [dbo].[spInsertStagingExecutionLog]
@StaingJobID =-1,
@StartTime =NULL,
@ManagerGUID ='" + @[System::ExecutionInstanceGUID] + "',
@SuccessFlag =1,
@CompletedFlag =1,
@MessageSource ='Log StagingManager',
@Message = 'Outage window active',
@RowsExtracted =0,
@StagingPackagePathAndName =NULL,
@ActualFileName =NULL,
@StagingControlID = -1, @ExtractStartTime = NULL, @ExtractEndTime = NULL"</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9D79D394-39F6-4915-B8C8-57B87CCEBB03}"
              SQLTask:SqlStatementSource="EXEC [dbo].[spInsertStagingExecutionLog]&#xA;@StaingJobID =-1,&#xA;@StartTime =NULL,&#xA;@ManagerGUID ='{6F3945C6-583C-4C53-9E1F-72E90DBAD483}',&#xA;@SuccessFlag =1,&#xA;@CompletedFlag =1,&#xA;@MessageSource ='Log StagingManager',&#xA;@Message = 'Outage window active',&#xA;@RowsExtracted =0,&#xA;@StagingPackagePathAndName =NULL,&#xA;@ActualFileName =NULL,&#xA;@StagingControlID = -1, @ExtractStartTime = NULL, @ExtractEndTime = NULL" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{11FECBB8-5308-4241-ACF3-E602026910A4}"
          DTS:From="Package\Sequence Container\Get File Manager Variables"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Sequence Container\Check Outage Window" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{0AC4C446-30DD-479D-ACB6-CB6C8906BA3A}"
          DTS:From="Package\Sequence Container\Get the Execution Suite List"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Sequence Container\Get StartTime" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:Description="IsOutageWindowActive == 0"
          DTS:DTSID="{751A569F-1CE4-4FEB-9AC9-9629F519AE7E}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::IsOutageWindowActive] == 0"
          DTS:From="Package\Sequence Container\Check Outage Window"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Sequence Container\Get the Execution Suite List" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:Description="IsOutageWindowActive == 1"
          DTS:DTSID="{7E2EC529-A36E-4C10-AD7F-67AF99990DD1}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::IsOutageWindowActive] == 1"
          DTS:From="Package\Sequence Container\Check Outage Window"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Sequence Container\Log Outage Window Active" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{9D342093-B2D3-4C04-9ABD-C820987404A4}"
          DTS:From="Package\Sequence Container\Get StartTime"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\Sequence Container\Log Information Manger Guid and version" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{E83D093F-3FE6-4BF3-A294-A99C75396E1F}"
          DTS:From="Package\Sequence Container\Log Information Manger Guid and version"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Sequence Container\Foreach Suite Container" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{F7BDE950-FBB3-4C44-8A9C-772FB55D2536}"
      DTS:From="Package\Sequence Container"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Insert Error Record into StagingExecutionLog"
      DTS:Value="1" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{1EAB4DC5-7C19-46C7-824B-130F39DF9101}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{E72B6C1B-0D57-450F-9387-CB3A655EBCD3}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\Append Error to Error Message"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{C1B7642D-2D7A-4671-8116-BFE9FFCC5F72}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Append Error to Error Message">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_668b537a155b46c491f704ec684bf0a6"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Settings.get_Default():ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Sett" +
    "ings")]

namespace ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_b96b9a606a9d4ae59db2a1c4a61786db
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            string ErrMessage = "";
            string ErrSource = "";
            string SystemErrMessage = "";
            string SystemSource = "";
            try
            {
                Variables vars = null;
                Dts.VariableDispenser.LockOneForRead("System::SourceName", ref vars);
                SystemSource = vars[0].Value.ToString();
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("System::ErrorDescription", ref vars);
                SystemErrMessage = vars[0].Value.ToString();
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("ErrorMessage", ref vars);
                ErrMessage = vars[0].Value.ToString();
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("ErrorSource", ref vars);
                ErrSource = vars[0].Value.ToString();
                vars.Unlock();

                if (ErrMessage == "")
                {
                    ErrMessage = SystemErrMessage;
                }
                else
                {
                    ErrMessage = ErrMessage + ";" + SystemErrMessage;
                }
                if (ErrSource == "")
                {
                    ErrSource = SystemSource;
                }
                else
                {
                    ErrSource = ErrSource + ";" + SystemSource;
                }

                ErrMessage = ErrMessage.Replace("'", "''");
                ErrSource = ErrSource.Replace("'", "''");

                vars = null;
                Dts.VariableDispenser.LockOneForWrite("ErrorSource", ref vars);
                vars[0].Value = ErrSource;
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForWrite("ErrorMessage", ref vars);
                vars[0].Value = ErrMessage;
                vars.Unlock();

                Dts.TaskResult = (int)ScriptResults.Success;

            }
            catch (Exception ex)
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="ST_668b537a155b46c491f704ec684bf0a6.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{ea461d57-b3ca-4cdd-bda6-a9aaa927630e}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_b96b9a606a9d4ae59db2a1c4a61786db</RootNamespace><AssemblyName>ST_668b537a155b46c491f704ec684bf0a6</AssemblyName><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" /><Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex=""></Host><ProjectClient><HostIdentifier>SSIS_ST110</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_b96b9a606a9d4ae59db2a1c4a61786db</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_b96b9a606a9d4ae59db2a1c4a61786db</msb:DisplayName>
		<msb:ProjectId>{73D23F85-7536-4439-8662-D4D476CEB1B4}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_668b537a155b46c491f704ec684bf0a6.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_b96b9a606a9d4ae59db2a1c4a61786db")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_b96b9a606a9d4ae59db2a1c4a61786db")]
[assembly: AssemblyCopyright("Copyright @  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_b96b9a606a9d4ae59db2a1c4a61786db.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDANteOlMAAAAAAAAAAOAAAiELAQsAABIAAAAIAAAAAAAADjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMAwAABLAAAAAEAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAFBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADw
MAAAAAAAAEgAAAACAAUAiCMAADgNAAABAAAAAAAAANAiAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABswAwDgAQAAAgAAEXJzAABwCnJzAABwC3JzAABwDHJzAABwDRQTBAIo
FgAACm8XAAAKcnUAAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoNEQRvHAAAChQTBAIo
FgAACm8XAAAKcpsAAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoMEQRvHAAAChQTBAIo
FgAACm8XAAAKcs0AAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoKEQRvHAAAChQTBAIo
FgAACm8XAAAKcucAAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoLEQRvHAAACgZycwAA
cCgdAAAKLAQICisNBnL/AABwCCgeAAAKCgdycwAAcCgdAAAKLAQJCysNB3L/AABwCSgeAAAKCwZy
AwEAcHIHAQBwbx8AAAoKB3IDAQBwcgcBAHBvHwAACgsUEwQCKBYAAApvFwAACnLnAABwEgRvIAAA
ChEEFoweAAABbxkAAAoHbyEAAAoRBG8cAAAKFBMEAigWAAAKbxcAAApyzQAAcBIEbyAAAAoRBBaM
HgAAAW8ZAAAKBm8hAAAKEQRvHAAACgIoFgAAChZvIgAACt4PJgIoFgAAChdvIgAACt4AKkEcAAAA
AAAAGAAAALgBAADQAQAADwAAACEAAAEeAigjAAAKKgAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3Rl
bS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1
bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVz
b3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAA
AAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAAAQAACN+AABsBAAAKAYAACNTdHJpbmdzAAAAAJQK
AAAQAQAAI1VTAKQLAAAQAAAAI0dVSUQAAAC0CwAAhAEAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMA
AAD6JTMAFgAAAQAAACEAAAAFAAAABgAAAAkAAAABAAAAIwAAAAIAAAAPAAAAAgAAAAIAAAADAAAA
BAAAAAEAAAAEAAAAAQAAAAEAAAAAAAoAAQAAAAAABgDBALoACgDdAMgADgA9ARQBBgBZAboABgBv
AV4BBgCgAYsBBgBXAj0CBgCCAnACBgCZAnACBgC2AnACBgDVAnACBgDuAnACBgAHA3ACBgAiA3AC
BgA9A3ACBgBWA3ACBgCPA28DBgCvA28DBgDgA80DBgD9A7oABgACBLoABgAmBHACCgBSBDwECgBr
BDwEBgCABG8DDgCiBBQBDgDEBBQBEgAdBf0EEgBFBf0EBgBeBboAEgBkBf0EBgCQBboABgDbBboA
AAAAAAEAAAAAAAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUAAQAQAHQAfwANAAQACAAD
AQAAowAAABEABAAKABEAfwETABEArAEXABEA9gE5AAYGHwJHAFaAJwJKAFaALwJKAFAgAAAAAIMY
vAEbAAEAWCAAAAAAkwjCAR8AAQCRIAAAAACTCNYBJAABAJggAAAAAJMI4gEpAAEAoCAAAAAAlggG
Aj0AAgCzIAAAAACGGLwBGwACAKcgAAAAAJEYmwSJAAIAvCAAAAAAhgAaAhsAAgDEIgAAAACGGLwB
GwACAAAAAQA3AjkAvAFYAEEAvAFYAEkAvAFYAFEAvAFYAFkAvAFYAGEAvAFYAGkAvAFYAHEAvAFY
AHkAvAFYAIEAvAFYAIkAvAFdAJEAvAEbAJkAvAEbAAkAvAEbAKEAFARiAKEALwRpACkAvAFuALkA
vAF6AMkAvAEbABEAvAEbANEAvAEbABkA1gSNANkALwWSAOEATwWXAOkAbQWfAPkAdgWlAAkAgAWp
AOkAiQUbAAEBlwWtAAEBowWzAAEBqgW6AOEAsgWXAPkAwgXAANkAzAVdABkAvAEbAAgAFABOAAgA
GABTACkAkwCAAC4AGwA/AS4AIwA/AS4AYwBlAS4ACwDOAC4AEwAWAS4AMwAWAS4AKwA/AS4AOwBF
AS4AQwA/AS4AWwBcAUMAawBTAEkAkwCAAGEAmwBTAIMAqwBTAHUAxQACAAEAAwADAAAAbwEvAAAA
7gE0AAAAEgJCAAIAAgADAAIAAwAFAAEABAAFAAIABQAHAASAAAABAAAAVBQFfAAAAAAAAH8AAAAE
AAAAAAAAAAAAAAABALEAAAAAAAQAAAAAAAAAAAAAAAEAugAAAAAACwAAAAAAAAAAAAAACgD1AAAA
AAALAAAAAAAAAAAAAAAKAN4EAAAAAAAAAAABAAAA5QUAAAUABAAAAAA8TW9kdWxlPgBTVF9iOTZi
OWE2MDZhOWQ0YWU1OWRiMmExYzRhNjE3ODZkYi5kbGwAUmVzb3VyY2VzAFNUX2I5NmI5YTYwNmE5
ZDRhZTU5ZGIyYTFjNGE2MTc4NmRiLlByb3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF9i
OTZiOWE2MDZhOWQ0YWU1OWRiMmExYzRhNjE3ODZkYgBTY3JpcHRSZXN1bHRzAG1zY29ybGliAFN5
c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UA
TWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRh
c2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJl
c291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24A
Q3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0
X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQA
RGVmYXVsdABNYWluAHZhbHVlX18AU3VjY2VzcwBGYWlsdXJlAHZhbHVlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFz
c2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJs
eUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5
UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRl
bWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0
cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0
aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBTeXN0ZW0uRGlhZ25v
c3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxl
AEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50
TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBp
bGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRy
aWJ1dGUAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFn
ZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJsZURpc3BlbnNlcgBn
ZXRfVmFyaWFibGVEaXNwZW5zZXIAVmFyaWFibGVzAExvY2tPbmVGb3JSZWFkAEludDMyAFZhcmlh
YmxlAGdldF9JdGVtAGdldF9WYWx1ZQBUb1N0cmluZwBVbmxvY2sAU3RyaW5nAG9wX0VxdWFsaXR5
AENvbmNhdABSZXBsYWNlAExvY2tPbmVGb3JXcml0ZQBzZXRfVmFsdWUAc2V0X1Rhc2tSZXN1bHQA
RXhjZXB0aW9uAFNUX2I5NmI5YTYwNmE5ZDRhZTU5ZGIyYTFjNGE2MTc4NmRiLlByb3BlcnRpZXMu
UmVzb3VyY2VzLnJlc291cmNlcwAAcVMAVABfAGIAOQA2AGIAOQBhADYAMAA2AGEAOQBkADQAYQBl
ADUAOQBkAGIAMgBhADEAYwA0AGEANgAxADcAOAA2AGQAYgAuAFAAcgBvAHAAZQByAHQAaQBlAHMA
LgBSAGUAcwBvAHUAcgBjAGUAcwAAAQAlUwB5AHMAdABlAG0AOgA6AFMAbwB1AHIAYwBlAE4AYQBt
AGUAADFTAHkAcwB0AGUAbQA6ADoARQByAHIAbwByAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAGUUA
cgByAG8AcgBNAGUAcwBzAGEAZwBlAAAXRQByAHIAbwByAFMAbwB1AHIAYwBlAAADOwAAAycAAQUn
ACcAAQAAACLLUdgYI8VJk9bDVaVupmUACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAA
EhUEAAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAIGCAMGERQEAAAAAAQBAAAABCAB
AQ4EIAEBCAYAARJREVUEIAASWQYgAgEOElkEBwESFQUgAQERYQgBAAIAAAAAAAMAAAEEIAASbQQg
ABJxByACAQ4QEnUFIAESfRwDIAAcAyAADgUAAgIODgYAAw4ODg4FIAIODg4EIAEBHAgHBQ4ODg4S
dUcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUQ
Lk5FVCBGcmFtZXdvcmsgNCgBACNTVF9iOTZiOWE2MDZhOWQ0YWU1OWRiMmExYzRhNjE3ODZkYgAA
BQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDEzAAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNl
cHRpb25UaHJvd3MB6DAAAAAAAAAAAAAA/jAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAwAAAA
AAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAsAMAAAAAAAAAAAAAsAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAAV8VBQAAAEABXxUFD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBBADAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAw
ADAAMAA0AGIAMAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwBiADkANgBiADkAYQA2ADAANgBhADkAZAA0AGEAZQA1ADkAZABiADIAYQAxAGMANABhADYAMQA3
ADgANgBkAGIAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANQAyADAA
NAAuADMAMQA3ADQAOQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBi
ADkANgBiADkAYQA2ADAANgBhADkAZAA0AGEAZQA1ADkAZABiADIAYQAxAGMANABhADYAMQA3ADgA
NgBkAGIALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEAMwAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkA
bABlAG4AYQBtAGUAAABTAFQAXwBiADkANgBiADkAYQA2ADAANgBhADkAZAA0AGEAZQA1ADkAZABi
ADIAYQAxAGMANABhADYAMQA3ADgANgBkAGIALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQA
TgBhAG0AZQAAAAAAUwBUAF8AYgA5ADYAYgA5AGEANgAwADYAYQA5AGQANABhAGUANQA5AGQAYgAy
AGEAMQBjADQAYQA2ADEANwA4ADYAZABiAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkA
bwBuAAAAMQAuADAALgA1ADIAMAA0AC4AMwAxADcANAA5AAAAAABIAA8AAQBBAHMAcwBlAG0AYgBs
AHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA1ADIAMAA0AC4AMwAxADcANAA5AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAABAxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="294,42"
          Id="Package\Insert Error Record into StagingExecutionLog"
          TopLeft="578.972222222222,3375.88806528902" />
        <NodeLayout
          Size="286,44"
          Id="Package\Sequence Container\Check Outage Window"
          TopLeft="265.801587301587,195.55540581013" />
        <NodeLayout
          Size="137,42"
          Id="Package\Sequence Container\Foreach Suite Container\ProcessFiles"
          TopLeft="260.464285714285,28.4642857142862" />
        <ContainerLayout
          HeaderHeight="43.924528301886795"
          IsExpanded="True"
          PanelSize="690,125"
          Size="690,169"
          Id="Package\Sequence Container\Foreach Suite Container"
          TopLeft="60,563.2531446541" />
        <NodeLayout
          Size="207,42"
          Id="Package\Sequence Container\Get File Manager Variables"
          TopLeft="308.77777777778,60" />
        <NodeLayout
          Size="146,42"
          Id="Package\Sequence Container\Get StartTime"
          TopLeft="325.61507936508,374.98412698413" />
        <NodeLayout
          Size="211,42"
          Id="Package\Sequence Container\Get the Execution Suite List"
          TopLeft="296.784965558551,283.2298592393" />
        <NodeLayout
          Size="197,44"
          Id="Package\Sequence Container\Log Information Manger Guid and version"
          TopLeft="302.396468311563,461.37295251918" />
        <NodeLayout
          Size="208,42"
          Id="Package\Sequence Container\Log Outage Window Active"
          TopLeft="723.074123989218,196.01123090746" />
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint]"
          TopLeft="410.539682539684,102">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,93.5554058101211"
              Start="0,0"
              End="0,86.0554058101211">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,86.0554058101211" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 1]"
          TopLeft="400.450022461815,325.2298592393">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,49.7542677448259"
              Start="0,0"
              End="0,42.2542677448259">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,42.2542677448259" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 2]"
          TopLeft="405.543276430069,239.55540581013">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,43.6744534291761"
              Start="0,0"
              End="0,36.1744534291761">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.1744534291761" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-73.42685546875,10.087226714588,146.8537109375,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 3]"
          TopLeft="551.801587301587,217.28331835879">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="171.272536687631,0"
              Start="0,0"
              End="163.772536687631,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="163.772536687631,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="8.66204959381551,5,146.4484375,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 4]"
          TopLeft="399.755773838321,416.98412698413">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,44.3888255350512"
              Start="0,0"
              End="0,36.8888255350512">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.8888255350512" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 5]"
          TopLeft="402.948234155782,505.37295251918">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,57.8801921349223"
              Start="0,0"
              End="0,50.3801921349223">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.3801921349223" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="936,787"
          Size="936,830"
          Id="Package\Sequence Container"
          TopLeft="258,2479" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="725.986111111111,3309">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,66.8880652890198"
              Start="0,0"
              End="0,59.3880652890198">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,59.3880652890198" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.24134765625,24.8195209257599,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="Package.EventHandlers[OnError]\Append Error to Error Message"
          TopLeft="NaN,NaN" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container.PrecedenceConstraints[Constraint 2]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container.PrecedenceConstraints[Constraint 3]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>