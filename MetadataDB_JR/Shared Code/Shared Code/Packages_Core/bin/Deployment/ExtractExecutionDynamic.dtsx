<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/11/2010"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="AU-L234"
  DTS:CreatorName="BRIGHTSTAR\oszymczak"
  DTS:DTSID="{B00FAAEE-BC1C-4289-80B2-C01D6AB4D243}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:ForceExecutionResult="0"
  DTS:LastModifiedProductVersion="11.0.3402.0"
  DTS:LocaleID="3081"
  DTS:ObjectName="ExtractExecutionDynamic"
  DTS:PackageType="5"
  DTS:SuppressConfigurationWarnings="True"
  DTS:VersionBuild="783"
  DTS:VersionGUID="{FD777424-EB27-4E84-91C1-50DD47E47966}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Destination]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{7FE8E375-C038-461C-921C-5EE662E76E0C}"
      DTS:ObjectName="Destination">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ConnStr_Destination]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="RetainSameConnection">@[User::RSC_SCExtract]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Retain="True"
          DTS:ConnectionString="Data Source=05W8F2APSQ01\DEV;Initial Catalog=RegDistExtract;Provider=SQLNCLI10.1;Integrated Security=SSPI;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ETLReference]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{9B2944F0-65EE-4028-B76A-B46B88798496}"
      DTS:ObjectName="ETLReference">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ConnStr_ETLReference]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=05W8F2APSQ03\dev2012;Initial Catalog=DWReference;Provider=SQLNCLI11.1;Integrated Security=SSPI;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager]"
      DTS:CreationName="EXCEL"
      DTS:DTSID="{F74353DD-99A7-42AF-A18D-3328DDFAA286}"
      DTS:ObjectName="Excel Connection Manager">
      <DTS:PropertyExpression
        DTS:Name="ExcelFilePath">@[User::ConnStr_ExcelCM]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\\05w3f5af01\File Share\General\SCDW\SCDWData.xls;Extended Properties=&quot;EXCEL 8.0;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[msdb]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{C2817111-D0E8-4039-882F-A0B2BE4501FF}"
      DTS:ObjectName="msdb">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ConnStr_msdb]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=05W8F2APSQ01\DEV;Initial Catalog=msdb;Provider=SQLNCLI10.1;Integrated Security=SSPI;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Source]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{3568CB79-C956-4DA1-BB13-55F3DF24B2EC}"
      DTS:ObjectName="Source">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ConnStr_Source]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=.\test;Initial Catalog=SCP;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="msdb"
      DTS:CreationName="DTS.LogProviderSQLServer.3"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{BF13F206-44EC-4A99-98FC-F04F6B93BC57}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F131F1B5-CF09-46D9-B258-6A95FB0F3968}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="AccessWindowEndMins">
      <DTS:VariableValue
        DTS:DataType="3">1440</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E0FA7F4F-9381-4621-9F7B-36DD2411DA59}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BulkUploadLoadSize">
      <DTS:VariableValue
        DTS:DataType="8">1000</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2324C3B4-760D-4D1A-A921-AC97C707DDF1}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CheckConnection">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B025A754-5798-4265-897F-AA6E23943D40}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CheckDataCurrency">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5EB57452-F0BD-4224-8351-E4F64804F50A}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CheckExtractRowCount">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{858B29EE-8D64-4EAB-9332-EB7B77A3032D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="ConnectionCheckOutput">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CDC0AF73-573B-4814-BB7D-C2CF5D8F4076}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnectionCheckQuery">
      <DTS:VariableValue
        DTS:DataType="8">SELECT COUNT(*) FROM sys.databases WHERE name IN  ('dms','SOLPOT', 'SOLAUTELAPP','RBEACONBP') AND state_desc = 'ONLINE'</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8E9F8FAC-0A21-4625-AC0E-42B40C935593}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="ConnectionCheckResult">
      <DTS:VariableValue
        DTS:DataType="3">4</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B8BCB601-BA02-4186-8B17-5A5428AD0709}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnStr_Destination">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=05W8F2APSQ01\DEV;Initial Catalog=RegDistExtract;Provider=SQLNCLI10.1;Integrated Security=SSPI;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{10F7BFB1-234F-4719-8D88-65F94A39548B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnStr_ETLReference">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=05W8F2APSQ03\dev2012;Initial Catalog=DWReference;Provider=SQLNCLI11.1;Integrated Security=SSPI;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{42723F8E-A729-4185-95F4-BE888A5BC9B8}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;\\\\05w3f5af01\\File Share\\General\\SCDW\\SCDWData.xls&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnStr_ExcelCM">
      <DTS:VariableValue
        DTS:DataType="8">\\05w3f5af01\File Share\General\SCDW\SCDWData.xls</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F3E6FD13-0982-4EF4-BB27-FC2012F1582A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnStr_msdb">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=05W8F2APSQ01\DEV;Initial Catalog=msdb;Provider=SQLNCLI10.1;Integrated Security=SSPI;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A9D95EC8-6E4D-4D5D-B7FD-078791E8D27E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnStr_Source">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=.\test;Initial Catalog=SCP;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BEDDF621-725D-4605-BA56-D20ECFA60999}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CurrentExecutionOrder">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C1143F8D-0235-4A3E-955E-5FFBAFA24221}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="DataCurrencyCheckOutput">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CB218289-720E-43BB-AD8F-0A7AED9144D5}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DataCurrencyCheckQuery">
      <DTS:VariableValue
        DTS:DataType="8">SELECT COUNT(*)  FROM  (select database_name, max(backup_finish_date) as backup_finish_date from msdb..backupset where database_name IN ('dms','SOLPOT', 'SOLAUTELAPP','RBEACONBP') group by database_name) t WHERE backup_finish_date &gt; DATEADD(hour, -24, GETDATE())</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5D75752A-6123-4ACA-AB91-8A4F99760B84}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="DataCurrencyCheckResult">
      <DTS:VariableValue
        DTS:DataType="3">4</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{25071033-9804-4CE4-8624-7E5EE8AC8803}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DerivedPathAndName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{82757C7F-2715-42E8-81BD-F3BF8D5EEC94}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DestinationName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D96F21DA-A16F-46D4-9937-700F062C588D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DestinationSourceTypeName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BC0D82AE-459F-4AC7-B67F-6BBCC1A6DF30}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Environment">
      <DTS:VariableValue
        DTS:DataType="8">UAT</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0F9C458E-149E-4134-AE51-F75173D61F99}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorMessage">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{91273E9A-4513-472E-8BFE-3E999F7D7655}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorSource">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{32E0D6AD-36AC-4385-9D84-6BE20DCB9574}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="ExtractControlID">
      <DTS:VariableValue
        DTS:DataType="3">1474</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FB2FBAB5-D7D1-499D-910A-C0A7E44CF83F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExtractEndTime">
      <DTS:VariableValue
        DTS:DataType="8">2014-08-06 17:59:57.193</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7909C556-E779-4A30-BE07-8F640A135029}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="ExtractJobID">
      <DTS:VariableValue
        DTS:DataType="3">-1002</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{709EA0DF-423D-4123-B474-756A957C8C55}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExtractPackageName">
      <DTS:VariableValue
        DTS:DataType="8">ExtractExcelMasterDataRange</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C8E3BB4A-7891-4320-9444-98D45734B051}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExtractPackagePath">
      <DTS:VariableValue
        DTS:DataType="8">\ETL-RegionalReporting</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BAB0D3E6-6400-40F9-AD0C-A9BD47F74CF4}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExtractPackagePathAndName">
      <DTS:VariableValue
        DTS:DataType="8">\UAT\ETL-RegionalReporting\ExtractExcelMasterDataRange</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0D172B2A-0D6E-415B-A781-64CE58BD02FA}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="ExtractRowCount">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7D39D355-E6FC-4653-BE6C-A0F0B833DBFB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExtractStartTime">
      <DTS:VariableValue
        DTS:DataType="8">1900-01-01 00:00:00</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CD00647D-1BFA-48D9-A262-4737ABFCC7BA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExtractTable">
      <DTS:VariableValue
        DTS:DataType="8">ExtOMFShipmenttoCustomerBSIK</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{58CF4C3E-3D31-4285-9332-72DBCDEE73E8}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileDestination">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CEC2EF68-489E-4E71-B409-3EDD4179F744}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{27D89FD2-01F3-4C57-A560-C8E134E8EE4B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileSource">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{17B5AB31-C7EE-41B1-8FBF-861018A8FC87}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ManagerGUID">
      <DTS:VariableValue
        DTS:DataType="8">7D3FDB0F-14CC-4808-9D5E-003EE9AB8015</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{15AC09F5-AD39-4A1F-9480-AC42A15A4EEA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="NextExtractStartTime">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5AE06201-2187-408F-A0A6-F3BE231D1660}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::ExtractPackagePathAndName]  == @[User::DerivedPathAndName]  ? &quot;Yes&quot; : &quot;No&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PackageExistsFlag">
      <DTS:VariableValue
        DTS:DataType="8">No</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9C3D47BE-297A-4A5D-802C-CD9E23A70476}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ProcessType">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{429FCE35-3CD2-4E5E-AB24-C47DBFE51670}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="True"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RSC_SCExtract">
      <DTS:VariableValue
        DTS:DataType="11">-1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B1910581-BCA6-474E-9790-B09E48F56F92}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Server">
      <DTS:VariableValue
        DTS:DataType="8">05W8F2APSQ01\DEV</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{99D74F9A-91AB-4D20-BD2A-8D22ECC9F501}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceName">
      <DTS:VariableValue
        DTS:DataType="8">SCP</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{87DA87EB-E348-410F-9563-7954A6B2C9FC}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceQuery">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F5D9FE95-4BF0-43E8-A59A-BD6B81D094F8}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;SELECT * FROM&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceQueryEvaluated">
      <DTS:VariableValue
        DTS:DataType="8">SELECT * FROM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0F7E14E0-16F8-43E6-A2CD-AB83DBC5B5AA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceQueryMapping">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{284A4063-0F47-48A4-ADC5-AC58DC0D283E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceTypeName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AE62DE9A-FB8F-4B44-B8BB-3956234A18A4}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;[spInsertExtractExecutionLog] &#xA;@ExtractJobID= &quot; + (DT_STR, 20, 1252)@[User::ExtractJobID] + &quot;,&#xA;@StartTime = '&quot; + @[User::StartTime] + &quot;',&#xA;@ManagerGUID = '&quot; + @[User::ManagerGUID] + &quot;',&#xA;@SuccessFlag = 0,&#xA;@CompletedFlag = 1,&#xA;@MessageSource = '&quot; + SUBSTRING(@[User::ErrorSource],1, 999) + &quot;',&#xA;@Message = '&quot; +  @[User::ErrorMessage]  + &quot;',&#xA;@RowsExtracted = &quot; + (DT_WSTR, 10)@[User::ExtractRowCount] + &quot;,&#xA;@ExtractStartTime = '&quot; + @[User::ExtractStartTime]   + &quot;',&#xA;@ExtractEndTime = '&quot; + @[User::ExtractEndTime]  + &quot;',&#xA;@NextExtractStartTime = '&quot; + @[User::ExtractStartTime] + &quot;',&#xA;@ExtractPackagePathAndName = '&quot; +  @[User::ExtractPackagePathAndName]  + &quot;',&#xA;@ExtractControlID = &quot; + (DT_STR, 20, 1252)@[User::ExtractControlID]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SqlErrorMessage">
      <DTS:VariableValue
        DTS:DataType="8">[spInsertExtractExecutionLog] 
@ExtractJobID= -1002,
@StartTime = '1900-01-01 00:00:00',
@ManagerGUID = '7D3FDB0F-14CC-4808-9D5E-003EE9AB8015',
@SuccessFlag = 0,
@CompletedFlag = 1,
@MessageSource = '',
@Message = '',
@RowsExtracted = 0,
@ExtractStartTime = '1900-01-01 00:00:00',
@ExtractEndTime = '2014-08-06 17:59:57.193',
@NextExtractStartTime = '1900-01-01 00:00:00',
@ExtractPackagePathAndName = '\UAT\ETL-RegionalReporting\ExtractExcelMasterDataRange',
@ExtractControlID = 1474</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0EB4D155-13D5-4E49-982D-D6F8E08CA522}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;SELECT COUNT(*) AS ExtractRowCount, CONVERT(CHAR(23), MAX(LastChangeTime), 121) AS NextExtractStartTime FROM &quot; + @[User::ExtractTable]  +  &quot; WHERE ExtractJobID = &quot; +  (DT_WSTR, 10)@[User::ExtractJobID]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SqlGetRowCount">
      <DTS:VariableValue
        DTS:DataType="8">SELECT COUNT(*) AS ExtractRowCount, CONVERT(CHAR(23), MAX(LastChangeTime), 121) AS NextExtractStartTime FROM ExtOMFShipmenttoCustomerBSIK WHERE ExtractJobID = -1002</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5A8DCF76-8A02-450E-8B6C-CA32E263D193}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StandVariablesResult">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EF967709-0730-4A82-8A06-CC5EE4A77AEA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StartTime">
      <DTS:VariableValue
        DTS:DataType="8">1900-01-01 00:00:00</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DF112B71-9131-43C6-92B0-9EA794B16337}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Suite">
      <DTS:VariableValue
        DTS:DataType="8">MDS</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7C124C4B-6932-45AD-8AB5-65E89A1CCF85}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TruncateExtractTable">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">3,7,OnError,13,OnPostExecute,9,OnWarning</DTS:Property>
    <DTS:Property
      DTS:EventName="Diagnostic"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnExecStatusChanged"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnInformation"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPostExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPostValidate"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPreExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPreValidate"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnProgress"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnQueryCancel"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnTaskFailed"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnVariableValueChanged"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnWarning"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{BF13F206-44EC-4A99-98FC-F04F6B93BC57}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Delete Any Records from Failed Extract in ExtractTable"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{08CC93BA-CCC0-4324-B9CC-DEBC9B408741}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="Delete Any Records from Failed Extract in ExtractTable"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:PropertyExpression
        DTS:Name="SqlStatementSource">ISNULL(@[User::ExtractTable] )? "SELECT 1" : LEN( @[User::ExtractTable] ) == 0? "SELECT 1" : "IF  OBJECT_ID('" + @[User::ExtractTable]  + "', 'U') IS NOT NULL DELETE FROM " + @[User::ExtractTable]  + " WHERE ExtractJobID = " +  (DT_WSTR, 10)@[User::ExtractJobID]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{7FE8E375-C038-461C-921C-5EE662E76E0C}"
          SQLTask:SqlStatementSource="IF  OBJECT_ID('ExtOMFShipmenttoCustomerBSIK', 'U') IS NOT NULL DELETE FROM ExtOMFShipmenttoCustomerBSIK WHERE ExtractJobID = -1002" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Insert Error Record into ExtractExecutionLog"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{619b6bc5-d997-48c7-86f3-b8732dbd3166}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="Insert Error Record into ExtractExecutionLog"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:PropertyExpression
        DTS:Name="SqlStatementSource">@[User::SqlErrorMessage]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
          SQLTask:SqlStatementSource="[spInsertExtractExecutionLog] &#xA;@ExtractJobID= -1002,&#xA;@StartTime = '1900-01-01 00:00:00',&#xA;@ManagerGUID = '7D3FDB0F-14CC-4808-9D5E-003EE9AB8015',&#xA;@SuccessFlag = 0,&#xA;@CompletedFlag = 1,&#xA;@MessageSource = '',&#xA;@Message = '',&#xA;@RowsExtracted = 0,&#xA;@ExtractStartTime = '1900-01-01 00:00:00',&#xA;@ExtractEndTime = '2014-08-06 17:59:57.193',&#xA;@NextExtractStartTime = '1900-01-01 00:00:00',&#xA;@ExtractPackagePathAndName = '\UAT\ETL-RegionalReporting\ExtractExcelMasterDataRange',&#xA;@ExtractControlID = 1474" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Sequence Container"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{7DDB087D-0160-495F-AFA6-58DB87179E5F}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Alternative Source to Destination"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{b209c418-3f5d-496c-820b-fdb64718706a}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="Alternative Source to Destination">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Alternative Source to Destination\Do Nothing"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{75209789-160b-4ccf-873e-7ee405bb30a7}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Do Nothing"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="2">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="SELECT 1" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Alternative Source to Destination\Do Nothing 1"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{f2d85933-5189-4bb1-a63a-06e640ac44e2}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Do Nothing 1"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="5">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="SELECT 1" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Alternative Source to Destination\Do Nothing 2"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{8441593d-32ed-4eaf-8d36-d0d7297aadc4}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Do Nothing 2"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"EXEC spGetExtractExecutionStandardVariables " +  (DT_WSTR, 10) @[User::ExtractControlID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="EXEC spGetExtractExecutionStandardVariables 1474" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Alternative Source to Destination\Get Dest File"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{cf628aa2-7308-42b3-94b1-14b9d21eea47}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get Dest File"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="3">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"EXEC spGetExtractExecutionDestFileVariables " +  (DT_WSTR, 10) @[User::ExtractControlID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="EXEC spGetExtractExecutionDestFileVariables 1474"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="FileDestination"
                    SQLTask:DtsVariableName="User::FileDestination" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="FileName"
                    SQLTask:DtsVariableName="User::FileName" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Alternative Source to Destination\Get Dest Sql"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{abba403d-69af-42d7-b0e3-5b11b2ad1904}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get Dest Sql"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="4">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"EXEC spGetExtractExecutionDestSqlVariables " +  (DT_WSTR, 10) @[User::ExtractControlID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="EXEC spGetExtractExecutionDestSqlVariables 1474"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="ConnStr_Destination"
                    SQLTask:DtsVariableName="User::ConnStr_Destination" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="ExtractTable"
                    SQLTask:DtsVariableName="User::ExtractTable" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Alternative Source to Destination\Get Source File"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{d98fce91-b198-4734-952a-63a402ac76be}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get Source File"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"EXEC spGetExtractExecutionSourceFileVariables " +  (DT_WSTR, 10) @[User::ExtractControlID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="EXEC spGetExtractExecutionSourceFileVariables 1474"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="FileSource"
                    SQLTask:DtsVariableName="User::FileSource" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Alternative Source to Destination\Get Source Sql"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{8860f648-05cf-4ff4-be43-c929ca0fe7be}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get Source Sql"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"EXEC spGetExtractExecutionSourceSqlVariables " +  (DT_WSTR, 10) @[User::ExtractControlID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="EXEC spGetExtractExecutionSourceSqlVariables 1474"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="ConnStr_Source"
                    SQLTask:DtsVariableName="User::ConnStr_Source" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Alternative Source to Destination\Sequence Container"
              DTS:CreationName="STOCK:SEQUENCE"
              DTS:Description="Extract Execution Dynamic Tasks SQL to File"
              DTS:DTSID="{0c2e360d-f9d9-4afc-aba9-0deb3ba8bbc2}"
              DTS:ExecutableType="STOCK:SEQUENCE"
              DTS:LocaleID="-1"
              DTS:ObjectName="Sequence Container">
              <DTS:Variables />
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Check that CurrentTime &lt; AccessWindowEndMins and PackagePath is correct"
                  DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                  DTS:Description="Script Task"
                  DTS:DTSID="{73ff359f-fed4-4a69-b5c0-01fc638d091b}"
                  DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Check that CurrentTime &lt; AccessWindowEndMins and PackagePath is correct"
                  DTS:ThreadHint="2">
                  <DTS:Variables />
                  <DTS:LoggingOptions
                    DTS:FilterKind="0" />
                  <DTS:ObjectData>
                    <ScriptProject
                      Name="ST_36cdb4c23b974082b935e2601f51f531"
                      VSTAMajorVersion="3"
                      VSTAMinorVersion="0"
                      Language="VisualBasic"
                      ReadOnlyVariables="ExtractPackagePathAndName, PackageExistsFlag, AccessWindowEndMins">
                      <ProjectItem
                        Name="My Project\AssemblyInfo.vb"
                        Encoding="UTF8"><![CDATA[Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' General Information about an assembly is controlled through the following 
' set of attributes. Change these attribute values to modify the information
' associated with an assembly.

' Review the values of the assembly attributes

<Assembly: AssemblyTitle("ScriptTask_c51bdad5d736492dbd6dc67cd3f00614.vbproj")> 
<Assembly: AssemblyDescription("")> 
<Assembly: AssemblyCompany("Brightstar Logistics")> 
<Assembly: AssemblyProduct("ScriptTask_c51bdad5d736492dbd6dc67cd3f00614.vbproj")> 
<Assembly: AssemblyCopyright("Copyright @ Brightstar Logistics 2009")> 
<Assembly: AssemblyTrademark("")> 
<Assembly: CLSCompliant(True)> 

<Assembly: ComVisible(False)> 

'The following GUID is for the ID of the typelib if this project is exposed to COM
<Assembly: Guid("5d4f62b3-708b-4ddc-9b5d-84b7bd316f40")> 

' Version information for an assembly consists of the following four values:
'
'      Major Version
'      Minor Version 
'      Build Number
'      Revision
'
' You can specify all the values or you can default the Build and Revision Numbers 
' by using the '*' as shown below:
' <Assembly: AssemblyVersion("1.0.*")>

<Assembly: AssemblyVersion("1.0.0.0")> 
<Assembly: AssemblyFileVersion("1.0.0.0")> ]]></ProjectItem>
                      <ProjectItem
                        Name="ST_36cdb4c23b974082b935e2601f51f531.vbproj"
                        Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  --><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{F184B08F-C81C-45F6-A57F-5ABD9991F28F}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><OutputType>Library</OutputType><RootNamespace>ScriptTask_c51bdad5d736492dbd6dc67cd3f00614.vbproj</RootNamespace><AssemblyName>ST_36cdb4c23b974082b935e2601f51f531</AssemblyName><StartupObject></StartupObject><OptionExplicit>On</OptionExplicit><OptionCompare>Binary</OptionCompare><OptionStrict>Off</OptionStrict><OptionInfer>On</OptionInfer><ProjectGuid>{9DF5A801-E41F-47C9-B187-BC19D874B294}</ProjectGuid><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DefineConstants></DefineConstants><DefineDebug>true</DefineDebug><DefineTrace>true</DefineTrace><DebugSymbols>true</DebugSymbols><Optimize>false</Optimize><OutputPath>bin\</OutputPath><RegisterForComInterop>false</RegisterForComInterop><RemoveIntegerChecks>false</RemoveIntegerChecks><NoWarn>42016,42017,42018,42019,42032,42353,42354,42355</NoWarn></PropertyGroup><!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DefineConstants></DefineConstants><DefineDebug>false</DefineDebug><DefineTrace>true</DefineTrace><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>bin\</OutputPath><RegisterForComInterop>false</RegisterForComInterop><RemoveIntegerChecks>false</RemoveIntegerChecks><NoWarn>42016,42017,42018,42019,42032,42353,42354,42355</NoWarn></PropertyGroup><!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  --><PropertyGroup><PreBuildEvent></PreBuildEvent><PostBuildEvent></PostBuildEvent></PropertyGroup><!-- This sections specifies references for the project. --><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><!-- Visual Basic supports Importing namespaces (equivalent to using statements in C#).--><ItemGroup><Import Include="Microsoft.VisualBasic" /><Import Include="System" /><Import Include="System.Collections" /><Import Include="System.Data" /><Import Include="System.Diagnostics" /><Import Include="System.Windows.Forms" /></ItemGroup><!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  --><ItemGroup><AppDesigner Include="My Project\" /><Compile Include="My Project\AssemblyInfo.vb"><SubType>Code</SubType></Compile><EmbeddedResource Include="My Project\Resources.resx"><Generator>VbMyResourcesResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.vb</LastGenOutput><CustomToolNamespace>My.Resources</CustomToolNamespace></EmbeddedResource><Compile Include="My Project\Resources.Designer.vb"><AutoGen>True</AutoGen><DesignTime>True</DesignTime><DependentUpon>Resources.resx</DependentUpon><SubType>Code</SubType></Compile><None Include="My Project\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.vb</LastGenOutput></None><Compile Include="My Project\Settings.Designer.vb"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon><SubType>Code</SubType></Compile><Compile Include="ScriptMain.vb"><SubType>Code</SubType></Compile><!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    --></ItemGroup><!-- Include the build rules for a VB project.--><Import Project="$(MSBuildBinPath)\Microsoft.VisualBasic.targets" /><!-- This section defines VSTA properties that describe the host-changable project properties. --><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="vb" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" /><Host Name="SSIS_ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST110</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
                      <ProjectItem
                        Name="My Project\Settings.settings"
                        Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)" GeneratedClassNamespace="$safeprojectname" GeneratedClassName="MySettings">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                      <ProjectItem
                        Name="My Project\Settings.Designer.vb"
                        Encoding="UTF8"><![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



Partial Friend NotInheritable Class MySettings
    Inherits System.Configuration.ApplicationSettingsBase

    Private Shared m_Value As MySettings

    Private Shared m_SyncObject As Object = New Object

    <System.Diagnostics.DebuggerNonUserCode()> _
    Public Shared ReadOnly Property Value() As MySettings
        Get
            If (MySettings.m_Value Is Nothing) Then
                System.Threading.Monitor.Enter(MySettings.m_SyncObject)
                If (MySettings.m_Value Is Nothing) Then
                    Try
                        MySettings.m_Value = New MySettings
                    Finally
                        System.Threading.Monitor.Exit(MySettings.m_SyncObject)
                    End Try
                End If
            End If
            Return MySettings.m_Value
        End Get
    End Property
End Class]]></ProjectItem>
                      <ProjectItem
                        Name="Project"
                        Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>st_0785e3edad0f4460a02e6e261ac1e670</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>st_0785e3edad0f4460a02e6e261ac1e670</msb:DisplayName>
		<msb:ProjectId>{52F56F6D-F61D-41FC-9801-7ABE02963974}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_36cdb4c23b974082b935e2601f51f531.vbproj"/>
		<msb:File Include="My Project\AssemblyInfo.vb"/>
		<msb:File Include="ScriptMain.vb"/>
		<msb:File Include="My Project\Resources.resx"/>
		<msb:File Include="My Project\Resources.Designer.vb"/>
		<msb:File Include="My Project\Settings.settings"/>
		<msb:File Include="My Project\Settings.Designer.vb"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                      <ProjectItem
                        Name="ScriptMain.vb"
                        Encoding="UTF8"><![CDATA[' Microsoft SQL Server Integration Services Script Task
' Write scripts using Microsoft Visual Basic
' The ScriptMain class is the entry point of the Script Task.

Imports System
Imports System.Data
Imports System.Math
Imports Microsoft.SqlServer.Dts.Runtime

<Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute> _
<System.CLSCompliantAttribute(False)> _
Partial Public Class ScriptMain
	Inherits Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase

	Enum ScriptResults
		Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success
		Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
	End Enum

	' The execution engine calls this method when the task executes.
	' To access the object model, use the Dts object. Connections, variables, events,
	' and logging features are available as static members of the Dts class.
	' Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
	' 
	' To open Code and Text Editor Help, press F1.
	' To open Object Browser, press Ctrl+Alt+J.

    Public Sub Main()
        Dts.TaskResult = ScriptResults.Success

        Try

            'Set the process to go asleep for 60s (1s = 1000 microseconds)
            'System.Threading.Thread.Sleep(60000)

            'Get the current time (in minutes) 
            Dim iCurrentMinutes As Integer = (DateTime.Now.Minute) + ((DateTime.Now.Hour) * 60)

            'Check that the package exists in the msdb database on the server
            If Dts.Variables("PackageExistsFlag").Value.ToString = "No" Then
                'Raise Custom Error for the package begin called not existing in the msdb database
                Dts.Events.FireError(1, Err.Source, "PackagePath: " & Dts.Variables("ExtractPackagePathAndName").Value.ToString & " is not valid on this server", "", 0)
                'Check if the current time (in minutes) is less than the AccessWindowEndMins
            ElseIf (iCurrentMinutes > Convert.ToInt32(Dts.Variables("AccessWindowEndMins").Value)) Then
                'Raise Custom Error for being outside load window
                Dts.Events.FireError(1, Err.Source, "Extract StartTime " & DateTime.Now.ToString & " is Outside Load Window", "", 0)
            End If

        Catch ex As Exception

            Dts.Events.FireError(1, ex.TargetSite.Name, ex.Message, "", 0)
        End Try
        '
        Dts.TaskResult = ScriptResults.Success
    End Sub

End Class]]></ProjectItem>
                      <ProjectItem
                        Name="My Project\Resources.resx"
                        Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                      <ProjectItem
                        Name="My Project\Resources.Designer.vb"
                        Encoding="UTF8"><![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace My.Resources
    
    '''<summary>
    '''   A strongly-typed resource class, for looking up localized strings, etc.
    '''</summary>
    'This class was auto-generated by the Strongly Typed Resource Builder
    'class via a tool like ResGen or Visual Studio.NET.
    'To add or remove a member, edit your .ResX file then rerun ResGen
    'with the /str option, or rebuild your VS project.
    Class MyResources
        
        Private Shared _resMgr As System.Resources.ResourceManager
        
        Private Shared _resCulture As System.Globalization.CultureInfo
        
        Friend Sub New()
            MyBase.New
        End Sub
        
        '''<summary>
        '''   Returns the cached ResourceManager instance used by this class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared ReadOnly Property ResourceManager() As System.Resources.ResourceManager
            Get
                If (_resMgr Is Nothing) Then
                    Dim temp As System.Resources.ResourceManager = New System.Resources.ResourceManager("My.Resources.MyResources", GetType(MyResources).Assembly)
                    _resMgr = temp
                End If
                Return _resMgr
            End Get
        End Property
        
        '''<summary>
        '''   Overrides the current thread's CurrentUICulture property for all
        '''   resource lookups using this strongly typed resource class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared Property Culture() As System.Globalization.CultureInfo
            Get
                Return _resCulture
            End Get
            Set
                _resCulture = value
            End Set
        End Property
    End Class
End Namespace]]></ProjectItem>
                      <BinaryItem
                        Name="ST_36cdb4c23b974082b935e2601f51f531.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAPHb6VMAAAAAAAAAAOAAAiELAQsAACAAAAAIAAAAAAAAHj4A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAIAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMw9AABPAAAAAEAAAJAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAJB4AAAAgAAAAIAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAJAEAAAAQAAAAAYAAAAiAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAKAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAA
PgAAAAAAAEgAAAACAAUA6CQAAOQYAAABAAAAAAAAADAkAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKAEAAAoqHgIoBAAACiqmcwYAAAqAAQAABHMHAAAKgAIA
AARzCAAACoADAAAEcwkAAAqABAAABCoAABMwAQALAAAAAQAAEX4BAAAEbwoAAAoqABMwAQALAAAA
AgAAEX4CAAAEbwsAAAoqABMwAQALAAAAAwAAEX4DAAAEbwwAAAoqABMwAQALAAAABAAAEX4EAAAE
bw0AAAoqABMwAgANAAAABQAAEQIDKBEAAAooEgAACioAAAATMAEABwAAAAYAABECKBMAAAoqABMw
AQALAAAABwAAEdAFAAACKBQAAAoqABMwAQAHAAAACAAAEQIoFQAACioAEzABABAAAAAJAAARAowB
AAAbLQYoAQAAKyoCKhMwAgAQAAAACgAAEQMSAP4VAgAAGwaBAgAAGyoeAigXAAAKKhMwAgAoAAAA
CwAAEQJ7GQAACm8aAAAKCweMAwAAGy0SKAIAACsLAnsZAAAKB28bAAAKBypKAigXAAAKAnMcAAAK
fRkAAAoqAB4CKBcAAAoqEzACAC0AAAAMAAARfgYAAAQtIHIBAABw0AcAAAIoFAAACm8eAAAKcx8A
AAoLB4AGAAAEfgYAAAQqAAAAEzABAAYAAAANAAARfgcAAAQqAAAeAoAHAAAEKkJzFwAACigRAAAK
gAkAAAQqAAAAHgIoIAAACiobMAEAPwAAAA4AABF+CAAABC0yfgkAAAQoEQAACighAAAKfggAAAQt
HHMWAAAGgAgAAATeEH4JAAAEKBEAAAooIgAACtx+CAAABCoAARAAAAIAHQAMKQAQAAAAAB4CKCQA
AAoqGzAGAFgBAAAPAAARAm8lAAAKFm8mAAAKKCcAAAoMEgIoKAAACignAAAKDRIDKCkAAAofPNjW
CgJvJQAACm8qAAAKcjMAAHBvKwAACm8sAAAKbxUAAApyVwAAcBYoLQAAChYzVQJvJQAACm8uAAAK
FygvAAAKbzAAAApyXQAAcAJvJQAACm8qAAAKcnkAAHBvKwAACm8sAAAKbxUAAApyrQAAcCgxAAAK
cucAAHAWbzIAAAom3Z4AAAAGAm8lAAAKbyoAAApy6QAAcG8rAAAKbywAAAooEQAACigzAAAKMT4C
byUAAApvLgAAChcoLwAACm8wAAAKchEBAHAoJwAACg0SAyg0AAAKcjcBAHAoMQAACnLnAABwFm8y
AAAKJt43JSg1AAAKCwJvJQAACm8uAAAKFwdvNgAACm83AAAKB284AAAKcucAAHAWbzIAAAomKDkA
AAreAAJvJQAAChZvJgAACipBHAAAAAAAAAwAAAAIAQAAFAEAADcAAAAbAAABtAAAAM7K774BAAAA
kQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00
LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkj
U3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAA
AEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAEgIAAAjfgAAtAgAALAKAAAjU3Ry
aW5ncwAAAABkEwAAaAEAACNVUwDMFAAAEAAAACNHVUlEAAAA3BQAAAgEAAAjQmxvYgAAAAAAAAAC
AAABVx2iCQkPAAAA+iUzABYAAAEAAAA1AAAACgAAAAwAAAAZAAAABAAAAEYAAAACAAAANgAAAA8A
AAAEAAAACAAAAAkAAAAJAAAAAQAAAAUAAAABAAAAAwAAAAMAAAACAAAAAACGCgEAAAAAAAoAeAFO
AQoArAGOAQYAvAG1AQoAFAJOAQYAkgK1AQoAFAPqAgYASgM5AwYAdwNiAw4A3gPJAxIAXQQ0BAYA
fgS1AQ4AsQSbBA4AygSbBA4A9wTfBAYAIQUOBQoAYAU5BQoAeAUTAA4ArQWQBQYA4gXCBQYAAAa1
AQYAJAa1AQoAPQYTAAYAgQZiBgYApwaVBgYAzga9BgYA4QYOBQYA/ga1AQYACAe1ARIAEQc0BBYA
lQd1BxYArQd1BwoAvwc5BRIA1wc0BAoA9gcTAAoAAggTAAYAGwi1AQYAMwi1AQoAQwg5BQYAXwiV
BgYAeQiVBgYAqwi1ARIAwQg0BAYAKgnCBQYASgnCBQYAggloCQYAmwmVBgYAuAliBgYAxgmVBgYA
4QmVBgYA/AmVBgYAFQqVBgYALgqVBgYASwqVBgAAAAABAAAAAAABAAEAAAAAACkANwAFAAEAAQAA
AAAAbQA3AAkAAQACAAABEAB4ADcADQABAAMABQEAAIIAAAANAAUACAAFAQAAkAAAAA0ABQAPAAAA
AACrALcADQAGABEAAAEQAPcAAgElAAgAFQABAAAANQECASkACgAYAAIBAABAAQAALQAKABoAMQDX
ASAAMQAAAi0AMQAiAjoAMQBHAkcAIQAjA5AAEQBaA50AEQCDA6EAEQD2A78AEQD+A8MABgaDBNkA
VoCLBNwAVoCTBNwAUCAAAAAABhiIARMAAQBYIAAAAAAGGIgBEwABAGAgAAAAABEYwwEXAAEAjCAA
AAAAEwjKARsAAQCkIAAAAAATCPABKAABALwgAAAAABMIGQI1AAEA1CAAAAAAEwg3AkIAAQDsIAAA
AABGAn0CYwABAAghAAAAAEYChgJoAAIAHCEAAAAAgwCXAmwAAgA0IQAAAABGAp8CcQACAEghAAAA
ABEAqAJ4AAIAZCEAAAAAAQDGAoAAAwCAIQAAAAAGGIgBEwAEAIghAAAAAAMI2gKLAAQAvCEAAAAA
BhiIARMABADQIQAAAAADGIgBEwAEANghAAAAABYIjwOlAAQAFCIAAAAAFgijA6oABAAoIgAAAAAW
CK8DrwAEADAiAAAAABEYwwEXAAUARCIAAAAABhiIARMABQBMIgAAAAAWCAsExgAFAKgiAAAAAAYY
iAETAAUAsCIAAAAABgB5BBMABQAAAAEAhAIAAAEAvQIAAAEAvQIAAAEAuwMJAIgBEwBhAIgB6gBx
AIgB+QARAIgBEwB5AIgBEwAkAIgBEwAsAIgBEwA0AIgBEwA8AIgBEwAkANoCiwAsANoCiwA0ANoC
iwA8ANoCiwCBAIgBEwCJAIgBEwCRAIgBSAGZAPEFkwEZAH0CYwAZAIYCaAApABIGoAEZAJ8CcQCp
AC4GsAEZAIgBEwCxAIgBwAFEACMDkABMAAsEiwBMAFgGPQJMAIgBEwC5AIgBTAIpALAGVwI5AIgB
XAJJAIgBEwDJANYGeALJANwGeALRAIgBEwBRAIgBEwBRACMHggLpACsHhwLhADoHjALhAEIHaADh
AE0HaADpAJ8HkQLxALYHlgL5AAsEnAIBAckHoALpAOsHpwIRAQwIrQIZARAIcQAhASIIswIJASkI
ugIpATsIwwLhAJ8CcQAxAU8IyALZAGoIzgJBAYQIcQDZAI0IcQAxAZkIFwBJAYgBTAJRAYgBEwBZ
AYgBhwJhAYgBEwBpAYgBSAFxAYgBSAF5AYgBSAGBAYgBSAGJAYgBSAGRAYgBSAGZAYgBSAGhAYgB
SAGpAYgBSAEIACwA4AAIADAA5QApAIMAYQEuABsCtgMuADMCtgMuABMCiwMuAOsB5wIuAPMBBgMu
AAsCUQIuACsCUQIuAOMB3gIuACMC7gMuAPsBTgMuAAMCWwMuAOsAUQIuANMBhQNAACsA5QBAABMA
8ABDABMA8ABDABsA/wBJAIMAfwFjABsA/wBjABMA8ABpAIMAcgGAACsA5QCDAHMA5QCDAHsA5QCD
ABsA/wCJAIMATQGgACsA5QCjAMMAyAGjABMA8ADAACsA5QDDABMA8ADDAOsAUQLJABMAbwLgACsA
5QDpABMAbwIAASsA5QAAARMA8AAJARsB5QAgASsA5QAgARMA8AAjAdsB5QAjAdMBUQJAASsA5QBA
ARMA8ABgARMA8ABgASsA5QCAASsA5QCgASsA5QDAASsA5QDAARMA8ADgASsA5QAAAhMA8AAAAisA
5QA0ATkBPgFDAZgBnAGnAawBuwG7AUMCYwJqAn0C1AIEAAEABgAFAAcABgAIAAgAAACsAU8AAABl
AlQAAAAUAlkAAABxAl4AAAAtA5gAAABKA7UAAADBA7oAAAC7A8sAAgAEAAMAAgAFAAUAAgAGAAcA
AgAHAAkAAgAPAAsAAgASAA0AAgATAA8AAQAUAA8AAgAXABEAdQB1AIgAGAEfASYBLQEqAjECBIAA
AAEAAAAAAAAAAAAAAAAAYgoAAAQAAAAAAAAAAAAAAAEACgAAAAAACgAAAAAAAAAAAAAACgATAAAA
AAAEAAAAAAAAAAAAAAABALUBAAAAAAsAAAAAAAAAAAAAANAAFQQAAAAACwAAAAAAAAAAAAAA0ABW
BwAAAAAAAAAAAQAAAOMIAAAFAAQABgAEAAoACQAAABAADAC7AgAAEAAZALsCAAAAABsAuwItALYB
LQA4AgAAADxNb2R1bGU+AG1zY29ybGliAE1pY3Jvc29mdC5WaXN1YWxCYXNpYwBNeUFwcGxpY2F0
aW9uAFNjcmlwdFRhc2tfYzUxYmRhZDVkNzM2NDkyZGJkNmRjNjdjZDNmMDA2MTQudmJwcm9qLk15
AE15Q29tcHV0ZXIATXlQcm9qZWN0AE15V2ViU2VydmljZXMAVGhyZWFkU2FmZU9iamVjdFByb3Zp
ZGVyYDEATXlSZXNvdXJjZXMAU2NyaXB0VGFza19jNTFiZGFkNWQ3MzY0OTJkYmQ2ZGM2N2NkM2Yw
MDYxNC52YnByb2ouTXkuUmVzb3VyY2VzAE15U2V0dGluZ3MAU2NyaXB0VGFza19jNTFiZGFkNWQ3
MzY0OTJkYmQ2ZGM2N2NkM2YwMDYxNC52YnByb2oAU2NyaXB0TWFpbgBTY3JpcHRSZXN1bHRzAE1p
Y3Jvc29mdC5WaXN1YWxCYXNpYy5BcHBsaWNhdGlvblNlcnZpY2VzAEFwcGxpY2F0aW9uQmFzZQAu
Y3RvcgBNaWNyb3NvZnQuVmlzdWFsQmFzaWMuRGV2aWNlcwBDb21wdXRlcgBTeXN0ZW0AT2JqZWN0
AC5jY3RvcgBnZXRfQ29tcHV0ZXIAbV9Db21wdXRlck9iamVjdFByb3ZpZGVyAGdldF9BcHBsaWNh
dGlvbgBtX0FwcE9iamVjdFByb3ZpZGVyAFVzZXIAZ2V0X1VzZXIAbV9Vc2VyT2JqZWN0UHJvdmlk
ZXIAZ2V0X1dlYlNlcnZpY2VzAG1fTXlXZWJTZXJ2aWNlc09iamVjdFByb3ZpZGVyAEFwcGxpY2F0
aW9uAFdlYlNlcnZpY2VzAEVxdWFscwBvAEdldEhhc2hDb2RlAFR5cGUAR2V0VHlwZQBUb1N0cmlu
ZwBDcmVhdGVfX0luc3RhbmNlX18AVABpbnN0YW5jZQBEaXNwb3NlX19JbnN0YW5jZV9fAGdldF9H
ZXRJbnN0YW5jZQBNaWNyb3NvZnQuVmlzdWFsQmFzaWMuTXlTZXJ2aWNlcy5JbnRlcm5hbABDb250
ZXh0VmFsdWVgMQBtX0NvbnRleHQAR2V0SW5zdGFuY2UAU3lzdGVtLlJlc291cmNlcwBSZXNvdXJj
ZU1hbmFnZXIAX3Jlc01ncgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwBfcmVzQ3Vs
dHVyZQBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAFZhbHVlAEN1
bHR1cmUAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAbV9WYWx1
ZQBtX1N5bmNPYmplY3QAZ2V0X1ZhbHVlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBN
aWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFZTVEFSVFNjcmlwdE9iamVj
dE1vZGVsQmFzZQBNYWluAEVudW0AdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAU3lzdGVtLkNvbXBv
bmVudE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBT
eXN0ZW0uQ29kZURvbS5Db21waWxlcgBHZW5lcmF0ZWRDb2RlQXR0cmlidXRlAFN5c3RlbS5EaWFn
bm9zdGljcwBEZWJ1Z2dlckhpZGRlbkF0dHJpYnV0ZQBNaWNyb3NvZnQuVmlzdWFsQmFzaWMuQ29t
cGlsZXJTZXJ2aWNlcwBTdGFuZGFyZE1vZHVsZUF0dHJpYnV0ZQBIaWRlTW9kdWxlTmFtZUF0dHJp
YnV0ZQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwuRGVzaWduAEhlbHBLZXl3b3JkQXR0cmlidXRlAFN5
c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAUnVudGltZUhlbHBlcnMAR2V0T2JqZWN0VmFs
dWUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQWN0aXZhdG9yAENyZWF0ZUlu
c3RhbmNlAE15R3JvdXBDb2xsZWN0aW9uQXR0cmlidXRlAHNldF9WYWx1ZQBTeXN0ZW0uUnVudGlt
ZS5JbnRlcm9wU2VydmljZXMAQ29tVmlzaWJsZUF0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBB
c3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLlRocmVhZGluZwBNb25pdG9yAEVudGVyAEV4aXQA
RGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBFeGNlcHRpb24ARGF0ZVRpbWUAU2NyaXB0T2Jq
ZWN0TW9kZWwAZ2V0X0R0cwBzZXRfVGFza1Jlc3VsdABnZXRfTm93AGdldF9NaW51dGUAZ2V0X0hv
dXIATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRz
LlJ1bnRpbWUAVmFyaWFibGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0AT3BlcmF0
b3JzAENvbXBhcmVTdHJpbmcARXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAEluZm9ybWF0
aW9uAEVyck9iamVjdABFcnIAZ2V0X1NvdXJjZQBTdHJpbmcAQ29uY2F0AEZpcmVFcnJvcgBDb252
ZXJ0AFRvSW50MzIAUHJvamVjdERhdGEAU2V0UHJvamVjdEVycm9yAE1ldGhvZEJhc2UAZ2V0X1Rh
cmdldFNpdGUATWVtYmVySW5mbwBnZXRfTmFtZQBnZXRfTWVzc2FnZQBDbGVhclByb2plY3RFcnJv
cgBDTFNDb21wbGlhbnRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRl
AFNjcmlwdFRhc2tfYzUxYmRhZDVkNzM2NDkyZGJkNmRjNjdjZDNmMDA2MTQudmJwcm9qLlJlc291
cmNlcy5yZXNvdXJjZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29t
cGF0aWJpbGl0eUF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1l
d29ya0F0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEd1aWRBdHRyaWJ1dGUA
QXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNz
ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseURl
c2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAU1RfMzZjZGI0YzIzYjk3
NDA4MmI5MzVlMjYwMWY1MWY1MzEAU1RfMzZjZGI0YzIzYjk3NDA4MmI5MzVlMjYwMWY1MWY1MzEu
ZGxsAAAAADFNAHkALgBSAGUAcwBvAHUAcgBjAGUAcwAuAE0AeQBSAGUAcwBvAHUAcgBjAGUAcwAA
I1AAYQBjAGsAYQBnAGUARQB4AGkAcwB0AHMARgBsAGEAZwAABU4AbwAAG1AAYQBjAGsAYQBnAGUA
UABhAHQAaAA6ACAAADNFAHgAdAByAGEAYwB0AFAAYQBjAGsAYQBnAGUAUABhAHQAaABBAG4AZABO
AGEAbQBlAAA5IABpAHMAIABuAG8AdAAgAHYAYQBsAGkAZAAgAG8AbgAgAHQAaABpAHMAIABzAGUA
cgB2AGUAcgAAAQAnQQBjAGMAZQBzAHMAVwBpAG4AZABvAHcARQBuAGQATQBpAG4AcwAAJUUAeAB0
AHIAYQBjAHQAIABTAHQAYQByAHQAVABpAG0AZQAgAAAvIABpAHMAIABPAHUAdABzAGkAZABlACAA
TABvAGEAZAAgAFcAaQBuAGQAbwB3AAAANPjzilKZZkWps2C1DHdADwAIt3pcVhk04IkIsD9ffxHV
CjoDIAABAwAAAQQAABIMBwYVEhgBEgwEAAASCAcGFRIYARIIBAAAEhEHBhUSGAESEQQAABIUBwYV
EhgBEhQECAASDAQIABIIBAgAEhEECAASFAQgAQIcAyAACAQgABIVAyAADgIeAAcQAQEeAB4ABzAB
AQEQHgACEwAEIAATAAcGFRIZARMABCgAEwADBhIdAwYSIQQAABIdBAAAEiEFAAEBEiEECAASHQQI
ABIhAwYSIAIGHAQAABIgBAgAEiAIiYRdzYCAzJECBggDBhEoBAAAAAAEAQAAAAUgAQERNQgBAAEA
AAAAAAUgAgEODhgBAApNeVRlbXBsYXRlCDEwLjAuMC4wAAAGFRIYARIMBhUSGAESCAYVEhgBEhEG
FRIYARIUBAcBEgwEBwESCAQHARIRBAcBEhQEIAEBDhMBAA5NeS5XZWJTZXJ2aWNlcwAAEAEAC015
LkNvbXB1dGVyAAAMAQAHTXkuVXNlcgAAEwEADk15LkFwcGxpY2F0aW9uAAAEAAEcHAMHAQIDBwEI
BgABEhURUQQHARIVAwcBDgUQAQAeAAQKAR4ABAcBHgAHIAQBDg4ODmEBADRTeXN0ZW0uV2ViLlNl
cnZpY2VzLlByb3RvY29scy5Tb2FwSHR0cENsaWVudFByb3RvY29sEkNyZWF0ZV9fSW5zdGFuY2Vf
XxNEaXNwb3NlX19JbnN0YW5jZV9fAAAABhUSGAETAAYVEhkBEwAECgETAAUgAQETAAgHAxMAEwAT
AAQgAQECBQEAAAAABCAAEmEGIAIBDhJhBgcCEh0SHQQHARIhCAEAAgAAAAAABAABARwEBwESIAQg
ABJ1BCABAQgEAAARcQQgABJ5BSABEn0cAyAAHAYAAwgODgIFIAASgIUFAAASgI0GAAMODg4OCCAF
AggODg4IBAABCBwFAAEBEm0FIAASgJ0JBwQIEm0RcRFxCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9u
RXhjZXB0aW9uVGhyb3dzAUcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3
b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNAwBAAcxLjAuMC4wAAApAQAkNWQ0ZjYyYjMt
NzA4Yi00ZGRjLTliNWQtODRiN2JkMzE2ZjQwAAAFAQABAAAqAQAlQ29weXJpZ2h0IEAgQnJpZ2h0
c3RhciBMb2dpc3RpY3MgMjAwOQAANwEAMlNjcmlwdFRhc2tfYzUxYmRhZDVkNzM2NDkyZGJkNmRj
NjdjZDNmMDA2MTQudmJwcm9qAAAZAQAUQnJpZ2h0c3RhciBMb2dpc3RpY3MAAPQ9AAAAAAAAAAAA
AA4+AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPgAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1z
Y29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AAA0BAAAAAAAAAAAAAA0BDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAElAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAcAMAAAEAMAAwADAAMAAwADQA
YgAwAAAATAAVAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAABCAHIAaQBnAGgAdABzAHQAYQBy
ACAATABvAGcAaQBzAHQAaQBjAHMAAAAAAJAAMwABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkA
bwBuAAAAAABTAGMAcgBpAHAAdABUAGEAcwBrAF8AYwA1ADEAYgBkAGEAZAA1AGQANwAzADYANAA5
ADIAZABiAGQANgBkAGMANgA3AGMAZAAzAGYAMAAwADYAMQA0AC4AdgBiAHAAcgBvAGoAAAAAADAA
CAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAAKAABAEkAbgB0
AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMwA2AGMAZABiADQAYwAyADMAYgA5ADcANAAwADgA
MgBiADkAMwA1AGUAMgA2ADAAMQBmADUAMQBmADUAMwAxAC4AZABsAGwAAABwACYAAQBMAGUAZwBh
AGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABCAHIAaQBnAGgA
dABzAHQAYQByACAATABvAGcAaQBzAHQAaQBjAHMAIAAyADAAMAA5AAAAeAAoAAEATwByAGkAZwBp
AG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADMANgBjAGQAYgA0AGMAMgAzAGIAOQA3ADQA
MAA4ADIAYgA5ADMANQBlADIANgAwADEAZgA1ADEAZgA1ADMAMQAuAGQAbABsAAAAiAAzAAEAUABy
AG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAGMAcgBpAHAAdABUAGEAcwBrAF8AYwA1ADEAYgBkAGEA
ZAA1AGQANwAzADYANAA5ADIAZABiAGQANgBkAGMANgA3AGMAZAAzAGYAMAAwADYAMQA0AC4AdgBi
AHAAcgBvAGoAAAAAADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
MAAuADAAAAA4AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAw
AC4AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAID4AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
                    </ScriptProject>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Derive Package Path if it exists"
                  DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{4af64e1f-8119-404b-b980-2d0ed28c180d}"
                  DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Derive Package Path if it exists"
                  DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
                  DTS:ThreadHint="2">
                  <DTS:Variables />
                  <DTS:LoggingOptions
                    DTS:FilterKind="0" />
                  <DTS:PropertyExpression
                    DTS:Name="SqlStatementSource">"spCheckSsisPath '" +   @[User::ExtractPackagePathAndName] + "'"</DTS:PropertyExpression>
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{C2817111-D0E8-4039-882F-A0B2BE4501FF}"
                      SQLTask:SqlStatementSource="spCheckSsisPath '\UAT\ETL-RegionalReporting\ExtractExcelMasterDataRange'"
                      SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ResultBinding
                        SQLTask:ResultName="0"
                        SQLTask:DtsVariableName="User::DerivedPathAndName" />
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Execute Extract Package"
                  DTS:CreationName="SSIS.ExecutePackageTask.3"
                  DTS:Description="Execute Package Task"
                  DTS:DTSID="{40d049d8-c83c-4adf-90c1-6de477413e53}"
                  DTS:ExecutableType="SSIS.ExecutePackageTask.3"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Execute Extract Package"
                  DTS:TaskContact="Executes DTS packages;Microsoft Corporation; Microsoft SQL Server v9; (C) 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:Variables />
                  <DTS:LoggingOptions
                    DTS:FilterKind="0" />
                  <DTS:PropertyExpression
                    DTS:Name="PackageName">@[User::ExtractPackagePathAndName]</DTS:PropertyExpression>
                  <DTS:ObjectData>
                    <ExecutePackageTask>
                      <PackageName>\UAT\ETL-RegionalReporting\ExtractExcelMasterDataRange</PackageName>
                      <Connection>{C2817111-D0E8-4039-882F-A0B2BE4501FF}</Connection>
                    </ExecutePackageTask>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable
                  DTS:refId="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Log Package Execution"
                  DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                  DTS:Description="Execute SQL Task"
                  DTS:DTSID="{87086d28-6653-4fb4-971a-f0107da2d2b0}"
                  DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Log Package Execution"
                  DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
                  DTS:ThreadHint="2">
                  <DTS:Variables />
                  <DTS:LoggingOptions
                    DTS:FilterKind="0" />
                  <DTS:PropertyExpression
                    DTS:Name="SqlStatementSource">"[spInsertExtractExecutionLog] 
@ExtractJobID= " + (DT_STR, 20, 1252)@[User::ExtractJobID] + ",
@StartTime = '" + @[User::StartTime] + "',
@ManagerGUID = '" + @[User::ManagerGUID] + "',
@SuccessFlag = 1,
@CompletedFlag = 1,
@MessageSource ='Log ExtractExecution Completed',
@Message = '',
@RowsExtracted =0,
@ExtractStartTime = '" + @[User::ExtractStartTime]   + "',
@ExtractEndTime = '" + @[User::ExtractEndTime]  + "',
@NextExtractStartTime = '" + (@[User::NextExtractStartTime]  &gt; @[User::ExtractStartTime] ? @[User::NextExtractStartTime]  : @[User::ExtractStartTime] )  + "',
@ExtractPackagePathAndName = '" +  @[User::ExtractPackagePathAndName]  + "',
@ExtractControlID = " + (DT_STR, 20, 1252)@[User::ExtractControlID]</DTS:PropertyExpression>
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData
                      SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                      SQLTask:SqlStatementSource="[spInsertExtractExecutionLog] &#xA;@ExtractJobID= -1002,&#xA;@StartTime = '1900-01-01 00:00:00',&#xA;@ManagerGUID = '7D3FDB0F-14CC-4808-9D5E-003EE9AB8015',&#xA;@SuccessFlag = 1,&#xA;@CompletedFlag = 1,&#xA;@MessageSource ='Log ExtractExecution Completed',&#xA;@Message = '',&#xA;@RowsExtracted =0,&#xA;@ExtractStartTime = '1900-01-01 00:00:00',&#xA;@ExtractEndTime = '2014-08-06 17:59:57.193',&#xA;@NextExtractStartTime = '1900-01-01 00:00:00',&#xA;@ExtractPackagePathAndName = '\UAT\ETL-RegionalReporting\ExtractExcelMasterDataRange',&#xA;@ExtractControlID = 1474" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PrecedenceConstraints>
                <DTS:PrecedenceConstraint
                  DTS:refId="Package\Sequence Container\Alternative Source to Destination\Sequence Container.PrecedenceConstraints[Constraint 2]"
                  DTS:CreationName=""
                  DTS:DTSID="{a96e1da2-d9da-4644-893e-870ed068fb96}"
                  DTS:From="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Derive Package Path if it exists"
                  DTS:LogicalAnd="True"
                  DTS:ObjectName="Constraint 2"
                  DTS:To="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Check that CurrentTime &lt; AccessWindowEndMins and PackagePath is correct" />
                <DTS:PrecedenceConstraint
                  DTS:refId="Package\Sequence Container\Alternative Source to Destination\Sequence Container.PrecedenceConstraints[Constraint 3]"
                  DTS:CreationName=""
                  DTS:DTSID="{eb72ecb7-4677-480f-8442-2989578f8c01}"
                  DTS:From="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Check that CurrentTime &lt; AccessWindowEndMins and PackagePath is correct"
                  DTS:LogicalAnd="True"
                  DTS:ObjectName="Constraint 3"
                  DTS:To="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Execute Extract Package" />
                <DTS:PrecedenceConstraint
                  DTS:refId="Package\Sequence Container\Alternative Source to Destination\Sequence Container.PrecedenceConstraints[Constraint 4]"
                  DTS:CreationName=""
                  DTS:DTSID="{06777059-9baa-44f3-a522-97eee89445be}"
                  DTS:From="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Execute Extract Package"
                  DTS:LogicalAnd="True"
                  DTS:ObjectName="Constraint 4"
                  DTS:To="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Log Package Execution" />
              </DTS:PrecedenceConstraints>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{abbcd627-9b9e-467f-a3d3-3f32aa41febf}"
              DTS:From="Package\Sequence Container\Alternative Source to Destination\Get Dest Sql"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container\Alternative Source to Destination\Do Nothing 1" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 10]"
              DTS:CreationName=""
              DTS:DTSID="{7e70d5c4-89f4-470c-b71b-d8c769ffb784}"
              DTS:EvalOp="3"
              DTS:Expression="@SourceTypeName == &quot;EXCEL&quot; || @SourceTypeName == &quot;FILE&quot;"
              DTS:From="Package\Sequence Container\Alternative Source to Destination\Do Nothing 2"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 10"
              DTS:To="Package\Sequence Container\Alternative Source to Destination\Get Source File" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 11]"
              DTS:CreationName=""
              DTS:DTSID="{df741920-6cc1-4bd3-b13a-fd2512079ba9}"
              DTS:From="Package\Sequence Container\Alternative Source to Destination\Get Source File"
              DTS:ObjectName="Constraint 11"
              DTS:To="Package\Sequence Container\Alternative Source to Destination\Do Nothing" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 12]"
              DTS:CreationName=""
              DTS:DTSID="{abd5d30c-7960-49b9-baec-03b8cdedfacf}"
              DTS:EvalOp="3"
              DTS:Expression="@DestinationSourceTypeName == &quot;ODBC&quot; || @DestinationSourceTypeName == &quot;OLEDB&quot;"
              DTS:From="Package\Sequence Container\Alternative Source to Destination\Do Nothing 2"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 12"
              DTS:To="Package\Sequence Container\Alternative Source to Destination\Get Dest Sql" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 13]"
              DTS:CreationName=""
              DTS:DTSID="{e004deef-1289-4148-8619-e8edbbd21a13}"
              DTS:From="Package\Sequence Container\Alternative Source to Destination\Do Nothing 1"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 13"
              DTS:To="Package\Sequence Container\Alternative Source to Destination\Sequence Container" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 14]"
              DTS:CreationName=""
              DTS:DTSID="{748710b0-792f-4c59-b045-4d83480bc0c8}"
              DTS:From="Package\Sequence Container\Alternative Source to Destination\Do Nothing"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 14"
              DTS:To="Package\Sequence Container\Alternative Source to Destination\Sequence Container" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 5]"
              DTS:CreationName=""
              DTS:DTSID="{9d6ffd71-eda0-4ae9-b5f2-585a759bee0f}"
              DTS:EvalOp="3"
              DTS:Expression="@DestinationSourceTypeName == &quot;EXCEL&quot; || @DestinationSourceTypeName == &quot;FILE&quot;"
              DTS:From="Package\Sequence Container\Alternative Source to Destination\Do Nothing 2"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 5"
              DTS:To="Package\Sequence Container\Alternative Source to Destination\Get Dest File" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 6]"
              DTS:CreationName=""
              DTS:DTSID="{8a521e00-bccc-4e2d-b0e9-e856fad28c63}"
              DTS:From="Package\Sequence Container\Alternative Source to Destination\Get Dest File"
              DTS:ObjectName="Constraint 6"
              DTS:To="Package\Sequence Container\Alternative Source to Destination\Do Nothing 1" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 8]"
              DTS:CreationName=""
              DTS:DTSID="{a186141f-1323-4261-9eca-f143e78710cb}"
              DTS:EvalOp="3"
              DTS:Expression="@SourceTypeName == &quot;ODBC&quot; || @SourceTypeName == &quot;OLEDB&quot;"
              DTS:From="Package\Sequence Container\Alternative Source to Destination\Do Nothing 2"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 8"
              DTS:To="Package\Sequence Container\Alternative Source to Destination\Get Source Sql" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 9]"
              DTS:CreationName=""
              DTS:DTSID="{dfbec3bb-9720-43dd-aefd-c77b5e6f8c02}"
              DTS:From="Package\Sequence Container\Alternative Source to Destination\Get Source Sql"
              DTS:ObjectName="Constraint 9"
              DTS:To="Package\Sequence Container\Alternative Source to Destination\Do Nothing" />
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Execute SQL Task"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{a551b0e5-4723-40ff-918e-13d222c917a9}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Execute SQL Task"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">"EXEC spGetExtractExecutionSourceDestType " +  (DT_WSTR, 10) @[User::ExtractControlID]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
              SQLTask:SqlStatementSource="EXEC spGetExtractExecutionSourceDestType 1474"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="DestinationSourceTypeName"
                SQLTask:DtsVariableName="User::DestinationSourceTypeName" />
              <SQLTask:ResultBinding
                SQLTask:ResultName="SourceTypeName"
                SQLTask:DtsVariableName="User::SourceTypeName" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{9dfe445e-9313-43c2-b847-52bddbaf7005}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="Extract Execution Dynamic Tasks SQL to SQL">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Bulk Upload"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Bulk Upload"
              DTS:DTSID="{40d3c888-5d36-48ee-a429-68061812dd5f}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Bulk Upload"
              DTS:ThreadHint="10">
              <DTS:Variables />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_1487b85113c4470ba87705d676bfcba5"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp">
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptHelper.cs"
                    Encoding="UTF8"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
//This code is copied to:
//Packages_Core.StagingManagerDynamic
//Packages_Core.StagingExecutionDynamic
//and StagingHelper
//The problem is referencing the dll on all servers used. 
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;
using Oracle.DataAccess.Client;

namespace DWReferenceHelper
{
    public class ScriptHelper
    {

        #region Properties
        public int RowsInserted { get; set; }
        public int RowsDeleted { get; set; }
        public int RowsUpdated { get; set; }
        public int RowsStaged { get; set; }
        public string SuiteFolderLocation { get; set; }
        public string unProcessedFileFullName { get; set; }
        public string InProcessedFileFullName { get; set; }
        public Dictionary<int, ProcessInformation> ProcessControl = new Dictionary<int, ProcessInformation>();
        public int SSISPackagesCount = 0;

        public List<string> ORACLE = new List<string> { "OLEDB_ORACLE", "ODBC_ORACLE" };
        public List<string> SQL = new List<string> { "OLEDB", "ODBC", "OLEDB_SQL", "ODBC_SQL" };

        #endregion

        #region Staging Manager

        /// <summary>
        /// Staging Manager Process Files Task
        /// Checks if any files are to be loaded or sql extracts and run them
        /// </summary>
        /// <param name="values"></param>
        public void MainStagingManagerProcessFiles(Dictionary<string, object> values)
        {
            string Suite = values["Suite"].ToString();
            string StagingExecutionLocation = values["StagingExecutionLocation"].ToString();
            string Server = values["Server"].ToString();
            string FileNameSeparator = values["FileNameSeparator"].ToString();
            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string ExecutionInstanceGUID = values["ExecutionInstanceGUID"].ToString();
            string StartTime = values["StartTime"].ToString();

            //Process Files

            var ds = GetData(ConnStr_ETLReference, "[dbo].[spGetStagingManagerFolderLocation] @SuiteName = '" + Suite + "'");



            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                string FolderLocationUprocessed = Path.Combine(dr["BaseFolder"].ToString(),
                                                               dr["Environment"].ToString(),
                                                               dr["SuiteName"].ToString(),
                                                               dr["Folder"].ToString());
                var files = GetFiles(FolderLocationUprocessed);

                if (files != null && files.Count > 0)
                {
                    foreach (int stagingControlID in GetStagingControlIDs(ConnStr_ETLReference, files, Suite, FileNameSeparator))
                    {
                        ds = GetData(ConnStr_ETLReference, "SELECT RunAs32Bit FROM StagingControl WHERE StagingControlID = " + stagingControlID);
                        bool runAs32Bit = Convert.ToBoolean(ds.Tables[0].Rows[0]["RunAs32Bit"]);

                        string dtexec = GetDtexecLocation(runAs32Bit, ConnStr_ETLReference);


                        string ExecutionCommand = CreateStagingExecutionCommand(StagingExecutionLocation, Server, stagingControlID, ExecutionInstanceGUID, StartTime, ConnStr_ETLReference);

                        StagingLogMessage(ConnStr_ETLReference,
                            -1,
                            1,
                            0,
                            "Log Manager Starting StagingExecution File Extract",
                            dtexec + " " + ExecutionCommand,
                            0,
                            0,
                            0,
                            0,
                            "",
                            StartTime,
                            "",
                            "",
                            stagingControlID,
                            ExecutionInstanceGUID);

                        StartSSISPackage(ExecutionCommand, stagingControlID, runAs32Bit, ConnStr_ETLReference);
                    }
                }
            }
            //Process Data Extracts
            foreach (int stagingControlID in GetNextRunDateTimeStagingControlID(ConnStr_ETLReference, Suite))
            {
                ds = GetData(ConnStr_ETLReference, "SELECT RunAs32Bit FROM StagingControl WHERE StagingControlID = " + stagingControlID);
                bool runAs32Bit = Convert.ToBoolean(ds.Tables[0].Rows[0]["RunAs32Bit"]);

                string dtexec = GetDtexecLocation(runAs32Bit, ConnStr_ETLReference);

                string ExecutionCommand = CreateStagingExecutionCommand(StagingExecutionLocation, Server, stagingControlID, ExecutionInstanceGUID,
                    StartTime, ConnStr_ETLReference);

                StagingLogMessage(ConnStr_ETLReference,
                    -1,
                    1,
                    0,
                    "Log Manager Starting StagingExecution Data Extracts",
                    dtexec + " " + ExecutionCommand,
                    0,
                    0,
                    0,
                    0,
                    "",
                    StartTime,
                    "",
                    "",
                    stagingControlID,
                    ExecutionInstanceGUID);

                StartSSISPackage(ExecutionCommand, stagingControlID, false, ConnStr_ETLReference);
            }
            while (0 < SSISPackagesCount)
            {
                //Check every 5 secs to see if the packages have completed.
                Thread.Sleep(5000);
            }

            foreach (var value in ProcessControl.Values)
            {
                if (value.ExitCode != 0)
                {
                    StagingLogMessage(ConnStr_ETLReference,
                        -1,
                        0,
                        1,
                        "Log Manager Error Log for StagingExecutionDynamic",
                        value.OutputMessage,
                        0,
                        0,
                        0,
                        0,
                        "",
                        StartTime,
                        "",
                        "",
                        value.ControlID,
                        ExecutionInstanceGUID);
                }
            }

            StagingLogMessage(ConnStr_ETLReference,
                   -1,
                   1,
                   1,
                   "Log Manager Complete",
                   "",
                   0,
                   0,
                   0,
                   0,
                   "",
                   StartTime,
                   "",
                   "",
                   -1,
                   ExecutionInstanceGUID);
        }

        /// <summary>
        /// Staging Execution Sql BulkUpload
        /// Checks if any sql extracts need to occur and run them
        /// </summary>
        /// <param name="values"></param>
        public void MainStagingExecutionSqlBulkUpload(Dictionary<string, object> values)
        {
            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string ConnStr_Staging = values["ConnStr_Staging"].ToString();
            string ConnStr_Source = values["ConnStr_Source"].ToString();
            int StagingJobID = Convert.ToInt32(values["StagingJobID"]);
            string SourceCmdText = values["SourceCmdText"].ToString();
            string StartTime = values["StartTime"].ToString();
            string ExtractStartTime = values["ExtractStartTime"].ToString();
            string ExtractEndTime = values["ExtractEndTime"].ToString();
            int StagingControlID = Convert.ToInt32(values["StagingControlID"]);
            string ManagerGUID = values["ManagerGUID"].ToString();
            int BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            string StagingTable = values["StagingTable"].ToString();
            string SourceQueryMapping = values["SourceQueryMapping"].ToString();
            bool bTruncateStagingTable = Convert.ToBoolean(values["TruncateStagingTable"]);
            string SourceTypeName = values["SourceTypeName"].ToString();

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            checkConnection(ConnStr_Staging);
            dsb.ConnectionString = ConnStr_Staging;
            dsb.Remove("Provider");
            ConnStr_Staging = dsb.ConnectionString + ";Connect Timeout=0";

            checkConnection(ConnStr_Source, SourceTypeName);
            dsb.ConnectionString = ConnStr_Source;
            dsb.Remove("Provider");

            ConnStr_Source = dsb.ConnectionString;
            if (SQL.Contains(SourceTypeName))
            {
                ConnStr_Source += ";Connect Timeout=0";
            }

            StagingLogMessage(ConnStr_ETLReference,
                StagingJobID,
                1,
                0,
                "Log StagingExecution BulkSQL evaluated Source Query",
                SourceCmdText,
                0,
                0,
                0,
                0,
                "",
                StartTime,
                ExtractStartTime,
                ExtractEndTime,
                StagingControlID,
                ManagerGUID);

            TruncateTable(StagingTable, ConnStr_Staging, bTruncateStagingTable);

            int rowsCopied = PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Staging, BulkUploadLoadSize, StagingTable, SourceQueryMapping, SourceTypeName);
            values.Add("rowsCopied", rowsCopied);

        }

        public void MainStagingExecutionFileBulkUpload(Dictionary<string, object> values)
        {

            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string Environment = values["Environment"].ToString();
            string FileNameSeparator = values["FileNameSeparator"].ToString();
            string StagingPackageName = values["StagingPackageName"].ToString();
            string ConnStr_Staging = values["ConnStr_Staging"].ToString();
            string SourceQueryMapping = values["SourceQueryMapping"].ToString();
            char DelimiterChar = Convert.ToChar(values["DelimiterChar"]);
            string Suite = values["Suite"].ToString();
            string FolderBaseLocation = values["FolderBaseLocation"].ToString();
            string StagingTable = values["StagingTable"].ToString();
            string MergeQuery = values["MergeQuery"].ToString();
            bool bHasHeader = Convert.ToBoolean(values["HasHeader"]);
            int BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            string StartTime = values["StartTime"].ToString();
            string FileTimeStampFormat = values["FileTimeStampFormat"].ToString();
            int StagingControlID = Convert.ToInt32(values["StagingControlID"]);
            string ManagerGUID = values["ManagerGUID"].ToString();
            bool bTruncateStagingTable = Convert.ToBoolean(values["TruncateStagingTable"]);

            SuiteFolderLocation = GetSuiteFolderLocation(FolderBaseLocation, Environment, Suite);

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            checkConnection(ConnStr_Staging);
            dsb.ConnectionString = ConnStr_Staging;
            dsb.Remove("Provider");
            ConnStr_Staging = dsb.ConnectionString + ";Connect Timeout=0";

            List<Mapping> Mappings = SplitMappings(SourceQueryMapping);

            var fileFullNames = GetFiles(Path.Combine(SuiteFolderLocation, "Unprocessed"));
            var OrderFiles = GetOrderFiles(fileFullNames, FileNameSeparator, StagingPackageName, FileTimeStampFormat);

            if (OrderFiles != null)
            {
                foreach (var file in OrderFiles)
                {

                    int StagingJobID = GetStagingJobID(ConnStr_ETLReference);
                    unProcessedFileFullName = file.Value;

                    StagingLogMessage(ConnStr_ETLReference,
                        StagingJobID,
                        1,
                        0,
                        "Log StagingExecution Starting file process.",
                        "",
                        0,
                        0,
                        0,
                        0,
                        unProcessedFileFullName,
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);


                    InProcessedFileFullName = moveFileToInProcess(unProcessedFileFullName, StagingJobID, SuiteFolderLocation);

                    CheckFileHeadersAndColumns(InProcessedFileFullName, SourceQueryMapping, StagingTable, ConnStr_Staging, DelimiterChar);

                    TruncateTable(StagingTable, ConnStr_Staging, bTruncateStagingTable);

                    ProcessFile(StagingJobID, InProcessedFileFullName, ConnStr_Staging, Mappings, BulkUploadLoadSize, StagingTable, SuiteFolderLocation, bHasHeader, DelimiterChar);

                    RowCountStaged(ConnStr_Staging, StagingTable, StagingJobID);

                    MergeData(ConnStr_Staging, MergeQuery, StagingJobID);

                    StagingLogMessage(ConnStr_ETLReference,
                        StagingJobID,
                        1,
                        1,
                        "Log StagingExecution Completed files processed.",
                        "",
                        RowsInserted,
                        RowsDeleted,
                        RowsUpdated,
                        RowsStaged,
                        unProcessedFileFullName,
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);
                }
            }
            else
            {
                StagingLogMessage(ConnStr_ETLReference,
                        -1,
                        1,
                        1,
                        "Log StagingExecution Completed no files found.",
                        "",
                        0,
                        0,
                        0,
                        0,
                        "",
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);
            }

        }

        public string GetPackageName(string fileFullName, string fileNameSeparator)
        {
            string fileName = Path.GetFileName(fileFullName);

            string packageName = fileName.Substring(0, fileName.LastIndexOf(fileNameSeparator));
            return packageName;
        }

        public string GetSuiteFolderLocation(string FolderBaseLocation, string Environment, string Suite)
        {
            return Path.Combine(FolderBaseLocation, Environment, Suite);
        }

        public string CreateStagingExecutionCommand(string StagingExecutionLocation, string Server, int StagingControlID, string ManagerGUID, string StartTime,
            string ConnStr_ETLReference)
        {
            string command = "/SQL \"" + StagingExecutionLocation
                             + "\" /SERVER \"" + Server
                             + "\"" + " /MAXCONCURRENT \" -1 \" /CHECKPOINTING OFF"
                             + " /SET \"\\Package.Variables[StagingControlID].Value\";" + StagingControlID
                             + " /SET \"\\Package.Variables[ManagerGUID].Value\";\"" + ManagerGUID + "\""
                             + " /SET \"\\Package.Variables[User::StartTime].Value\";\"" + StartTime + "\""
                             + " /SET \"\\Package.Variables[ConnStr_ETLReference].Value\";\"\\\"" + ConnStr_ETLReference + "\\\"\"";
            return command;
        }

        public void StartManagerPackageStaging(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            string command = "/SQL \"" + packageLocationlocation
                             + "\" /SERVER \"" + server + "\""
                             + " /CHECKPOINTING OFF"
                             + " /SET \"\\Package.Variables[ConnStr_ETLReference].Value\";\"\\\"" + ConnStr_ETLReference + "\\\"\""
                             + " /REPORTING E";

            StartSSISPackage(command, -1, false, ConnStr_ETLReference);
        }

        public string GetTimeStamp(string fileFullName, string fileNameSeparator)
        {
            string fileName = Path.GetFileName(fileFullName);
            int index = fileName.LastIndexOf(fileNameSeparator);
            string timeStamp = fileName.Substring((fileName.LastIndexOf(fileNameSeparator) + 1), (fileName.Length - 1 - index));
            return Path.GetFileNameWithoutExtension(timeStamp);
        }

        public List<string> GetFiles(string suiteFolderLocation)
        {
            if (Directory.Exists(suiteFolderLocation))
            {
                var files =
                    Directory.GetFiles(suiteFolderLocation, "*.*")
                        .Where(file => file.ToLower().EndsWith("csv")
                                       || file.ToLower().EndsWith("zip")
                                       || file.ToLower().EndsWith("txt"))
                        .ToList();
                return files;
            }
            return null;
        }

        public List<int> GetStagingControlIDs(string ConnStr_ETLReference, List<string> fileFullNames, String suite, string fileNameSeparator)
        {
            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");

            string packages = "";
            foreach (var fileFullName in fileFullNames)
            {
                string packageName = GetPackageName(fileFullName, fileNameSeparator);

                if (!String.IsNullOrEmpty(packages))
                {
                    packages += ", ";
                }
                packages += "''" + packageName + "''";
            }
            if (!String.IsNullOrEmpty(packages))
            {
                string sqlQuery = "EXEC dbo.spGetStagingPackagesFile @SuiteName='" + suite + "', @Packages='" + packages + "' ";

                var ds = GetData(ConnStr_ETLReference, sqlQuery);

                if (ds.Tables.Count > 0)
                {
                    DataTable dtPackages = ds.Tables[0];
                    var query = from r in dtPackages.AsEnumerable()
                                select r.Field<int>("StagingControlID");

                    return query.ToList();

                }
            }

            return null;
        }

        public SortedList<DateTime, String> GetOrderFiles(List<string> fileFullNames, string fileNameSeparator, string PackageName, string fileTimeStampFormat)
        {
            var files = new SortedList<DateTime, String>();
            foreach (var filefullName in fileFullNames)
            {
                if (PackageName == GetPackageName(filefullName, fileNameSeparator))
                {
                    string timeStamp = GetTimeStamp(filefullName, fileNameSeparator);

                    CultureInfo provider = CultureInfo.InvariantCulture;
                    DateTime dt = DateTime.ParseExact(timeStamp, fileTimeStampFormat, provider);

                    files.Add(dt, filefullName);
                }
            }
            if (files.Count > 0)
            {
                return files;
            }
            return null;
        }

        public void RowCountStaged(string ConnStr_Staging, string StagingExtractTable, int StagingJobID)
        {
            var ds = GetData(ConnStr_Staging, "SELECT COUNT(*) AS 'RowsStaged' FROM " + StagingExtractTable + " WHERE StagingJobID = " + StagingJobID);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                RowsStaged = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsStaged"]);
            }
            else
            {
                throw new Exception("RowCountStaged - Failed to return row count");
            }

        }

        public void MergeData(string ConnStr_Staging, string MergeQuery, int StagingJobID)
        {
            var ds = GetData(ConnStr_Staging, "EXEC " + MergeQuery + " @StagingJobID = " + StagingJobID);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                RowsInserted = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsInserted"]);
                RowsDeleted = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsDeleted"]);
                RowsUpdated = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsUpdated"]);
            }
            else
            {
                throw new Exception("MergeData stored proc failed to return row count details");
            }
        }

        public int GetStagingJobID(string ConnStr_ETLReference)
        {
            var ds = GetData(ConnStr_ETLReference, "EXEC dbo.spGetJobID @Type = 'StagingJobID'");

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return Convert.ToInt32(ds.Tables[0].Rows[0]["JobID"]);
            }

            throw new Exception("GetStagingJobID failed to return a StagingJobID");
        }

        public void CleanUpFiles(string unProcessedFileFullName, string InProcessedFileFullName, string SuiteFolderLocation)
        {
            if (String.IsNullOrEmpty(SuiteFolderLocation) == false)
            {
                if (String.IsNullOrEmpty(InProcessedFileFullName) == false && File.Exists(InProcessedFileFullName))
                {
                    string archiveFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(InProcessedFileFullName));
                    if (File.Exists(archiveFileFullName))
                    {
                        File.Delete(archiveFileFullName);
                    }

                    File.Move(InProcessedFileFullName, archiveFileFullName);

                    if (Directory.Exists(Path.GetDirectoryName(InProcessedFileFullName)))
                    {
                        //Todo: Delete files
                        Directory.Delete(Path.GetDirectoryName(InProcessedFileFullName), true);
                    }
                }

                if (String.IsNullOrEmpty(unProcessedFileFullName) == false && File.Exists(unProcessedFileFullName))
                {
                    string archiveFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName));
                    if (File.Exists(archiveFileFullName))
                    {
                        //Todo: Delete files
                        File.Delete(archiveFileFullName);
                    }

                    File.Move(unProcessedFileFullName, Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName)));
                }
            }
        }

        public int PerformSQLBulkCopy(string ConnStr_Source, string SourceCmdText, string ConnStr_Destination,
            int BulkUploadLoadSize, string StagingTable, string SourceQueryMapping, string SourceTypeName)
        {
            List<Mapping> Mappings = SplitMappings(SourceQueryMapping);

            return PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Destination, BulkUploadLoadSize,
                StagingTable, Mappings, SourceTypeName);
        }


        public int PerformFileBulkCopy(string SourceCmdText, string ConnStr_Destination, string FileFullName,
            int BulkUploadLoadSize, string DestinationTable, List<Mapping> Mappings, bool HasHeader, char DelimiterChar)
        {

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_Destination;
            dsb.Remove("Provider");
            ConnStr_Destination = dsb.ConnectionString + ";Connect Timeout=0";

            CreateShemaIniFile(FileFullName, Mappings, HasHeader, DelimiterChar);

            var bulkCopy = new SqlBulkCopy(ConnStr_Destination, SqlBulkCopyOptions.KeepIdentity);

            bulkCopy.BatchSize = BulkUploadLoadSize;
            bulkCopy.BulkCopyTimeout = 0;
            bulkCopy.DestinationTableName = DestinationTable;

            BulkCopyMapping(bulkCopy, Mappings);

            var connString = string.Format(
                @"Provider=Microsoft.Jet.OleDb.4.0; Data Source={0};Extended Properties=""Text;HDR=YES;FMT=Delimited""",
                Path.GetDirectoryName(FileFullName)
            );

            using (var conn = new OleDbConnection(connString))
            {
                conn.Open();

                using (OleDbCommand cmd = new OleDbCommand(SourceCmdText, conn))
                {

                    using (OleDbDataReader reader = cmd.ExecuteReader())
                    {
                        bulkCopy.WriteToServer(reader);
                    }
                }
            }
            int result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);

            bulkCopy.Close();
            return result;
        }

        public void ProcessFile(int StagingJobID, string InProcessedFileFullName, string ConnStr_Staging, List<Mapping> Mappings, int BulkUploadLoadSize,
            string StagingExtractTable, string SuiteFolderLocation, bool HasHeader, char DelimiterChar)
        {
            string selectColumns = "";
            foreach (var mapping in Mappings)
            {
                selectColumns += mapping.OledSourceMap + ", ";
            }

            var query = "SELECT " + selectColumns + StagingJobID + " AS [StagingJobID] FROM [" +
                            Path.GetFileName(InProcessedFileFullName) + "]";

            PerformFileBulkCopy(query, ConnStr_Staging, InProcessedFileFullName, BulkUploadLoadSize, StagingExtractTable,
                Mappings, HasHeader, DelimiterChar);

            string archiveFileFullName = Path.Combine(SuiteFolderLocation, "Processed", Path.GetFileName(InProcessedFileFullName));

            if (File.Exists(archiveFileFullName))
            {
                //TODO: Fix deletion
                File.Delete(archiveFileFullName);
            }

            File.Move(InProcessedFileFullName, archiveFileFullName);

            if (Directory.Exists(Path.GetDirectoryName(InProcessedFileFullName)))
            {
                Directory.Delete(Path.GetDirectoryName(InProcessedFileFullName), true);
            }

            // Move zip file into Processed

            if (Path.GetExtension(unProcessedFileFullName).ToLower() == ".zip")
            {
                archiveFileFullName = Path.Combine(SuiteFolderLocation, "Processed", Path.GetFileName(unProcessedFileFullName));

                if (File.Exists(archiveFileFullName))
                {
                    File.Delete(archiveFileFullName);
                }
                File.Move(unProcessedFileFullName, archiveFileFullName);
            }
        }

        /// <summary>
        /// This is used to create the Schema.ini file used by the OleDbConnection. To forece column types
        /// </summary>
        /// <param name="InProcessedFileFullName"></param>
        public void CreateShemaIniFile(string FileFullName, List<Mapping> Mappings, bool HasHeader, char DelimiterChar)
        {
            StringBuilder schema = new StringBuilder();

            schema.AppendLine("[" + Path.GetFileName(FileFullName) + "]");

            if (HasHeader)
            {
                schema.AppendLine("ColNameHeader=True");
            }
            else
            {
                schema.AppendLine("ColNameHeader=False");
            }

            //Delimited Character
            switch (DelimiterChar)
            {
                case ',':
                    schema.AppendLine("Format=CSVDelimited");
                    break;
                case '\t':
                    schema.AppendLine("Format=TabDelimited");
                    break;
                default:
                    schema.AppendLine("Format=Delimited(" + DelimiterChar + ")");
                    break;
            }

            for (int i = 0; i < Mappings.Count; i++)
            {
                schema.AppendLine("col" + (i + 1).ToString() + "=" + Mappings[i].OledSourceMap + " Text");
            }

            string schemaFileName = Path.Combine(Path.GetDirectoryName(FileFullName), "Schema.ini");
            TextWriter tw = new StreamWriter(schemaFileName);
            tw.WriteLine(schema.ToString());
            tw.Close();

        }

        public string moveFileToInProcess(string unProcessedFileFullName, int StagingJobID, string SuiteFolderLocation)
        {
            string InProcessFileFullName = "";
            string InProcessDirectory = Path.Combine(SuiteFolderLocation, "InProcess", Guid.NewGuid().ToString());
            if (Path.GetExtension(unProcessedFileFullName).ToLower() == ".zip")
            {
                var zip = ZipFile.Open(unProcessedFileFullName, ZipArchiveMode.Read);

                string zippedFileName = "";
                if (zip.Entries.Count == 1)
                {
                    zippedFileName = zip.Entries[0].FullName;
                }
                else
                {
                    zip.Dispose();
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "Zip file has more than one file: ");
                }

                if (zippedFileName.Split('.').Count() > 2)
                {
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "file has to many fullstops in the name expected format *.*: ");
                }

                string newTempDir = Path.Combine(SuiteFolderLocation, Guid.NewGuid().ToString());
                Directory.CreateDirectory(newTempDir);
                zip.ExtractToDirectory(newTempDir);
                zip.Dispose();

                string extractedFilePathName = Path.Combine(newTempDir, zippedFileName);

                if (File.Exists(extractedFilePathName))
                {
                    InProcessFileFullName = Path.Combine(InProcessDirectory, StagingJobID.ToString().PadLeft(5, '0') + "_" + zippedFileName);
                    Directory.CreateDirectory(InProcessDirectory);
                    System.IO.File.Move(extractedFilePathName, InProcessFileFullName);
                    Directory.Delete(newTempDir, true);
                }
                else
                {
                    throw new Exception("Unzipped file cannot be found: " + extractedFilePathName);
                }
            }
            else
            {
                if (Path.GetFileName(unProcessedFileFullName).Split('.').Count() > 2)
                {
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "file has to many fullstops in the name expected format *.*: ");
                }

                InProcessFileFullName = Path.Combine(InProcessDirectory, Path.GetFileName(unProcessedFileFullName));
                Directory.CreateDirectory(InProcessDirectory);
                System.IO.File.Move(unProcessedFileFullName, InProcessFileFullName);
            }
            return InProcessFileFullName;
        }

        public string getFailedDir(string SuiteFolderLocation)
        {
            return Path.Combine(SuiteFolderLocation, "Failed");
        }
        public void MoveToUnProcessedToFailedDir(string unProcessedFileFullName, string SuiteFolderLocation, string ErrorMessage)
        {
            string FailedFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName));

            //handle zip files
            if (File.Exists(unProcessedFileFullName))
            {
                if (File.Exists(FailedFileFullName))
                {
                    //Todo:Fix deletion
                    File.Delete(FailedFileFullName);
                }

                File.Move(unProcessedFileFullName, FailedFileFullName);
            }

            throw new Exception(ErrorMessage + unProcessedFileFullName);
        }

        public List<int> GetNextRunDateTimeStagingControlID(string ConnStr_ETLReference, string Suite)
        {
            var ds = GetData(ConnStr_ETLReference, "[dbo].[spGetStagingPackagesSql] '" + Suite + "'");

            if (ds.Tables.Count > 0)
            {
                DataTable dtPackages = ds.Tables[0];
                var query = from r in dtPackages.AsEnumerable()
                            select r.Field<int>("StagingControlID");
                return query.ToList();
            }

            return null;
        }

        public bool CheckFileHeadersAndColumns(string filename, string SourceQueryMapping, string StagingTable, string ConnStr_Staging, char Delimeter)
        {
            var schemaName = string.Empty;
            var tableName = StagingTable;

            if (StagingTable.Split('.').Count() > 1)
            {
                schemaName = StagingTable.Split('.')[0];
                tableName = StagingTable.Split('.')[1];
            }

            var query = "SELECT c.COLUMN_NAME AS column_name FROM INFORMATION_SCHEMA.COLUMNS c WHERE c.TABLE_NAME = '" + tableName + "' " + (schemaName != string.Empty ? " AND  c.TABLE_SCHEMA='" + schemaName + "'" : "");
            var columnsDs = GetData(ConnStr_Staging, query);
            List<string> listColumns = (from DataRow row in columnsDs.Tables[0].Rows select row[0].ToString()).ToList();

            var listHeaderFromFile = ReadFileHeader(filename, Delimeter);

            var Mappings = SplitMappings(SourceQueryMapping);

            // Check File Header fields should be valid fair with sourcequerymapping
            bool isHeaderValid = true;
            foreach (var header in listHeaderFromFile)
            {
                isHeaderValid = Mappings.FirstOrDefault(f => f.SourceMap == header) != null;
                if (!isHeaderValid)
                {
                    throw new Exception("File header field is not existed. File header fields: " + header + " doesn't existed in source query mapping: " + SourceQueryMapping + ". File name: " + filename + ", Staging table: " + StagingTable);
                }
            }

            // Check Columns from table should be valid fair with sourcequerymapping
            bool isColumnValid = true;

            foreach (var mapping in Mappings)
            {
                isColumnValid = listColumns.Contains(mapping.DestinationMap);
                if (!isColumnValid)
                {
                    throw new Exception("Sourcequerymaping is unvalid. Mapping: " + mapping.DestinationMap + " in source query mapping: " + SourceQueryMapping + " does not existed in table: " + StagingTable);
                }
            }

            // Check File Header fields should be in the same order and value as the sourcequerymapping
            if (listHeaderFromFile.Count > Mappings.Count)
            {
                isHeaderValid = false;
            }
            else
            {
                if (listHeaderFromFile.Where((t, i) => t != Mappings[i].SourceMap).Any())
                {
                    isHeaderValid = false;
                    throw new Exception("Wrong header order. File header fields in file: " + filename + " has order: " + GenerateListToString(listHeaderFromFile) + " is not matched to source query mapping: " + SourceQueryMapping);
                }
            }

            return isHeaderValid && isColumnValid;
        }

        public static List<string> ReadFileHeader(string filename, char delimiter)
        {
            string strHeader = string.Empty;
            var file = new StreamReader(filename);
            while ((strHeader = file.ReadLine()) != null)
            {
                break;
            }

            file.Close();
            var listHeader = new List<string>();
            if (!string.IsNullOrEmpty(strHeader))
            {
                string[] headers = strHeader.Split(delimiter);

                listHeader.AddRange(headers);
            }

            return listHeader;
        }

        public void StagingLogMessage(string ConnStr_ETLReference,
                      int StagingJobID,
                      int SuccessFlag,
                      int CompletedFlag,
                      string MessageSource,
                      string Message,
                      int RowsInserted,
                      int RowsDeleted,
                      int RowsUpdated,
                      int RowsStaged,
                      string ActualFileName,
                      string StartTime,
                      string ExtractStartTime,
                      string ExtractEndTime,
                      int StagingControlID,
                      string ManagerGUID)
        {
            string tempMessage = Message.Replace("'", "''");

            string sqlCmdLog = "[spInsertStagingExecutionLog] "
                               + "@StagingJobID = " + StagingJobID + ", "
                               + "@ManagerGUID = '" + ManagerGUID + "', "
                               + "@SuccessFlag = " + SuccessFlag + ", "
                               + "@CompletedFlag = " + CompletedFlag + ", "
                               + "@MessageSource = '" + MessageSource + "', "
                               + "@Message = '" + tempMessage + "', "
                               + "@RowsStaged = " + RowsStaged + ", "
                               + "@RowsInserted = " + RowsInserted + ", "
                               + "@RowsDeleted = " + RowsDeleted + ", "
                               + "@RowsUpdated = " + RowsUpdated + ", "
                               + "@StagingPackagePathAndName = NULL, "
                               + "@ActualFileName = '" + ActualFileName + "', "
                               + "@StartTime = '" + StartTime + "', ";

            if (String.IsNullOrEmpty(ExtractStartTime))
            {
                sqlCmdLog += "@ExtractStartTime = NULL, ";
            }
            else
            {
                sqlCmdLog += "@ExtractStartTime = '" + ExtractStartTime + "', ";
            }

            if (String.IsNullOrEmpty(ExtractStartTime))
            {
                sqlCmdLog += "@ExtractEndTime = NULL, ";
            }
            else
            {
                sqlCmdLog += "@ExtractEndTime = '" + ExtractEndTime + "', ";
            }

            sqlCmdLog += "@StagingControlID = " + StagingControlID;

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");
            ConnStr_ETLReference = dsb.ConnectionString;

            var SrcConn = new SqlConnection(ConnStr_ETLReference);

            var sCommand = new SqlCommand(sqlCmdLog, SrcConn);
            SrcConn.Open();
            sCommand.ExecuteNonQuery();
            SrcConn.Close();
            SrcConn.Dispose();
        }
        #endregion

        #region Extract Manager

        public void MainExtractManagerBulkUpload(Dictionary<string, object> values)
        {
            var dsb = new DbConnectionStringBuilder();
            var ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            var ConnStr_Destination = values["ConnStr_Destination"].ToString();
            var ConnStr_Source = values["ConnStr_Source"].ToString();
            var SourceTypeName = values["SourceTypeName"].ToString();
            var SourceCmdText = values["SourceCmdText"].ToString();
            var bTruncateExtractTable = Convert.ToBoolean(values["bTruncateExtractTable"]);
            var ExtractTable = values["ExtractTable"].ToString();
            var BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            var SourceQueryMapping = values["SourceQueryMapping"].ToString();
            var ExtractStartTime = values["ExtractStartTime"].ToString();
            var ExtractEndTime = values["ExtractEndTime"].ToString();
            var ExtractJobID = Convert.ToInt32(values["ExtractJobID"]);
            var ExtractControlID = Convert.ToInt32(values["ExtractControlID"]);
            var ManagerGUID = values["ManagerGUID"].ToString();


            checkConnection(ConnStr_Destination);
            dsb.ConnectionString = ConnStr_Destination;
            dsb.Remove("Provider");
            ConnStr_Destination = dsb.ConnectionString + ";Connect Timeout=0";

            checkConnection(ConnStr_Source, SourceTypeName);
            dsb.ConnectionString = ConnStr_Source;
            dsb.Remove("Provider");

            ConnStr_Source = dsb.ConnectionString;
            if (SQL.Contains(SourceTypeName))
            {
                ConnStr_Source += ";Connect Timeout=0";
            }

            //This is to handle if the source query uses any paramters. All evaluted paramters
            //must be part if the readlonly collection

            string tempSourceCmdText = SourceCmdText.Replace("'", "''");

            ExtractLogMessage(ConnStr_ETLReference,
               ExtractJobID,
               1,
               0,
               "Log ExtractExecution.BulkUpload",
               tempSourceCmdText,
               0,
               "",
               null,
               ExtractStartTime,
               ExtractEndTime,
               ExtractEndTime,
               ExtractControlID,
               ManagerGUID
               );

            TruncateTable(ExtractTable, ConnStr_Destination, bTruncateExtractTable);

            int rowsCopied = PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Destination, BulkUploadLoadSize, ExtractTable, SourceQueryMapping, SourceTypeName);
            values.Add("rowsCopied", rowsCopied);
        }

        private void ExtractLogMessage(string ConnStr_ETLReference,
                     int ExtractJobID,
                     int SuccessFlag,
                     int CompletedFlag,
                     string MessageSource,
                     string Message,
                     int RowsExtracted,
                     string ExtractPackagePathAndName,
                     string StartTime,
                     string ExtractStartTime,
                     string ExtractEndTime,
                     string NextExtractStartTime,
                     int ExtractControlID,
                     string ManagerGUID
          )
        {
            StartTime = StartTime == null ? "NULL" : "'" + StartTime + "'";
            ExtractStartTime = ExtractStartTime == null ? "NULL" : "'" + ExtractStartTime + "'";
            ExtractEndTime = ExtractEndTime == null ? "NULL" : "'" + ExtractEndTime + "'";
            NextExtractStartTime = NextExtractStartTime == null ? "NULL" : "'" + NextExtractStartTime + "'";

            string sqlCmdLog = "[spInsertExtractExecutionLog] "
                 + "@ExtractJobID = " + ExtractJobID + ", "
                 + "@StartTime = " + StartTime + ","
                 + "@ManagerGUID = '" + ManagerGUID + "', "
                 + "@SuccessFlag = " + SuccessFlag + ", "
                 + "@CompletedFlag = " + CompletedFlag + ", "
                 + "@MessageSource = '" + MessageSource + "', "
                 + "@Message = '" + Message + "', "
                 + "@RowsExtracted = " + RowsExtracted + ", "
                 + "@ExtractStartTime = " + ExtractStartTime + ", "
                 + "@ExtractEndTime = " + ExtractEndTime + ", "
                 + "@NextExtractStartTime = " + NextExtractStartTime + ", "
                 + "@ExtractPackagePathAndName = '" + ExtractPackagePathAndName + "', "
                 + "@ExtractControlID = " + ExtractControlID;

            //string sqlCmdLog = "[spInsertExtractExecutionLog] "
            //     + "@ExtractJobID = " + ExtractJobID + ", "
            //     + "@StartTime = NULL,"
            //     + "@ManagerGUID = '" + ManagerGUID + "', "
            //     + "@SuccessFlag = 1, "
            //     + "@CompletedFlag = 0, "
            //     + "@MessageSource = 'Log ExtractExecution.BulkUpload', "
            //     + "@Message = '" + tempSourceCmdText + "', "
            //     + "@RowsExtracted = 0, "
            //     + "@ExtractStartTime = '" + ExtractEndTime + "', "
            //     + "@ExtractEndTime = '" + ExtractEndTime + "', "
            //     + "@NextExtractStartTime = '" + ExtractEndTime + "', "
            //     + "@ExtractPackagePathAndName = '', "
            //     + "@ExtractControlID = " + ExtractControlID;

            var dsb = new DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");
            ConnStr_ETLReference = dsb.ConnectionString;

            var SrcConn = new SqlConnection(ConnStr_ETLReference);

            var sCommand = new SqlCommand(sqlCmdLog, SrcConn);
            SrcConn.Open();
            sCommand.ExecuteNonQuery();
            SrcConn.Close();
            SrcConn.Dispose();
        }

        public void StartManagerPackageExtract(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }

        #endregion

        #region Delivery Manager
        public void StartManagerPackageDelivery(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }
        #endregion

        #region Summary Manager

        public void StartManagerPackageSummary(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }
        #endregion

        #region Common

        public int PerformSQLBulkCopy(string ConnStr_Source, string SourceCmdText, string ConnStr_Destination,
         int BulkUploadLoadSize, string DestinatonTable, List<Mapping> Mappings, string SourceTypeName)
        {

            int result = 0;
            var bulkCopy = new SqlBulkCopy(ConnStr_Destination, SqlBulkCopyOptions.KeepIdentity);

            bulkCopy.BatchSize = BulkUploadLoadSize;
            bulkCopy.BulkCopyTimeout = 0;
            bulkCopy.DestinationTableName = DestinatonTable;

            BulkCopyMapping(bulkCopy, Mappings);

            if (SQL.Contains(SourceTypeName))
            {
                var SrcConn = new SqlConnection(ConnStr_Source);
                var sCommand = new SqlCommand(SourceCmdText, SrcConn);
                sCommand.CommandTimeout = 0;

                SrcConn.Open();
                var SqlReader = sCommand.ExecuteReader();
                bulkCopy.WriteToServer(SqlReader);

                SqlReader.Close();
                SrcConn.Close();
                SrcConn.Dispose();
                result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);
                bulkCopy.Close();
            }
            else if (ORACLE.Contains(SourceTypeName))
            {

                var SrcConn = new OracleConnection(ConnStr_Source);
                SrcConn.Open();

                var sCommand = new OracleCommand(SourceCmdText, SrcConn);
                sCommand.CommandTimeout = 0;
                sCommand.Parameters.Add("cur", OracleDbType.RefCursor);
                sCommand.Parameters["cur"].Direction = ParameterDirection.Output;
                sCommand.ExecuteNonQuery();

                var SqlReader = sCommand.ExecuteReader();
                bulkCopy.WriteToServer(SqlReader);

                SqlReader.Close();
                SrcConn.Close();
                SrcConn.Dispose();

                result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);
                bulkCopy.Close();
            }

            return result;
        }

        public List<Mapping> SplitMappings(string SourceQueryMapping)
        {
            var lMapping = new List<Mapping>();
            if ((!String.IsNullOrEmpty(SourceQueryMapping)) && SourceQueryMapping.Contains(";"))
            {
                List<string> lSourceQueryMapping = new List<string>(SourceQueryMapping.Split(';'));

                foreach (var map in lSourceQueryMapping)
                {
                    List<string> cols = new List<string>(map.Split(','));
                    if (cols.Count == 2)
                    {
                        if (String.IsNullOrEmpty(cols[0]) || String.IsNullOrEmpty(cols[1]))
                        {
                            throw new System.Exception("Bulk copy SourceQueryMapping has an invalid pair (empty string)");
                        }
                        lMapping.Add(new Mapping()
                        {
                            SourceMap = cols[0].Trim(),
                            DestinationMap = cols[1].Trim()
                        });

                    }
                    else
                    {
                        throw new System.Exception("Bulk copy SourceQueryMapping has an invalid pair (count does not match): " + map);
                    }
                }
            }
            return lMapping;
        }

        public void checkConnection(string ConnStr, string SourceTypeName = "OLEDB")
        {
            var dsb = new DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr;
            dsb.Remove("Provider");
            if (SQL.Contains(SourceTypeName))
            {

                var con = new SqlConnection(dsb.ConnectionString);
                con.Open();
                con.Close();
            }
            else if (ORACLE.Contains(SourceTypeName))
            {
                var con = new OracleConnection(dsb.ConnectionString);
                con.Open();
                con.Close();
            }

        }

        public void BulkCopyMapping(SqlBulkCopy bulkCopy, List<Mapping> Mappings)
        {
            foreach (var mapping in Mappings)
            {
                var m = new SqlBulkCopyColumnMapping();

                bulkCopy.ColumnMappings.Add(new
                 SqlBulkCopyColumnMapping(mapping.OledSourceMap, mapping.DestinationMap));
            }
        }

        public string GetDtexecLocation(bool RunAs32Bit, string ConnStr_ETLReference)
        {
            var ds = GetData(ConnStr_ETLReference, "EXEC spGetDtexecLocation @RunAs32Bit='" + RunAs32Bit.ToString() + "'");

            string dtexec = ds.Tables[0].Rows[0]["LocationDtexec"].ToString();

            if (dtexec.Contains(" "))
            {
                dtexec = "\"" + dtexec + "\"";
            }
            return dtexec;
        }
        public void StartSSISPackage(string command, int ControlID, bool RunAs32Bit, string ConnStr_ETLReference)
        {
            string dtexec = GetDtexecLocation(RunAs32Bit, ConnStr_ETLReference);

            ProcessInformation p = new ProcessInformation() { ControlID = ControlID };
            ProcessControl.Add(ControlID, p);
            p.EnableRaisingEvents = true;
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;
            p.Exited += p_Exited;

            p.OutputDataReceived += new DataReceivedEventHandler
            (
                delegate(object sender, DataReceivedEventArgs e)
                {
                    ((ProcessInformation)sender).OutputMessage += e.Data + Environment.NewLine;
                }
            );

            p.StartInfo.FileName = dtexec;
            p.StartInfo.Arguments = command;
            p.StartInfo.CreateNoWindow = true;

            SSISPackagesCount++;

            p.Start();
            p.BeginOutputReadLine();
        }

        void p_Exited(object sender, EventArgs e)
        {
            SSISPackagesCount--;
        }

        public string GenerateListToString(List<string> list)
        {
            string str = list.Aggregate(string.Empty, (current, item) => current + (item + ","));
            if (str.Length > 1)
            {
                str = str.Substring(0, str.Length - 1);
            }

            return str;
        }

        public DataSet GetData(string connnectionString, string sqlQuery)
        {
            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = connnectionString;
            dsb.Remove("Provider");

            var ds = new DataSet();
            using (var conn = new SqlConnection(dsb.ConnectionString))
            {
                var adapter = new SqlDataAdapter(sqlQuery, conn);
                adapter.Fill(ds);
            }

            return ds;
        }

        public void TruncateTable(string Table, string ConnStr_Destination, bool bTruncateTable)
        {
            if (bTruncateTable)
            {
                var trcConn = new SqlConnection(ConnStr_Destination);

                var trcCommand = new SqlCommand("TRUNCATE TABLE " + Table, trcConn);
                trcCommand.CommandTimeout = 0;

                trcConn.Open();
                trcCommand.ExecuteNonQuery();
                trcConn.Close();
                trcConn.Dispose();
            }
        }
        #endregion

    }

    public class ProcessInformation : Process
    {
        public int ControlID { get; set; }
        public string OutputMessage { get; set; }
    }
    static class SqlBulkCopyExtension
    {
        public static int RowsCopiedCount(this SqlBulkCopy bulkCopy)
        {
            FieldInfo _rowsCopiedField = typeof(SqlBulkCopy).GetField("_rowsCopied", BindingFlags.NonPublic | BindingFlags.GetField | BindingFlags.Instance);
            return (int)_rowsCopiedField.GetValue(bulkCopy);
        }

    }
    public class Mapping
    {
        public string SourceMap { get; set; }
        public string OledSourceMap
        {
            get { return SourceMap.Replace(".", ""); }
        }
        public string DestinationMap { get; set; }
    }

}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Settings.get_Default():ST_060ace5346c44cdaa03356127c150a18.Properties.Sett" +
    "ings")]

namespace ST_060ace5346c44cdaa03356127c150a18.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using DWReferenceHelper;
using Microsoft.SqlServer.Dts.Runtime;
using System.Collections.Generic;

#endregion

namespace ST_060ace5346c44cdaa03356127c150a18
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion

        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            string SourceCmdText = "";
            var values = new Dictionary<string, object>();
            var sh = new ScriptHelper();
            try
            {
                #region Get Variables

                Variables vars = null;

                Dts.VariableDispenser.LockOneForRead("User::ConnStr_ETLReference", ref vars);
                values.Add("ConnStr_ETLReference", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ConnStr_Destination", ref vars);
                values.Add("ConnStr_Destination", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ConnStr_Source", ref vars);
                values.Add("ConnStr_Source", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ExtractTable", ref vars);
                values.Add("ExtractTable", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::SourceQuery", ref vars);
                string SourceQuery = vars[0].Value.ToString();
                values.Add("SourceQuery", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::SourceQueryMapping", ref vars);
                values.Add("SourceQueryMapping", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::TruncateExtractTable", ref vars);
                values.Add("bTruncateExtractTable", Convert.ToBoolean(vars[0].Value));
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::BulkUploadLoadSize", ref vars);
                values.Add("BulkUploadLoadSize", Convert.ToInt32(vars[0].Value));
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::SourceTypeName", ref vars);
                values.Add("SourceTypeName", vars[0].Value.ToString());

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ExtractStartTime", ref vars);
                values.Add("ExtractStartTime", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ExtractEndTime", ref vars);
                values.Add("ExtractEndTime", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ExtractJobID", ref vars);
                values.Add("ExtractJobID", Convert.ToInt32(vars[0].Value));
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ExtractControlID", ref vars);
                values.Add("ExtractControlID", Convert.ToInt32(vars[0].Value));
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ManagerGUID", ref vars);
                values.Add("ManagerGUID", vars[0].Value.ToString());
                vars.Unlock();


                Variables varsSourceQueryEvaluated = null;
                Dts.VariableDispenser.LockOneForRead("User::SourceQueryEvaluated", ref varsSourceQueryEvaluated);
                var SourceQueryEvaluated = varsSourceQueryEvaluated[0];
                SourceQueryEvaluated.EvaluateAsExpression = false;
                SourceQueryEvaluated.Expression = SourceQuery;
                SourceQueryEvaluated.EvaluateAsExpression = true;
                SourceCmdText = SourceQueryEvaluated.Value.ToString();
                values.Add("SourceCmdText", SourceCmdText);
                varsSourceQueryEvaluated.Unlock();
                #endregion

                sh.MainExtractManagerBulkUpload(values);

                //vars = null;
                //Dts.VariableDispenser.LockOneForWrite("ExtractRowCount", ref vars);
                //vars[0].Value = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy); 
                //vars.Unlock();


                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (System.Exception ex)
            {
                Variables vars = null;
                Dts.VariableDispenser.LockOneForRead("System::TaskName", ref vars);
                string TaskName = vars[0].Value.ToString();
                vars.Unlock();

                Dts.Events.FireError(1, TaskName, SourceCmdText + Environment.NewLine + ex.ToString(), "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
    }


}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_1487b85113c4470ba87705d676bfcba5.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{388C6745-019E-4432-9EAA-E733BA085E5F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_060ace5346c44cdaa03356127c150a18</RootNamespace>
    <AssemblyName>ST_1487b85113c4470ba87705d676bfcba5</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Oracle.DataAccess, Version=4.112.3.0, Culture=neutral, PublicKeyToken=89b483f429c47342, processorArchitecture=AMD64" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.IO.Compression" />
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.IO.Log" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptHelper.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_060ace5346c44cdaa03356127c150a18</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_060ace5346c44cdaa03356127c150a18</msb:DisplayName>
		<msb:ProjectId>{FE3479CE-B21E-4A92-BB57-7CBD3C16E4E4}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_1487b85113c4470ba87705d676bfcba5.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="ScriptHelper.cs"/>
		<msb:Breakpoint Include="31b2afe7dcee419fb480fbf3af9a0910">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>102</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="e7ee24a3d3244574a38efe1b042fc1e3">
			<msb:FileName>ScriptHelper.cs</msb:FileName>
			<msb:LineNumber>1136</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_060ace5346c44cdaa03356127c150a18")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_060ace5346c44cdaa03356127c150a18")]
[assembly: AssemblyCopyright("Copyright @  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_060ace5346c44cdaa03356127c150a18.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_060ace5346c44cdaa03356127c150a18.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_1487b85113c4470ba87705d676bfcba5.dll">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
YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVz
b3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5
AAAAAAUAbAAAAKAWAAAjfgAADBcAAIAdAAAjU3RyaW5ncwAAAACMNAAAlCAAACNVUwAgVQAAEAAA
ACNHVUlEAAAAMFUAAHwJAAAjQmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+iUzABYAAAEAAAB2AAAA
CwAAAB4AAABXAAAArAAAANkAAAADAAAAQQAAACQAAAAFAAAADwAAABsAAAAUAAAAAQAAAAoAAAAB
AAAAAwAAAAwAAAAAAAoAAQAAAAAABgAQAQkBCgAsARcBCgBXAUQBDgCnAX4BBgDDAQkBBgDZAcgB
BgAKAvUBBgC/A6QDBgDtA6QDCgDtBKQDBgD6BAkBEgDrBtUGBgAqBwkBEgBSB8kGBgC2DZwNBgDh
Dc8NBgD4Dc8NBgAVDs8NBgA0Ds8NBgBNDs8NBgBmDs8NBgCBDs8NBgCcDs8NBgC1Ds8NBgDuDs4O
BgAOD84OBgAsD84OBgBjD0QBBgCADwkBBgCFDwkBBgCpD88NCgDVD78PCgDuD78PBgADEM4OBgA3
EAkBEgBFEMkGEgBkEMkGEgBuEMkGEgCJEMkGBgC3EKQQEgDdEMkGBgDvEOUQJwAGEQAABgAREQkB
BgAXEQkBBgAyEQkBBgBXEUYRIwBkEQAAwwAGEQAAEgCnEZQRBgAGEqQDBgAUEqQDBgCKEgkBBgDJ
EuUQFgDyEuYSBgD9EqQDGgB6E8kGGgCgE8kGGgC0E8kGGgDbE8kGBgAlFAkBBgBAFAkBBgBKFOUQ
EgBsFNUGEgDTFMEUEgDjFJQREgD1FMEUEgACFcEUEgAgFckGBgBZFU0VBgByFQkBBgB3FeUQBgCE
FeUQBgCZFQkBHgDdFccVIgDlFccVIgDwFccVBgAeFv8VIgAzFscVBgBoFuUQHgCGFscVBgDoF6QQ
BgAIGAkBBgATGOUQBgAgGOUQEgBFGNUGEgBTGNUGEgBeGJQRCgB4GL8PBgCCGAkBEgCtGNUGEgC7
GJQRJgDzGNoYJgAEGdoYJgASGdoYJgA7GdoYJgBLGdoYEgBYGZQREgBkGckGJgCFGdoYEgCbGdUG
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
AQDcCgAAAgAkCwAAAwAyCwAABABeCgAAAQAkCwAAAgBeCgAAAwA4CwAABABECwAAAQBYCwAAAgBo
CwAAAwB8CwAAAQBYCwAAAgCJCwAAAwB8CwAAAQDcCgAAAQCfCAAAAgC3CAAAAwCLCAAAAQCUCwAA
AgCjCwAAAwCxCwAABADFCwAABQDYCwAABgDlCwAABwD4CwAAAQCjCwAAAgCxCwAAAwAHDAAABADF
CwAABQAUDAAABgAlDAAABwAuDAAACAA4DAAAAQB8CwAAAgC3CAAAAwBYCwAABAAlDAAABQDFCwAA
BgBoCwAABwCLCAAACAAuDAAACQA4DAAAAQAHDAAAAgAlDAAAAwAuDAAABAA4DAAAAQCfCAAAAgB8
CwAAAwCLCAAAAQCLCAAAAQCfCAAAAgCLCAAAAwBGDAAAAQDcCgAAAgCPCgAAAQBTDAAAAgDlCwAA
AwDYCwAABABYCwAABQBcDAAAAQBTDAAAAgBmDAAAAQDcCgAAAgB8CwAAAwBwDAAABAB8DAAABQCK
DAAABgCYDAAABwBbCAAACABoCAAACQB0CAAACgCACAAACwCgDAAADADSCgAADQCvDAAADgDADAAA
DwC1CgAAEADGCgAAAQBKCgAAAQDcCgAAAgDPDAAAAwBwDAAABAB8DAAABQCKDAAABgCYDAAABwDc
DAAACADqDAAACQDSCgAACgCvDAAACwDADAAADAAEDQAADQAZDQAADgDGCgAAAQDxCgAAAgD4CgAA
AwDcCgAAAQDxCgAAAgD4CgAAAwDcCgAAAQDxCgAAAgD4CgAAAwDcCgAAAQCUCwAAAgCjCwAAAwCx
CwAABADFCwAABQAqDQAABgAlDAAABwD4CwAAAQDlCwAAAQA6DRAQAgD4CwAAAQBCDQAAAgAlDAAA
AQBLDQAAAgDcCgAAAQBWDQAAAgBJCQAAAwBLDQAABADcCgAAAQBeDQAAAgBlDQAAAQBnDQAAAQBs
DQAAAgB+DQAAAQCHDQAAAgCxCwAAAwCNDQAAAQCFEgAAAQAzEwAAAQAzEwAAAQCpFwAAAQBeDQAA
AgBlDQAAAQCJGwAAAgCRGwAAAQBECgAAAQBECgAAAQBCDQAAAQBECgAAAQBECgAAAQA3FwAAAgA5
FwAAAQCGF3kAJgJUAIEAJgJUAIkAJgJUAJEAJgJUAJkAJgJUAKEAJgJUAKkAJgJUALEAJgJUALkA
JgJUAMEAJgJUAMkAJgJLANEAJgIbANkAJgIbAOEAJgIbAAkAJgIbAOkAlw/XAekAsg/eATEAJgLj
AQEBJgLvAREBJgIbABEAJgIbAAwAJRAKAgkALhBQABkBPhARAnEAWRAYAiEBJRAeAikBgBAlAjkB
wxArAkEB0RAxAkkBJRA1AlEB9BA6AhQA/BBHABwAwxBOAiQA0RBfAhkBPhBkAjEBJRBqAmkBHxFx
AiQAKRF2AnEBPhEbAEEBKRF2AnkBXhF6AiwAdBGHAjQAwxCcAjwA0RCxAhkAfxFHADwAKRF2AmkB
jBHvApEBJgIbAJEBwRFUAJEB1hH0ApEB3RFQABkBPhD5AhQA8hH/AgwA+xEFA2kB/xEjA1EB9BD5
AkQAwxAwA0wA0RBfAlQAIxKxAlEBLRKYAxkBORLGABkBRRKdA1EB9BARAhkBPhCoAxkBPhC0AxkB
TxJHAFEBWhKYAxkBuBJQABkBwBL0ArEB0xLGA7EBzwTUA1wAJgLjA7kBCxPpA7kBERMHBMkBjBMy
BBQAwxBOAmQA0RBfAhkBkhPGAxkBPhA6AmQAKRF2AjkB/BBHANEBzhNHBGwAJgLjA+EB/RNfBEQA
JgIbABkBBBSeBDkAEBQkAFkANRSkBEQA+xEFA0QA/BBHAPEBJgJUAPkB0xLGA/kBTxTQBPkBVhTV
BFEBWxSYA7EBTxTbBGEAJgLqBGEAfxRLAGEAjRRLAGEAoRRUABkBuhTyBAkCJgJUABEC8BQbABkC
JgL4BBkCEhUABWEALBUGBWEAOhUbAHQAwxBOAnwA0RBfAnwAKRF2AlEBQBWYAzECJgIbADECZxVA
BRkBPhBHBWEBLhBQAHQAJRBOBXQA/BBHAEECJgJUAEkCjxVUAEkCOhUbAFECnhVjBVkC8BRpBWEC
QxZzBYQA/BBHAIQAJRBOBXkCTxZQAGECPhEbABkBXBaHBbkBYhaOBbEBdhaaBYkCmBahBRkBqxap
BUkBJRAABhkB1BeeBBkB4hetAbkB9BcFBowAJgLjA7kB/RMjBpQAJgLjA7kB+RdOBpwAJgLjA7kB
CxNxBrkBDxiMBqECJgJUAKkCKxhQAKkCOhUbABQAJgIbABQANBjbBhkBPRh2ALECJgJUALkCJgL2
BsECaBhHABECOhUbAMkCPhEbANECJgIbAMECmhhLALkCEhUzB+ECOhUbAOkCJgJUAPECJgJCB/EC
LBlKB/kC+xFQB/kCJRBaBxEDdxlhB/ECEhVoB3QAJgIbABkB8hH0AhQAJgLbBhQAJRBOBRkBlhlQ
AHQA+xGGBykDJgIbAGEA1xm4BykDJgJvATED+xG+BzkDLhBQAEEDYRpQAFEDahrmBywA+xEFAxkA
dhrqBxkAnxrvB1kDrRrqB1kDwRrqB1kD3BrqB2EDJgLjAxkAAxv1B0kDJgLjAxkADhv8B1kDJRtU
AFkDMhtUAFkDQBvqBxkAUxt2AhkAWRsbAKQAJgLjA7kBvhseCHEAJgIbAGkDJgL2BnED4xs9CCwA
JgIbABQA+xGGBxkAJgIbAOkA/xtnCHkDCBxxCIkDJgIbAAwAJgIbACEARRx8CJEDnhyCCJkDvhyI
CKEDJRCRCKkDIxIxAqED1hwbAKkD3RzqB6kD9hxUAJEDBR1LAJEDKB2YCLEDMx2eCCEAJgIbAAgA
aADCAQgAbADHAQ4AMQLMASkAmwD2AS4AYwBdCS4AGwA3CS4AWwBUCS4AIwA3CS4AQwA3CS4ACwDE
CC4AEwAOCS4AawDHAS4AKwA3CS4AMwAOCS4AOwA9CUMAcwDHAUkAmwD2AWEAowDHAcMAawDHAQAB
owDHAQEBowDHAQMBYwbHASABowDHASEBowDHAUABowDHAUEBowDHAUMBowDHAWABowDHAWEBowDH
AWMBowDHAYABowDHAYEBowDHAaABowDHAaEBowDHAcABowDHAcEBowDHAeABowDHAeEBowDHAQAC
owDHAQECowDHASACowDHASECowDHAUACowDHAUECowDHAWACowDHAWECowDHAYACowDHAYECowDH
AaACowDHAaECowDHAcECowDHAeECowDHAQEDowDHAQAIowDHASAIowDHAUAIowDHAWAIowDHAYAI
owDHAaAIowDHAcAIowDHAeAIowDHAQAJowDHASAJowDHAWAJawDHAYAJowDHAaAJowDHAeAJowDH
AQAKowDHAeoBtgINA1gDowOuA7oDwAMYBIEErgTEBMsE4QQNBS8FVAWvBcQFyAWYBuYG/gYOByQH
bgeMB6wHxwfTBwMIQwhRCFoIdginCAIAAQADAAMABAAEAAUACwAHAA0AAADZAS8AAABYAjQAAAB8
AkIAAABbCLABAABoCLABAAB0CLABAACACLABAACLCLQBAACfCLQBAAC3CLQBAABJCbABAABTCbQB
AAAACrQBAAAKCrQBAAAYCrQBAgACAAMAAgADAAUAAQAEAAUAAgAFAAcAAQAJAAkAAgAIAAkAAgAK
AAsAAQALAAsAAgAMAA0AAQANAA0AAgAOAA8AAQAPAA8AAQARABEAAgAQABEAAQATABMAAgASABMA
AgAUABUAAQAVABUAAQBHABcAAgBGABcAAgBIABkAAQBJABkAAgBMABsAAQBNABsAAgBOAB0AAgBP
AB8AAQBQAB8AAwJCAkgCWAJ/ApMCqAIoA0EDTwPbA0AEVQQgBScFfgUZBkUGaAYVCASAAAABAAAA
2hRXewAAAAAAAD8PAAAEAAAAAAAAAAAAAAABAAABAAAAAAQAAAAAAAAAAAAAAAEACQEAAAAACwAA
AAAAAAAAAAAACgBfAQAAAAAEAAAAAAAAAAAAAAABAMkGAAAAAAQAAAAAAAAAAAAAAAEA2hIAAAAA
BAAAAAAAAAAAAAAAAQBcEwAAAAAEAAAAAAAAAAAAAAABAKYVAAAAAAQAAAAAAAAAAAAAAAEAxxUA
AAAABABwAAMAAAAAAAAAOQfIGAAAAAALAAAAAAAAAAAAAAAKAE0cAAAAAAAAAAABAAAAPR0AAAkA
CAAKAAQACwAEAJMAAwSVAAMElwA8BKkAegSVADwEAwEDBBEBEwYVAT4GGQFjBh0BAwQfAQMEhwE4
CAAAADxNb2R1bGU+AFNUXzE0ODdiODUxMTNjNDQ3MGJhODc3MDVkNjc2YmZjYmE1LmRsbABSZXNv
dXJjZXMAU1RfMDYwYWNlNTM0NmM0NGNkYWEwMzM1NjEyN2MxNTBhMTguUHJvcGVydGllcwBTZXR0
aW5ncwBTY3JpcHRIZWxwZXIARFdSZWZlcmVuY2VIZWxwZXIAUHJvY2Vzc0luZm9ybWF0aW9uAFNx
bEJ1bGtDb3B5RXh0ZW5zaW9uAE1hcHBpbmcAU2NyaXB0TWFpbgBTVF8wNjBhY2U1MzQ2YzQ0Y2Rh
YTAzMzU2MTI3YzE1MGExOABTY3JpcHRSZXN1bHRzAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lz
dGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAU3lzdGVtLkRpYWdub3N0
aWNzAFByb2Nlc3MATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVu
dW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkds
b2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJj
ZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UA
Z2V0X0RlZmF1bHQARGVmYXVsdABnZXRfUm93c0luc2VydGVkAHNldF9Sb3dzSW5zZXJ0ZWQAZ2V0
X1Jvd3NEZWxldGVkAHNldF9Sb3dzRGVsZXRlZABnZXRfUm93c1VwZGF0ZWQAc2V0X1Jvd3NVcGRh
dGVkAGdldF9Sb3dzU3RhZ2VkAHNldF9Sb3dzU3RhZ2VkAGdldF9TdWl0ZUZvbGRlckxvY2F0aW9u
AHNldF9TdWl0ZUZvbGRlckxvY2F0aW9uAGdldF91blByb2Nlc3NlZEZpbGVGdWxsTmFtZQBzZXRf
dW5Qcm9jZXNzZWRGaWxlRnVsbE5hbWUAZ2V0X0luUHJvY2Vzc2VkRmlsZUZ1bGxOYW1lAHNldF9J
blByb2Nlc3NlZEZpbGVGdWxsTmFtZQBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBEaWN0aW9u
YXJ5YDIAUHJvY2Vzc0NvbnRyb2wAU1NJU1BhY2thZ2VzQ291bnQATGlzdGAxAE9SQUNMRQBTUUwA
TWFpblN0YWdpbmdNYW5hZ2VyUHJvY2Vzc0ZpbGVzAE1haW5TdGFnaW5nRXhlY3V0aW9uU3FsQnVs
a1VwbG9hZABNYWluU3RhZ2luZ0V4ZWN1dGlvbkZpbGVCdWxrVXBsb2FkAEdldFBhY2thZ2VOYW1l
AEdldFN1aXRlRm9sZGVyTG9jYXRpb24AQ3JlYXRlU3RhZ2luZ0V4ZWN1dGlvbkNvbW1hbmQAU3Rh
cnRNYW5hZ2VyUGFja2FnZVN0YWdpbmcAR2V0VGltZVN0YW1wAEdldEZpbGVzAEdldFN0YWdpbmdD
b250cm9sSURzAFNvcnRlZExpc3RgMgBEYXRlVGltZQBHZXRPcmRlckZpbGVzAFJvd0NvdW50U3Rh
Z2VkAE1lcmdlRGF0YQBHZXRTdGFnaW5nSm9iSUQAQ2xlYW5VcEZpbGVzAFBlcmZvcm1TUUxCdWxr
Q29weQBQZXJmb3JtRmlsZUJ1bGtDb3B5AFByb2Nlc3NGaWxlAENyZWF0ZVNoZW1hSW5pRmlsZQBt
b3ZlRmlsZVRvSW5Qcm9jZXNzAGdldEZhaWxlZERpcgBNb3ZlVG9VblByb2Nlc3NlZFRvRmFpbGVk
RGlyAEdldE5leHRSdW5EYXRlVGltZVN0YWdpbmdDb250cm9sSUQAQ2hlY2tGaWxlSGVhZGVyc0Fu
ZENvbHVtbnMAUmVhZEZpbGVIZWFkZXIAU3RhZ2luZ0xvZ01lc3NhZ2UATWFpbkV4dHJhY3RNYW5h
Z2VyQnVsa1VwbG9hZABFeHRyYWN0TG9nTWVzc2FnZQBTdGFydE1hbmFnZXJQYWNrYWdlRXh0cmFj
dABTdGFydE1hbmFnZXJQYWNrYWdlRGVsaXZlcnkAU3RhcnRNYW5hZ2VyUGFja2FnZVN1bW1hcnkA
U3BsaXRNYXBwaW5ncwBjaGVja0Nvbm5lY3Rpb24AU3lzdGVtLkRhdGEAU3lzdGVtLkRhdGEuU3Fs
Q2xpZW50AFNxbEJ1bGtDb3B5AEJ1bGtDb3B5TWFwcGluZwBHZXREdGV4ZWNMb2NhdGlvbgBTdGFy
dFNTSVNQYWNrYWdlAEV2ZW50QXJncwBwX0V4aXRlZABHZW5lcmF0ZUxpc3RUb1N0cmluZwBEYXRh
U2V0AEdldERhdGEAVHJ1bmNhdGVUYWJsZQA8Um93c0luc2VydGVkPmtfX0JhY2tpbmdGaWVsZAA8
Um93c0RlbGV0ZWQ+a19fQmFja2luZ0ZpZWxkADxSb3dzVXBkYXRlZD5rX19CYWNraW5nRmllbGQA
PFJvd3NTdGFnZWQ+a19fQmFja2luZ0ZpZWxkADxTdWl0ZUZvbGRlckxvY2F0aW9uPmtfX0JhY2tp
bmdGaWVsZAA8dW5Qcm9jZXNzZWRGaWxlRnVsbE5hbWU+a19fQmFja2luZ0ZpZWxkADxJblByb2Nl
c3NlZEZpbGVGdWxsTmFtZT5rX19CYWNraW5nRmllbGQAUm93c0luc2VydGVkAFJvd3NEZWxldGVk
AFJvd3NVcGRhdGVkAFJvd3NTdGFnZWQAU3VpdGVGb2xkZXJMb2NhdGlvbgB1blByb2Nlc3NlZEZp
bGVGdWxsTmFtZQBJblByb2Nlc3NlZEZpbGVGdWxsTmFtZQBnZXRfQ29udHJvbElEAHNldF9Db250
cm9sSUQAZ2V0X091dHB1dE1lc3NhZ2UAc2V0X091dHB1dE1lc3NhZ2UAPENvbnRyb2xJRD5rX19C
YWNraW5nRmllbGQAPE91dHB1dE1lc3NhZ2U+a19fQmFja2luZ0ZpZWxkAENvbnRyb2xJRABPdXRw
dXRNZXNzYWdlAFJvd3NDb3BpZWRDb3VudABnZXRfU291cmNlTWFwAHNldF9Tb3VyY2VNYXAAZ2V0
X09sZWRTb3VyY2VNYXAAZ2V0X0Rlc3RpbmF0aW9uTWFwAHNldF9EZXN0aW5hdGlvbk1hcAA8U291
cmNlTWFwPmtfX0JhY2tpbmdGaWVsZAA8RGVzdGluYXRpb25NYXA+a19fQmFja2luZ0ZpZWxkAFNv
dXJjZU1hcABPbGVkU291cmNlTWFwAERlc3RpbmF0aW9uTWFwAE1haW4AdmFsdWVfXwBTdWNjZXNz
AEZhaWx1cmUAdmFsdWUAdmFsdWVzAGZpbGVGdWxsTmFtZQBmaWxlTmFtZVNlcGFyYXRvcgBGb2xk
ZXJCYXNlTG9jYXRpb24ARW52aXJvbm1lbnQAU3VpdGUAU3RhZ2luZ0V4ZWN1dGlvbkxvY2F0aW9u
AFNlcnZlcgBTdGFnaW5nQ29udHJvbElEAE1hbmFnZXJHVUlEAFN0YXJ0VGltZQBDb25uU3RyX0VU
TFJlZmVyZW5jZQBzZXJ2ZXIAcGFja2FnZUxvY2F0aW9ubG9jYXRpb24Ac3VpdGVGb2xkZXJMb2Nh
dGlvbgBmaWxlRnVsbE5hbWVzAHN1aXRlAFBhY2thZ2VOYW1lAGZpbGVUaW1lU3RhbXBGb3JtYXQA
Q29ublN0cl9TdGFnaW5nAFN0YWdpbmdFeHRyYWN0VGFibGUAU3RhZ2luZ0pvYklEAE1lcmdlUXVl
cnkAQ29ublN0cl9Tb3VyY2UAU291cmNlQ21kVGV4dABDb25uU3RyX0Rlc3RpbmF0aW9uAEJ1bGtV
cGxvYWRMb2FkU2l6ZQBTdGFnaW5nVGFibGUAU291cmNlUXVlcnlNYXBwaW5nAFNvdXJjZVR5cGVO
YW1lAEZpbGVGdWxsTmFtZQBEZXN0aW5hdGlvblRhYmxlAE1hcHBpbmdzAEhhc0hlYWRlcgBEZWxp
bWl0ZXJDaGFyAEVycm9yTWVzc2FnZQBmaWxlbmFtZQBEZWxpbWV0ZXIAZGVsaW1pdGVyAFN1Y2Nl
c3NGbGFnAENvbXBsZXRlZEZsYWcATWVzc2FnZVNvdXJjZQBNZXNzYWdlAEFjdHVhbEZpbGVOYW1l
AEV4dHJhY3RTdGFydFRpbWUARXh0cmFjdEVuZFRpbWUARXh0cmFjdEpvYklEAFJvd3NFeHRyYWN0
ZWQARXh0cmFjdFBhY2thZ2VQYXRoQW5kTmFtZQBOZXh0RXh0cmFjdFN0YXJ0VGltZQBFeHRyYWN0
Q29udHJvbElEAERlc3RpbmF0b25UYWJsZQBDb25uU3RyAGJ1bGtDb3B5AFJ1bkFzMzJCaXQAY29t
bWFuZABzZW5kZXIAZQBsaXN0AGNvbm5uZWN0aW9uU3RyaW5nAHNxbFF1ZXJ5AFRhYmxlAGJUcnVu
Y2F0ZVRhYmxlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmli
dXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNj
cmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlD
b21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdo
dEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRy
aWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vy
dmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0
eUF0dHJpYnV0ZQBFeHRlbnNpb25BdHRyaWJ1dGUAU1RfMTQ4N2I4NTExM2M0NDcwYmE4NzcwNWQ2
NzZiZmNiYTUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFu
ZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9u
ZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENv
bXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBnZXRfSXRlbQBUb1N0cmluZwBTdHJpbmcA
Q29uY2F0AERhdGFUYWJsZUNvbGxlY3Rpb24AZ2V0X1RhYmxlcwBEYXRhVGFibGUARGF0YVJvd0Nv
bGxlY3Rpb24AZ2V0X1Jvd3MASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAU3lzdGVtLkNvbGxl
Y3Rpb25zAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IAZ2V0X0N1cnJlbnQARGF0YVJvdwBTeXN0
ZW0uSU8AUGF0aABDb21iaW5lAGdldF9Db3VudABFbnVtZXJhdG9yAEludDMyAENvbnZlcnQAVG9C
b29sZWFuAE1vdmVOZXh0AElEaXNwb3NhYmxlAERpc3Bvc2UAU3lzdGVtLlRocmVhZGluZwBUaHJl
YWQAU2xlZXAAVmFsdWVDb2xsZWN0aW9uAGdldF9WYWx1ZXMAZ2V0X0V4aXRDb2RlAFRvSW50MzIA
U3lzdGVtLkRhdGEuQ29tbW9uAERiQ29ubmVjdGlvblN0cmluZ0J1aWxkZXIAc2V0X0Nvbm5lY3Rp
b25TdHJpbmcAUmVtb3ZlAGdldF9Db25uZWN0aW9uU3RyaW5nAENvbnRhaW5zAEFkZABUb0NoYXIA
SUVudW1lcmF0b3JgMQBLZXlWYWx1ZVBhaXJgMgBnZXRfVmFsdWUAR2V0RmlsZU5hbWUATGFzdElu
ZGV4T2YAU3Vic3RyaW5nAGdldF9MZW5ndGgAR2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9uADxH
ZXRGaWxlcz5iX18wAGZpbGUARnVuY2AyAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVs
ZWdhdGUxAFRvTG93ZXIARW5kc1dpdGgARGlyZWN0b3J5AEV4aXN0cwBTeXN0ZW0uQ29yZQBTeXN0
ZW0uTGlucQBFbnVtZXJhYmxlAElFbnVtZXJhYmxlYDEAV2hlcmUAVG9MaXN0ADxHZXRTdGFnaW5n
Q29udHJvbElEcz5iX18yAHIAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTMA
U3lzdGVtLkRhdGEuRGF0YVNldEV4dGVuc2lvbnMARGF0YVJvd0V4dGVuc2lvbnMARmllbGQASXNO
dWxsT3JFbXB0eQBEYXRhVGFibGVFeHRlbnNpb25zAEVudW1lcmFibGVSb3dDb2xsZWN0aW9uYDEA
QXNFbnVtZXJhYmxlAEVudW1lcmFibGVSb3dDb2xsZWN0aW9uRXh0ZW5zaW9ucwBTZWxlY3QAb3Bf
RXF1YWxpdHkAZ2V0X0ludmFyaWFudEN1bHR1cmUASUZvcm1hdFByb3ZpZGVyAFBhcnNlRXhhY3QA
RXhjZXB0aW9uAEZpbGUARGVsZXRlAE1vdmUAR2V0RGlyZWN0b3J5TmFtZQBTcWxCdWxrQ29weU9w
dGlvbnMAc2V0X0JhdGNoU2l6ZQBzZXRfQnVsa0NvcHlUaW1lb3V0AHNldF9EZXN0aW5hdGlvblRh
YmxlTmFtZQBGb3JtYXQAU3lzdGVtLkRhdGEuT2xlRGIAT2xlRGJDb25uZWN0aW9uAERiQ29ubmVj
dGlvbgBPcGVuAE9sZURiQ29tbWFuZABPbGVEYkRhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgBJRGF0
YVJlYWRlcgBXcml0ZVRvU2VydmVyAENsb3NlAEdldEV4dGVuc2lvbgBTeXN0ZW0uVGV4dABTdHJp
bmdCdWlsZGVyAEFwcGVuZExpbmUAQ2hhcgBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBXcml0ZUxp
bmUAR3VpZABOZXdHdWlkAFN5c3RlbS5JTy5Db21wcmVzc2lvbi5GaWxlU3lzdGVtAFN5c3RlbS5J
Ty5Db21wcmVzc2lvbgBaaXBGaWxlAFppcEFyY2hpdmUAWmlwQXJjaGl2ZU1vZGUAU3lzdGVtLkNv
bGxlY3Rpb25zLk9iamVjdE1vZGVsAFJlYWRPbmx5Q29sbGVjdGlvbmAxAFppcEFyY2hpdmVFbnRy
eQBnZXRfRW50cmllcwBnZXRfRnVsbE5hbWUAU3BsaXQAQ291bnQARGlyZWN0b3J5SW5mbwBDcmVh
dGVEaXJlY3RvcnkAWmlwRmlsZUV4dGVuc2lvbnMARXh0cmFjdFRvRGlyZWN0b3J5AFBhZExlZnQA
PEdldE5leHRSdW5EYXRlVGltZVN0YWdpbmdDb250cm9sSUQ+Yl9fNABDUyQ8PjlfX0NhY2hlZEFu
b255bW91c01ldGhvZERlbGVnYXRlNQA8PmNfX0Rpc3BsYXlDbGFzc2IAPENoZWNrRmlsZUhlYWRl
cnNBbmRDb2x1bW5zPmJfXzgAdABpADw+Y19fRGlzcGxheUNsYXNzZQBDUyQ8PjhfX2xvY2Fsc2MA
aGVhZGVyADxDaGVja0ZpbGVIZWFkZXJzQW5kQ29sdW1ucz5iX183AGYAPENoZWNrRmlsZUhlYWRl
cnNBbmRDb2x1bW5zPmJfXzYAcm93AENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdh
dGU5AG9wX0luZXF1YWxpdHkARW1wdHkASUVudW1lcmFibGUAQ2FzdABGaXJzdE9yRGVmYXVsdABG
dW5jYDMAQW55AFN0cmVhbVJlYWRlcgBUZXh0UmVhZGVyAFJlYWRMaW5lAEFkZFJhbmdlAFJlcGxh
Y2UAU3FsQ29ubmVjdGlvbgBTcWxDb21tYW5kAERiQ29tbWFuZABFeGVjdXRlTm9uUXVlcnkAQ29t
cG9uZW50AE5vdEltcGxlbWVudGVkRXhjZXB0aW9uAHNldF9Db21tYW5kVGltZW91dABTcWxEYXRh
UmVhZGVyAERiRGF0YVJlYWRlcgBPcmFjbGUuRGF0YUFjY2VzcwBPcmFjbGUuRGF0YUFjY2Vzcy5D
bGllbnQAT3JhY2xlQ29ubmVjdGlvbgBPcmFjbGVDb21tYW5kAE9yYWNsZVBhcmFtZXRlckNvbGxl
Y3Rpb24AZ2V0X1BhcmFtZXRlcnMAT3JhY2xlUGFyYW1ldGVyAE9yYWNsZURiVHlwZQBEYlBhcmFt
ZXRlcgBQYXJhbWV0ZXJEaXJlY3Rpb24Ac2V0X0RpcmVjdGlvbgBPcmFjbGVEYXRhUmVhZGVyAFRy
aW0AU3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZ0NvbGxl
Y3Rpb24AZ2V0X0NvbHVtbk1hcHBpbmdzAEJvb2xlYW4ARGF0YVJlY2VpdmVkRXZlbnRBcmdzADxT
dGFydFNTSVNQYWNrYWdlPmJfXzEyAERhdGFSZWNlaXZlZEV2ZW50SGFuZGxlcgBDUyQ8PjlfX0Nh
Y2hlZEFub255bW91c01ldGhvZERlbGVnYXRlMTMAZ2V0X0RhdGEAZ2V0X05ld0xpbmUAc2V0X0Vu
YWJsZVJhaXNpbmdFdmVudHMAUHJvY2Vzc1N0YXJ0SW5mbwBnZXRfU3RhcnRJbmZvAHNldF9Vc2VT
aGVsbEV4ZWN1dGUAc2V0X1JlZGlyZWN0U3RhbmRhcmRPdXRwdXQAc2V0X1JlZGlyZWN0U3RhbmRh
cmRFcnJvcgBFdmVudEhhbmRsZXIAYWRkX0V4aXRlZABhZGRfT3V0cHV0RGF0YVJlY2VpdmVkAHNl
dF9GaWxlTmFtZQBzZXRfQXJndW1lbnRzAHNldF9DcmVhdGVOb1dpbmRvdwBTdGFydABCZWdpbk91
dHB1dFJlYWRMaW5lADxHZW5lcmF0ZUxpc3RUb1N0cmluZz5iX18xNABjdXJyZW50AGl0ZW0AQ1Mk
PD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTE1AEFnZ3JlZ2F0ZQBTcWxEYXRhQWRh
cHRlcgBEYXRhQWRhcHRlcgBGaWxsAEZpZWxkSW5mbwBCaW5kaW5nRmxhZ3MAR2V0RmllbGQAR2V0
VmFsdWUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAFNjcmlwdE9iamVjdE1vZGVs
AGdldF9EdHMATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlJ1bnRpbWUAVmFyaWFibGVEaXNwZW5zZXIAZ2V0X1ZhcmlhYmxlRGlzcGVuc2VyAFZh
cmlhYmxlcwBMb2NrT25lRm9yUmVhZABWYXJpYWJsZQBVbmxvY2sAc2V0X0V2YWx1YXRlQXNFeHBy
ZXNzaW9uAHNldF9FeHByZXNzaW9uAHNldF9UYXNrUmVzdWx0AEV2ZW50c09iamVjdFdyYXBwZXIA
Z2V0X0V2ZW50cwBGaXJlRXJyb3IAU1RfMDYwYWNlNTM0NmM0NGNkYWEwMzM1NjEyN2MxNTBhMTgu
UHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAABxUwBUAF8AMAA2ADAAYQBjAGUANQAzADQA
NgBjADQANABjAGQAYQBhADAAMwAzADUANgAxADIANwBjADEANQAwAGEAMQA4AC4AUAByAG8AcABl
AHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAALUwB1AGkAdABlAAAxUwB0AGEAZwBpAG4A
ZwBFAHgAZQBjAHUAdABpAG8AbgBMAG8AYwBhAHQAaQBvAG4AAA1TAGUAcgB2AGUAcgAAI0YAaQBs
AGUATgBhAG0AZQBTAGUAcABhAHIAYQB0AG8AcgAAKUMAbwBuAG4AUwB0AHIAXwBFAFQATABSAGUA
ZgBlAHIAZQBuAGMAZQAAK0UAeABlAGMAdQB0AGkAbwBuAEkAbgBzAHQAYQBuAGMAZQBHAFUASQBE
AAATUwB0AGEAcgB0AFQAaQBtAGUAAHFbAGQAYgBvAF0ALgBbAHMAcABHAGUAdABTAHQAYQBnAGkA
bgBnAE0AYQBuAGEAZwBlAHIARgBvAGwAZABlAHIATABvAGMAYQB0AGkAbwBuAF0AIABAAFMAdQBp
AHQAZQBOAGEAbQBlACAAPQAgACcAAQMnAAEVQgBhAHMAZQBGAG8AbABkAGUAcgAAF0UAbgB2AGkA
cgBvAG4AbQBlAG4AdAAAE1MAdQBpAHQAZQBOAGEAbQBlAAANRgBvAGwAZABlAHIAAH9TAEUATABF
AEMAVAAgAFIAdQBuAEEAcwAzADIAQgBpAHQAIABGAFIATwBNACAAUwB0AGEAZwBpAG4AZwBDAG8A
bgB0AHIAbwBsACAAVwBIAEUAUgBFACAAUwB0AGEAZwBpAG4AZwBDAG8AbgB0AHIAbwBsAEkARAAg
AD0AIAAAFVIAdQBuAEEAcwAzADIAQgBpAHQAAGVMAG8AZwAgAE0AYQBuAGEAZwBlAHIAIABTAHQA
YQByAHQAaQBuAGcAIABTAHQAYQBnAGkAbgBnAEUAeABlAGMAdQB0AGkAbwBuACAARgBpAGwAZQAg
AEUAeAB0AHIAYQBjAHQAAAMgAAABAGdMAG8AZwAgAE0AYQBuAGEAZwBlAHIAIABTAHQAYQByAHQA
aQBuAGcAIABTAHQAYQBnAGkAbgBnAEUAeABlAGMAdQB0AGkAbwBuACAARABhAHQAYQAgAEUAeAB0
AHIAYQBjAHQAcwAAY0wAbwBnACAATQBhAG4AYQBnAGUAcgAgAEUAcgByAG8AcgAgAEwAbwBnACAA
ZgBvAHIAIABTAHQAYQBnAGkAbgBnAEUAeABlAGMAdQB0AGkAbwBuAEQAeQBuAGEAbQBpAGMAAClM
AG8AZwAgAE0AYQBuAGEAZwBlAHIAIABDAG8AbQBwAGwAZQB0AGUAAB9DAG8AbgBuAFMAdAByAF8A
UwB0AGEAZwBpAG4AZwAAHUMAbwBuAG4AUwB0AHIAXwBTAG8AdQByAGMAZQAAGVMAdABhAGcAaQBu
AGcASgBvAGIASQBEAAAbUwBvAHUAcgBjAGUAQwBtAGQAVABlAHgAdAAAIUUAeAB0AHIAYQBjAHQA
UwB0AGEAcgB0AFQAaQBtAGUAAB1FAHgAdAByAGEAYwB0AEUAbgBkAFQAaQBtAGUAACFTAHQAYQBn
AGkAbgBnAEMAbwBuAHQAcgBvAGwASQBEAAAXTQBhAG4AYQBnAGUAcgBHAFUASQBEAAAlQgB1AGwA
awBVAHAAbABvAGEAZABMAG8AYQBkAFMAaQB6AGUAABlTAHQAYQBnAGkAbgBnAFQAYQBiAGwAZQAA
JVMAbwB1AHIAYwBlAFEAdQBlAHIAeQBNAGEAcABwAGkAbgBnAAApVAByAHUAbgBjAGEAdABlAFMA
dABhAGcAaQBuAGcAVABhAGIAbABlAAAdUwBvAHUAcgBjAGUAVAB5AHAAZQBOAGEAbQBlAAALTwBM
AEUARABCAAARUAByAG8AdgBpAGQAZQByAAAlOwBDAG8AbgBuAGUAYwB0ACAAVABpAG0AZQBvAHUA
dAA9ADAAAGdMAG8AZwAgAFMAdABhAGcAaQBuAGcARQB4AGUAYwB1AHQAaQBvAG4AIABCAHUAbABr
AFMAUQBMACAAZQB2AGEAbAB1AGEAdABlAGQAIABTAG8AdQByAGMAZQAgAFEAdQBlAHIAeQAAFXIA
bwB3AHMAQwBvAHAAaQBlAGQAACVTAHQAYQBnAGkAbgBnAFAAYQBjAGsAYQBnAGUATgBhAG0AZQAA
G0QAZQBsAGkAbQBpAHQAZQByAEMAaABhAHIAACVGAG8AbABkAGUAcgBCAGEAcwBlAEwAbwBjAGEA
dABpAG8AbgAAFU0AZQByAGcAZQBRAHUAZQByAHkAABNIAGEAcwBIAGUAYQBkAGUAcgAAJ0YAaQBs
AGUAVABpAG0AZQBTAHQAYQBtAHAARgBvAHIAbQBhAHQAABdVAG4AcAByAG8AYwBlAHMAcwBlAGQA
AFdMAG8AZwAgAFMAdABhAGcAaQBuAGcARQB4AGUAYwB1AHQAaQBvAG4AIABTAHQAYQByAHQAaQBu
AGcAIABmAGkAbABlACAAcAByAG8AYwBlAHMAcwAuAABfTABvAGcAIABTAHQAYQBnAGkAbgBnAEUA
eABlAGMAdQB0AGkAbwBuACAAQwBvAG0AcABsAGUAdABlAGQAIABmAGkAbABlAHMAIABwAHIAbwBj
AGUAcwBzAGUAZAAuAABdTABvAGcAIABTAHQAYQBnAGkAbgBnAEUAeABlAGMAdQB0AGkAbwBuACAA
QwBvAG0AcABsAGUAdABlAGQAIABuAG8AIABmAGkAbABlAHMAIABmAG8AdQBuAGQALgAADS8AUwBR
AEwAIAAiAAAXIgAgAC8AUwBFAFIAVgBFAFIAIAAiAACAuyIAIAAvAE0AQQBYAEMATwBOAEMAVQBS
AFIARQBOAFQAIAAiACAALQAxACAAIgAgAC8AQwBIAEUAQwBLAFAATwBJAE4AVABJAE4ARwAgAE8A
RgBGACAALwBTAEUAVAAgACIAXABQAGEAYwBrAGEAZwBlAC4AVgBhAHIAaQBhAGIAbABlAHMAWwBT
AHQAYQBnAGkAbgBnAEMAbwBuAHQAcgBvAGwASQBEAF0ALgBWAGEAbAB1AGUAIgA7AAFfIAAvAFMA
RQBUACAAIgBcAFAAYQBjAGsAYQBnAGUALgBWAGEAcgBpAGEAYgBsAGUAcwBbAE0AYQBuAGEAZwBl
AHIARwBVAEkARABdAC4AVgBhAGwAdQBlACIAOwAiAABpIgAgAC8AUwBFAFQAIAAiAFwAUABhAGMA
awBhAGcAZQAuAFYAYQByAGkAYQBiAGwAZQBzAFsAVQBzAGUAcgA6ADoAUwB0AGEAcgB0AFQAaQBt
AGUAXQAuAFYAYQBsAHUAZQAiADsAIgAAdyIAIAAvAFMARQBUACAAIgBcAFAAYQBjAGsAYQBnAGUA
LgBWAGEAcgBpAGEAYgBsAGUAcwBbAEMAbwBuAG4AUwB0AHIAXwBFAFQATABSAGUAZgBlAHIAZQBu
AGMAZQBdAC4AVgBhAGwAdQBlACIAOwAiAFwAIgAAB1wAIgAiAACAnSIAIAAvAEMASABFAEMASwBQ
AE8ASQBOAFQASQBOAEcAIABPAEYARgAgAC8AUwBFAFQAIAAiAFwAUABhAGMAawBhAGcAZQAuAFYA
YQByAGkAYQBiAGwAZQBzAFsAQwBvAG4AbgBTAHQAcgBfAEUAVABMAFIAZQBmAGUAcgBlAG4AYwBl
AF0ALgBWAGEAbAB1AGUAIgA7ACIAXAAiAAAhXAAiACIAIAAvAFIARQBQAE8AUgBUAEkATgBHACAA
RQAAB2MAcwB2AAAHegBpAHAAAAd0AHgAdAAAByoALgAqAAAFLAAgAAAFJwAnAAFdRQBYAEUAQwAg
AGQAYgBvAC4AcwBwAEcAZQB0AFMAdABhAGcAaQBuAGcAUABhAGMAawBhAGcAZQBzAEYAaQBsAGUA
IABAAFMAdQBpAHQAZQBOAGEAbQBlAD0AJwABHScALAAgAEAAUABhAGMAawBhAGcAZQBzAD0AJwAB
BScAIAABS1MARQBMAEUAQwBUACAAQwBPAFUATgBUACgAKgApACAAQQBTACAAJwBSAG8AdwBzAFMA
dABhAGcAZQBkACcAIABGAFIATwBNACAAAS0gAFcASABFAFIARQAgAFMAdABhAGcAaQBuAGcASgBv
AGIASQBEACAAPQAgAAAVUgBvAHcAcwBTAHQAYQBnAGUAZAAAV1IAbwB3AEMAbwB1AG4AdABTAHQA
YQBnAGUAZAAgAC0AIABGAGEAaQBsAGUAZAAgAHQAbwAgAHIAZQB0AHUAcgBuACAAcgBvAHcAIABj
AG8AdQBuAHQAAQtFAFgARQBDACAAACMgAEAAUwB0AGEAZwBpAG4AZwBKAG8AYgBJAEQAIAA9ACAA
ABlSAG8AdwBzAEkAbgBzAGUAcgB0AGUAZAAAF1IAbwB3AHMARABlAGwAZQB0AGUAZAAAF1IAbwB3
AHMAVQBwAGQAYQB0AGUAZAAAcU0AZQByAGcAZQBEAGEAdABhACAAcwB0AG8AcgBlAGQAIABwAHIA
bwBjACAAZgBhAGkAbABlAGQAIAB0AG8AIAByAGUAdAB1AHIAbgAgAHIAbwB3ACAAYwBvAHUAbgB0
ACAAZABlAHQAYQBpAGwAcwAAVUUAWABFAEMAIABkAGIAbwAuAHMAcABHAGUAdABKAG8AYgBJAEQA
IABAAFQAeQBwAGUAIAA9ACAAJwBTAHQAYQBnAGkAbgBnAEoAbwBiAEkARAAnAAELSgBvAGIASQBE
AABfRwBlAHQAUwB0AGEAZwBpAG4AZwBKAG8AYgBJAEQAIABmAGEAaQBsAGUAZAAgAHQAbwAgAHIA
ZQB0AHUAcgBuACAAYQAgAFMAdABhAGcAaQBuAGcASgBvAGIASQBEAACAxVAAcgBvAHYAaQBkAGUA
cgA9AE0AaQBjAHIAbwBzAG8AZgB0AC4ASgBlAHQALgBPAGwAZQBEAGIALgA0AC4AMAA7ACAARABh
AHQAYQAgAFMAbwB1AHIAYwBlAD0AewAwAH0AOwBFAHgAdABlAG4AZABlAGQAIABQAHIAbwBwAGUA
cgB0AGkAZQBzAD0AIgBUAGUAeAB0ADsASABEAFIAPQBZAEUAUwA7AEYATQBUAD0ARABlAGwAaQBt
AGkAdABlAGQAIgAAD1MARQBMAEUAQwBUACAAADMgAEEAUwAgAFsAUwB0AGEAZwBpAG4AZwBKAG8A
YgBJAEQAXQAgAEYAUgBPAE0AIABbAAADXQAAE1AAcgBvAGMAZQBzAHMAZQBkAAAJLgB6AGkAcAAA
A1sAACVDAG8AbABOAGEAbQBlAEgAZQBhAGQAZQByAD0AVAByAHUAZQAAJ0MAbwBsAE4AYQBtAGUA
SABlAGEAZABlAHIAPQBGAGEAbABzAGUAACdGAG8AcgBtAGEAdAA9AEMAUwBWAEQAZQBsAGkAbQBp
AHQAZQBkAAAnRgBvAHIAbQBhAHQAPQBUAGEAYgBEAGUAbABpAG0AaQB0AGUAZAAAI0YAbwByAG0A
YQB0AD0ARABlAGwAaQBtAGkAdABlAGQAKAAAAykAAAdjAG8AbAAAAz0AAAsgAFQAZQB4AHQAABVT
AGMAaABlAG0AYQAuAGkAbgBpAAATSQBuAFAAcgBvAGMAZQBzAHMAAENaAGkAcAAgAGYAaQBsAGUA
IABoAGEAcwAgAG0AbwByAGUAIAB0AGgAYQBuACAAbwBuAGUAIABmAGkAbABlADoAIAAAeWYAaQBs
AGUAIABoAGEAcwAgAHQAbwAgAG0AYQBuAHkAIABmAHUAbABsAHMAdABvAHAAcwAgAGkAbgAgAHQA
aABlACAAbgBhAG0AZQAgAGUAeABwAGUAYwB0AGUAZAAgAGYAbwByAG0AYQB0ACAAKgAuACoAOgAg
AAADXwAAP1UAbgB6AGkAcABwAGUAZAAgAGYAaQBsAGUAIABjAGEAbgBuAG8AdAAgAGIAZQAgAGYA
bwB1AG4AZAA6ACAAAA1GAGEAaQBsAGUAZAAAQ1sAZABiAG8AXQAuAFsAcwBwAEcAZQB0AFMAdABh
AGcAaQBuAGcAUABhAGMAawBhAGcAZQBzAFMAcQBsAF0AIAAnAAGAuVMARQBMAEUAQwBUACAAYwAu
AEMATwBMAFUATQBOAF8ATgBBAE0ARQAgAEEAUwAgAGMAbwBsAHUAbQBuAF8AbgBhAG0AZQAgAEYA
UgBPAE0AIABJAE4ARgBPAFIATQBBAFQASQBPAE4AXwBTAEMASABFAE0AQQAuAEMATwBMAFUATQBO
AFMAIABjACAAVwBIAEUAUgBFACAAYwAuAFQAQQBCAEwARQBfAE4AQQBNAEUAIAA9ACAAJwABLSAA
QQBOAEQAIAAgAGMALgBUAEEAQgBMAEUAXwBTAEMASABFAE0AQQA9ACcAAW1GAGkAbABlACAAaABl
AGEAZABlAHIAIABmAGkAZQBsAGQAIABpAHMAIABuAG8AdAAgAGUAeABpAHMAdABlAGQALgAgAEYA
aQBsAGUAIABoAGUAYQBkAGUAcgAgAGYAaQBlAGwAZABzADoAIAAAVSAAZABvAGUAcwBuACcAdAAg
AGUAeABpAHMAdABlAGQAIABpAG4AIABzAG8AdQByAGMAZQAgAHEAdQBlAHIAeQAgAG0AYQBwAHAA
aQBuAGcAOgAgAAEbLgAgAEYAaQBsAGUAIABuAGEAbQBlADoAIAAAIywAIABTAHQAYQBnAGkAbgBn
ACAAdABhAGIAbABlADoAIAAAT1MAbwB1AHIAYwBlAHEAdQBlAHIAeQBtAGEAcABpAG4AZwAgAGkA
cwAgAHUAbgB2AGEAbABpAGQALgAgAE0AYQBwAHAAaQBuAGcAOgAgAAA1IABpAG4AIABzAG8AdQBy
AGMAZQAgAHEAdQBlAHIAeQAgAG0AYQBwAHAAaQBuAGcAOgAgAAA5IABkAG8AZQBzACAAbgBvAHQA
IABlAHgAaQBzAHQAZQBkACAAaQBuACAAdABhAGIAbABlADoAIAAAYVcAcgBvAG4AZwAgAGgAZQBh
AGQAZQByACAAbwByAGQAZQByAC4AIABGAGkAbABlACAAaABlAGEAZABlAHIAIABmAGkAZQBsAGQA
cwAgAGkAbgAgAGYAaQBsAGUAOgAgAAAZIABoAGEAcwAgAG8AcgBkAGUAcgA6ACAAAFMgAGkAcwAg
AG4AbwB0ACAAbQBhAHQAYwBoAGUAZAAgAHQAbwAgAHMAbwB1AHIAYwBlACAAcQB1AGUAcgB5ACAA
bQBhAHAAcABpAG4AZwA6ACAAAF1bAHMAcABJAG4AcwBlAHIAdABTAHQAYQBnAGkAbgBnAEUAeABl
AGMAdQB0AGkAbwBuAEwAbwBnAF0AIABAAFMAdABhAGcAaQBuAGcASgBvAGIASQBEACAAPQAgAAAl
LAAgAEAATQBhAG4AYQBnAGUAcgBHAFUASQBEACAAPQAgACcAASUnACwAIABAAFMAdQBjAGMAZQBz
AHMARgBsAGEAZwAgAD0AIAABJywAIABAAEMAbwBtAHAAbABlAHQAZQBkAEYAbABhAGcAIAA9ACAA
ACksACAAQABNAGUAcwBzAGEAZwBlAFMAbwB1AHIAYwBlACAAPQAgACcAAR8nACwAIABAAE0AZQBz
AHMAYQBnAGUAIAA9ACAAJwABIycALAAgAEAAUgBvAHcAcwBTAHQAYQBnAGUAZAAgAD0AIAABJSwA
IABAAFIAbwB3AHMASQBuAHMAZQByAHQAZQBkACAAPQAgAAAjLAAgAEAAUgBvAHcAcwBEAGUAbABl
AHQAZQBkACAAPQAgAAAjLAAgAEAAUgBvAHcAcwBVAHAAZABhAHQAZQBkACAAPQAgAABxLAAgAEAA
UwB0AGEAZwBpAG4AZwBQAGEAYwBrAGEAZwBlAFAAYQB0AGgAQQBuAGQATgBhAG0AZQAgAD0AIABO
AFUATABMACwAIABAAEEAYwB0AHUAYQBsAEYAaQBsAGUATgBhAG0AZQAgAD0AIAAnAAEjJwAsACAA
QABTAHQAYQByAHQAVABpAG0AZQAgAD0AIAAnAAEHJwAsACAAATVAAEUAeAB0AHIAYQBjAHQAUwB0
AGEAcgB0AFQAaQBtAGUAIAA9ACAATgBVAEwATAAsACAAACtAAEUAeAB0AHIAYQBjAHQAUwB0AGEA
cgB0AFQAaQBtAGUAIAA9ACAAJwABMUAARQB4AHQAcgBhAGMAdABFAG4AZABUAGkAbQBlACAAPQAg
AE4AVQBMAEwALAAgAAAnQABFAHgAdAByAGEAYwB0AEUAbgBkAFQAaQBtAGUAIAA9ACAAJwABKUAA
UwB0AGEAZwBpAG4AZwBDAG8AbgB0AHIAbwBsAEkARAAgAD0AIAAAJ0MAbwBuAG4AUwB0AHIAXwBE
AGUAcwB0AGkAbgBhAHQAaQBvAG4AACtiAFQAcgB1AG4AYwBhAHQAZQBFAHgAdAByAGEAYwB0AFQA
YQBiAGwAZQAAGUUAeAB0AHIAYQBjAHQAVABhAGIAbABlAAAZRQB4AHQAcgBhAGMAdABKAG8AYgBJ
AEQAACFFAHgAdAByAGEAYwB0AEMAbwBuAHQAcgBvAGwASQBEAAA/TABvAGcAIABFAHgAdAByAGEA
YwB0AEUAeABlAGMAdQB0AGkAbwBuAC4AQgB1AGwAawBVAHAAbABvAGEAZAAACU4AVQBMAEwAAF1b
AHMAcABJAG4AcwBlAHIAdABFAHgAdAByAGEAYwB0AEUAeABlAGMAdQB0AGkAbwBuAEwAbwBnAF0A
IABAAEUAeAB0AHIAYQBjAHQASgBvAGIASQBEACAAPQAgAAAfLAAgAEAAUwB0AGEAcgB0AFQAaQBt
AGUAIAA9ACAAACMsAEAATQBhAG4AYQBnAGUAcgBHAFUASQBEACAAPQAgACcAASknACwAIABAAFIA
bwB3AHMARQB4AHQAcgBhAGMAdABlAGQAIAA9ACAAAS0sACAAQABFAHgAdAByAGEAYwB0AFMAdABh
AHIAdABUAGkAbQBlACAAPQAgAAApLAAgAEAARQB4AHQAcgBhAGMAdABFAG4AZABUAGkAbQBlACAA
PQAgAAA1LAAgAEAATgBlAHgAdABFAHgAdAByAGEAYwB0AFMAdABhAHIAdABUAGkAbQBlACAAPQAg
AABBLAAgAEAARQB4AHQAcgBhAGMAdABQAGEAYwBrAGEAZwBlAFAAYQB0AGgAQQBuAGQATgBhAG0A
ZQAgAD0AIAAnAAEvJwAsACAAQABFAHgAdAByAGEAYwB0AEMAbwBuAHQAcgBvAGwASQBEACAAPQAg
AAEHYwB1AHIAAAM7AAB/QgB1AGwAawAgAGMAbwBwAHkAIABTAG8AdQByAGMAZQBRAHUAZQByAHkA
TQBhAHAAcABpAG4AZwAgAGgAYQBzACAAYQBuACAAaQBuAHYAYQBsAGkAZAAgAHAAYQBpAHIAIAAo
AGUAbQBwAHQAeQAgAHMAdAByAGkAbgBnACkAAICTQgB1AGwAawAgAGMAbwBwAHkAIABTAG8AdQBy
AGMAZQBRAHUAZQByAHkATQBhAHAAcABpAG4AZwAgAGgAYQBzACAAYQBuACAAaQBuAHYAYQBsAGkA
ZAAgAHAAYQBpAHIAIAAoAGMAbwB1AG4AdAAgAGQAbwBlAHMAIABuAG8AdAAgAG0AYQB0AGMAaAAp
ADoAIAAATUUAWABFAEMAIABzAHAARwBlAHQARAB0AGUAeABlAGMATABvAGMAYQB0AGkAbwBuACAA
QABSAHUAbgBBAHMAMwAyAEIAaQB0AD0AJwABHUwAbwBjAGEAdABpAG8AbgBEAHQAZQB4AGUAYwAA
AyIAAAMsAAAfVABSAFUATgBDAEEAVABFACAAVABBAEIATABFACAAABlPAEwARQBEAEIAXwBPAFIA
QQBDAEwARQAAF08ARABCAEMAXwBPAFIAQQBDAEwARQAACU8ARABCAEMAABNPAEwARQBEAEIAXwBT
AFEATAAAEU8ARABCAEMAXwBTAFEATAAAF18AcgBvAHcAcwBDAG8AcABpAGUAZAAAAy4AADVVAHMA
ZQByADoAOgBDAG8AbgBuAFMAdAByAF8ARQBUAEwAUgBlAGYAZQByAGUAbgBjAGUAADNVAHMAZQBy
ADoAOgBDAG8AbgBuAFMAdAByAF8ARABlAHMAdABpAG4AYQB0AGkAbwBuAAApVQBzAGUAcgA6ADoA
QwBvAG4AbgBTAHQAcgBfAFMAbwB1AHIAYwBlAAAlVQBzAGUAcgA6ADoARQB4AHQAcgBhAGMAdABU
AGEAYgBsAGUAACNVAHMAZQByADoAOgBTAG8AdQByAGMAZQBRAHUAZQByAHkAABdTAG8AdQByAGMA
ZQBRAHUAZQByAHkAADFVAHMAZQByADoAOgBTAG8AdQByAGMAZQBRAHUAZQByAHkATQBhAHAAcABp
AG4AZwAANVUAcwBlAHIAOgA6AFQAcgB1AG4AYwBhAHQAZQBFAHgAdAByAGEAYwB0AFQAYQBiAGwA
ZQAAMVUAcwBlAHIAOgA6AEIAdQBsAGsAVQBwAGwAbwBhAGQATABvAGEAZABTAGkAegBlAAApVQBz
AGUAcgA6ADoAUwBvAHUAcgBjAGUAVAB5AHAAZQBOAGEAbQBlAAAtVQBzAGUAcgA6ADoARQB4AHQA
cgBhAGMAdABTAHQAYQByAHQAVABpAG0AZQAAKVUAcwBlAHIAOgA6AEUAeAB0AHIAYQBjAHQARQBu
AGQAVABpAG0AZQAAJVUAcwBlAHIAOgA6AEUAeAB0AHIAYQBjAHQASgBvAGIASQBEAAAtVQBzAGUA
cgA6ADoARQB4AHQAcgBhAGMAdABDAG8AbgB0AHIAbwBsAEkARAAAI1UAcwBlAHIAOgA6AE0AYQBu
AGEAZwBlAHIARwBVAEkARAAANVUAcwBlAHIAOgA6AFMAbwB1AHIAYwBlAFEAdQBlAHIAeQBFAHYA
YQBsAHUAYQB0AGUAZAAAIVMAeQBzAHQAZQBtADoAOgBUAGEAcwBrAE4AYQBtAGUAAAreKQKmnSRD
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
vQTv/gAAAQAAAAEAV3vaFAAAAQBXe9oUPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEEAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAw
ADQAYgAwAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADAA
NgAwAGEAYwBlADUAMwA0ADYAYwA0ADQAYwBkAGEAYQAwADMAMwA1ADYAMQAyADcAYwAxADUAMABh
ADEAOAAAAEAADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA1ADMAMwA4AC4A
MwAxADUANwA1AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADEANAA4
ADcAYgA4ADUAMQAxADMAYwA0ADQANwAwAGIAYQA4ADcANwAwADUAZAA2ADcANgBiAGYAYwBiAGEA
NQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQBy
AGkAZwBoAHQAIABAACAAIAAyADAAMQAzAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAVABfADEANAA4ADcAYgA4ADUAMQAxADMAYwA0ADQANwAwAGIAYQA4ADcANwAw
ADUAZAA2ADcANgBiAGYAYwBiAGEANQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAAAABTAFQAXwAwADYAMABhAGMAZQA1ADMANAA2AGMANAA0AGMAZABhAGEAMAAzADMANQA2
ADEAMgA3AGMAMQA1ADAAYQAxADgAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADUAMwAzADgALgAzADEANQA3ADUAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAg
AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADUAMwAzADgALgAzADEANQA3ADUAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAMAAAAsDsAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
                  <Breakpoint
                    Enabled="True"
                    File="ScriptMain.cs"
                    Line="102"
                    Column="17" />
                  <Breakpoint
                    Enabled="True"
                    File="ScriptHelper.cs"
                    Line="1136"
                    Column="17" />
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Check that ConnectionCheck and DataCurrencyCheck Returned Desired Result and CurrentTime &lt; AccessWindowEndMins and PackagePath is correct"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{e1b8d3f7-e60a-4b15-aef5-3145caa6b655}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Check that ConnectionCheck and DataCurrencyCheck Returned Desired Result and CurrentTime &lt; AccessWindowEndMins and PackagePath is correct"
              DTS:ThreadHint="11">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_aab85ee5338e4b8d8972e0d901362a80"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="VisualBasic"
                  ReadOnlyVariables="ExtractPackagePathAndName, PackageExistsFlag, ConnectionCheckOutput, ConnectionCheckResult, AccessWindowEndMins, DataCurrencyCheckOutput, DataCurrencyCheckResult, ProcessType">
                  <ProjectItem
                    Name="ST_aab85ee5338e4b8d8972e0d901362a80.vbproj"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  --><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{F184B08F-C81C-45F6-A57F-5ABD9991F28F}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><OutputType>Library</OutputType><RootNamespace>ScriptTask_c51bdad5d736492dbd6dc67cd3f00614.vbproj</RootNamespace><AssemblyName>ST_aab85ee5338e4b8d8972e0d901362a80</AssemblyName><StartupObject></StartupObject><OptionExplicit>On</OptionExplicit><OptionCompare>Binary</OptionCompare><OptionStrict>Off</OptionStrict><OptionInfer>On</OptionInfer><ProjectGuid>{9DF5A801-E41F-47C9-B187-BC19D874B294}</ProjectGuid><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DefineConstants></DefineConstants><DefineDebug>true</DefineDebug><DefineTrace>true</DefineTrace><DebugSymbols>true</DebugSymbols><Optimize>false</Optimize><OutputPath>bin\</OutputPath><RegisterForComInterop>false</RegisterForComInterop><RemoveIntegerChecks>false</RemoveIntegerChecks><NoWarn>42016,42017,42018,42019,42032,42353,42354,42355</NoWarn></PropertyGroup><!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DefineConstants></DefineConstants><DefineDebug>false</DefineDebug><DefineTrace>true</DefineTrace><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>bin\</OutputPath><RegisterForComInterop>false</RegisterForComInterop><RemoveIntegerChecks>false</RemoveIntegerChecks><NoWarn>42016,42017,42018,42019,42032,42353,42354,42355</NoWarn></PropertyGroup><!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  --><PropertyGroup><PreBuildEvent></PreBuildEvent><PostBuildEvent></PostBuildEvent></PropertyGroup><!-- This sections specifies references for the project. --><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><!-- Visual Basic supports Importing namespaces (equivalent to using statements in C#).--><ItemGroup><Import Include="Microsoft.VisualBasic" /><Import Include="System" /><Import Include="System.Collections" /><Import Include="System.Data" /><Import Include="System.Diagnostics" /><Import Include="System.Windows.Forms" /></ItemGroup><!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  --><ItemGroup><AppDesigner Include="My Project\" /><Compile Include="My Project\AssemblyInfo.vb"><SubType>Code</SubType></Compile><EmbeddedResource Include="My Project\Resources.resx"><Generator>VbMyResourcesResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.vb</LastGenOutput><CustomToolNamespace>My.Resources</CustomToolNamespace></EmbeddedResource><Compile Include="My Project\Resources.Designer.vb"><AutoGen>True</AutoGen><DesignTime>True</DesignTime><DependentUpon>Resources.resx</DependentUpon><SubType>Code</SubType></Compile><None Include="My Project\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.vb</LastGenOutput></None><Compile Include="My Project\Settings.Designer.vb"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon><SubType>Code</SubType></Compile><Compile Include="ScriptMain.vb"><SubType>Code</SubType></Compile><!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    --></ItemGroup><!-- Include the build rules for a VB project.--><Import Project="$(MSBuildBinPath)\Microsoft.VisualBasic.targets" /><!-- This section defines VSTA properties that describe the host-changable project properties. --><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="vb" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" /><Host Name="SSIS_ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST110</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.vb"
                    Encoding="UTF8"><![CDATA[' Microsoft SQL Server Integration Services Script Task
' Write scripts using Microsoft Visual Basic
' The ScriptMain class is the entry point of the Script Task.

Imports System
Imports System.Data
Imports System.Math
Imports Microsoft.SqlServer.Dts.Runtime

<Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute> _
<System.CLSCompliantAttribute(False)> _
Partial Public Class ScriptMain
	Inherits Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase

	Enum ScriptResults
		Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success
		Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
	End Enum

	' The execution engine calls this method when the task executes.
	' To access the object model, use the Dts object. Connections, variables, events,
	' and logging features are available as static members of the Dts class.
	' Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
	' 
	' To open Code and Text Editor Help, press F1.
	' To open Object Browser, press Ctrl+Alt+J.

    Public Sub Main()
        Dts.TaskResult = ScriptResults.Success

        Try

            'Set the process to go asleep for 60s (1s = 1000 microseconds)
            'System.Threading.Thread.Sleep(60000)

            'Get the current time (in minutes) 
            Dim iCurrentMinutes As Integer = (DateTime.Now.Minute) + ((DateTime.Now.Hour) * 60)

            'Check that the package exists in the msdb database on the server
            If Dts.Variables("PackageExistsFlag").Value.ToString = "No" And Dts.Variables("ProcessType").Value.ToString = "SSIS" Then
                'Raise Custom Error for the package begin called not existing in the msdb database
                Dts.Events.FireError(1, Err.Source, "PackagePath: " & Dts.Variables("ExtractPackagePathAndName").Value.ToString & " is not valid on this server", "", 0)
                'Check if the current time (in minutes) is less than the AccessWindowEndMins
            ElseIf (iCurrentMinutes > Convert.ToInt32(Dts.Variables("AccessWindowEndMins").Value)) Then
                'Raise Custom Error for being outside load window
                Dts.Events.FireError(1, Err.Source, "Extract StartTime " & DateTime.Now.ToString & " is Outside Load Window", "", 0)

                'Check if we have been able to connect to the right number of databases for the extract
            ElseIf (Convert.ToInt32(Dts.Variables("ConnectionCheckOutput").Value) <> Convert.ToInt32(Dts.Variables("ConnectionCheckResult").Value)) Then
                'Raise Custom Error for not being able to connect to all required databases.
                Dts.Events.FireError(1, Err.Source, "PackagePath: " & Dts.Variables("ExtractPackagePathAndName").Value.ToString & " Only has access to " & Dts.Variables("ConnectionCheckOutput").Value.ToString & "out of " & Dts.Variables("ConnectionCheckResult").Value.ToString & " Required database connections", "", 0)

                'Check if the database we are connecting to have been backed up in the last 24 hours
                'This indicates there data currency or otherwise
            ElseIf (Convert.ToInt32(Dts.Variables("DataCurrencyCheckOutput").Value) <> Convert.ToInt32(Dts.Variables("DataCurrencyCheckResult").Value)) Then
                'Raise Custom Error for source databases not having current data.
                Dts.Events.FireError(1, Err.Source, "PackagePath: " & Dts.Variables("ExtractPackagePathAndName").Value.ToString & " has current data for " & Dts.Variables("DataCurrencyCheckOutput").Value.ToString & " out of " & Dts.Variables("DataCurrencyCheckResult").Value.ToString & " Required databases ", "", 0)

            End If

        Catch ex As Exception

            Dts.Events.FireError(1, ex.TargetSite.Name, ex.Message, "", 0)
        End Try
        '
        Dts.TaskResult = ScriptResults.Success
    End Sub

End Class]]></ProjectItem>
                  <ProjectItem
                    Name="My Project\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)" GeneratedClassNamespace="$safeprojectname" GeneratedClassName="MySettings">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="My Project\AssemblyInfo.vb"
                    Encoding="UTF8"><![CDATA[Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' General Information about an assembly is controlled through the following 
' set of attributes. Change these attribute values to modify the information
' associated with an assembly.

' Review the values of the assembly attributes

<Assembly: AssemblyTitle("ScriptTask_c51bdad5d736492dbd6dc67cd3f00614.vbproj")> 
<Assembly: AssemblyDescription("")> 
<Assembly: AssemblyCompany("Brightstar Logistics")> 
<Assembly: AssemblyProduct("ScriptTask_c51bdad5d736492dbd6dc67cd3f00614.vbproj")> 
<Assembly: AssemblyCopyright("Copyright @ Brightstar Logistics 2009")> 
<Assembly: AssemblyTrademark("")> 
<Assembly: CLSCompliant(True)> 

<Assembly: ComVisible(False)> 

'The following GUID is for the ID of the typelib if this project is exposed to COM
<Assembly: Guid("5d4f62b3-708b-4ddc-9b5d-84b7bd316f40")> 

' Version information for an assembly consists of the following four values:
'
'      Major Version
'      Minor Version 
'      Build Number
'      Revision
'
' You can specify all the values or you can default the Build and Revision Numbers 
' by using the '*' as shown below:
' <Assembly: AssemblyVersion("1.0.*")>

<Assembly: AssemblyVersion("1.0.0.0")> 
<Assembly: AssemblyFileVersion("1.0.0.0")> ]]></ProjectItem>
                  <ProjectItem
                    Name="My Project\Settings.Designer.vb"
                    Encoding="UTF8"><![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



Partial Friend NotInheritable Class MySettings
    Inherits System.Configuration.ApplicationSettingsBase

    Private Shared m_Value As MySettings

    Private Shared m_SyncObject As Object = New Object

    <System.Diagnostics.DebuggerNonUserCode()> _
    Public Shared ReadOnly Property Value() As MySettings
        Get
            If (MySettings.m_Value Is Nothing) Then
                System.Threading.Monitor.Enter(MySettings.m_SyncObject)
                If (MySettings.m_Value Is Nothing) Then
                    Try
                        MySettings.m_Value = New MySettings
                    Finally
                        System.Threading.Monitor.Exit(MySettings.m_SyncObject)
                    End Try
                End If
            End If
            Return MySettings.m_Value
        End Get
    End Property
End Class]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>scripttask_c51bdad5d736492dbd6dc67cd3f00614</msb:CodeName>
		<msb:DisplayName>scripttask_c51bdad5d736492dbd6dc67cd3f00614</msb:DisplayName>
		<msb:ProjectId>{E054E324-421B-45CB-9513-809CADFBC0ED}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_aab85ee5338e4b8d8972e0d901362a80.vbproj"/>
		<msb:File Include="My Project\AssemblyInfo.vb"/>
		<msb:File Include="My Project\Resources.resx"/>
		<msb:File Include="ScriptMain.vb"/>
		<msb:File Include="My Project\Resources.Designer.vb"/>
		<msb:File Include="My Project\Settings.settings"/>
		<msb:File Include="My Project\Settings.Designer.vb"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="My Project\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="My Project\Resources.Designer.vb"
                    Encoding="UTF8"><![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace My.Resources
    
    '''<summary>
    '''   A strongly-typed resource class, for looking up localized strings, etc.
    '''</summary>
    'This class was auto-generated by the Strongly Typed Resource Builder
    'class via a tool like ResGen or Visual Studio.NET.
    'To add or remove a member, edit your .ResX file then rerun ResGen
    'with the /str option, or rebuild your VS project.
    Class MyResources
        
        Private Shared _resMgr As System.Resources.ResourceManager
        
        Private Shared _resCulture As System.Globalization.CultureInfo
        
        Friend Sub New()
            MyBase.New
        End Sub
        
        '''<summary>
        '''   Returns the cached ResourceManager instance used by this class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared ReadOnly Property ResourceManager() As System.Resources.ResourceManager
            Get
                If (_resMgr Is Nothing) Then
                    Dim temp As System.Resources.ResourceManager = New System.Resources.ResourceManager("My.Resources.MyResources", GetType(MyResources).Assembly)
                    _resMgr = temp
                End If
                Return _resMgr
            End Get
        End Property
        
        '''<summary>
        '''   Overrides the current thread's CurrentUICulture property for all
        '''   resource lookups using this strongly typed resource class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared Property Culture() As System.Globalization.CultureInfo
            Get
                Return _resCulture
            End Get
            Set
                _resCulture = value
            End Set
        End Property
    End Class
End Namespace]]></ProjectItem>
                  <BinaryItem
                    Name="ST_aab85ee5338e4b8d8972e0d901362a80.dll">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
AgBwbysAAApvLAAACigRAAAKKDMAAAoCbyUAAApvKgAACnKJAgBwbysAAApvLAAACigRAAAKKDMA
AAo7vgAAAAJvJQAACm8uAAAKFygvAAAKbzAAAAodjSQAAAETBBEEFnJ/AABwohEEFwJvJQAACm8q
AAAKcpsAAHBvKwAACm8sAAAKbxUAAAqiEQQYcrkCAHCiEQQZAm8lAAAKbyoAAApyWQIAcG8rAAAK
bywAAApvFQAACqIRBBpy5wIAcKIRBBsCbyUAAApvKgAACnKJAgBwbysAAApvLAAACm8VAAAKohEE
HHL5AgBwohEEKDUAAApyCQEAcBZvMgAACibeNyUoNgAACgsCbyUAAApvLgAAChcHbzcAAApvOAAA
CgdvOQAACnIJAQBwFm8yAAAKJig6AAAK3gACbyUAAAoWbyYAAAoqQRwAAAAAAAAMAAAAWAMAAGQD
AAA3AAAAGwAAAbQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRl
ciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlU
b2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0
AgAAAAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwA
AABQCAAAI34AALwIAACwCgAAI1N0cmluZ3MAAAAAbBMAACQDAAAjVVMAkBYAABAAAAAjR1VJRAAA
AKAWAAAQBAAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJDwAAAPolMwAWAAABAAAANQAAAAoAAAAMAAAA
GQAAAAQAAABHAAAAAgAAADYAAAAPAAAABAAAAAgAAAAJAAAACQAAAAEAAAAFAAAAAQAAAAMAAAAD
AAAAAgAAAAAAhgoBAAAAAAAKAHgBTgEKAKwBjgEGALwBtQEKABQCTgEGAJICtQEKABQD6gIGAEoD
OQMGAHcDYgMOAN4DyQMSAF0ENAQGAH4EtQEOALEEmwQOAMoEmwQOAPcE3wQGACEFDgUKAGAFOQUK
AHgFEwAOAK0FkAUGAOIFwgUGAAAGtQEGACQGtQEKAD0GEwAGAIEGYgYGAKcGlQYGAM4GvQYGAOEG
DgUGAP4GtQEGAAgHtQESABEHNAQWAJUHdQcWAK0HdQcKAL8HOQUSANcHNAQKAPYHEwAKAAIIEwAG
ABsItQEGADMItQEKAEMIOQUGAF8IlQYGAHkIlQYGAKsItQESAMEINAQGACoJwgUGAEoJwgUGAIIJ
aAkGAJsJlQYGALgJYgYGAMYJlQYGAOEJlQYGAPwJlQYGABUKlQYGAC4KlQYGAEsKlQYAAAAAAQAA
AAAAAQABAAAAAAApADcABQABAAEAAAAAAG0ANwAJAAEAAgAAARAAeAA3AA0AAQADAAUBAACCAAAA
DQAFAAgABQEAAJAAAAANAAUADwAAAAAAqwC3AA0ABgARAAABEAD3AAIBJQAIABUAAQAAADUBAgEp
AAoAGAACAQAAQAEAAC0ACgAaADEA1wEgADEAAAItADEAIgI6ADEARwJHACEAIwOQABEAWgOdABEA
gwOhABEA9gO/ABEA/gPDAAYGgwTZAFaAiwTcAFaAkwTcAFAgAAAAAAYYiAETAAEAWCAAAAAABhiI
ARMAAQBgIAAAAAARGMMBFwABAIwgAAAAABMIygEbAAEApCAAAAAAEwjwASgAAQC8IAAAAAATCBkC
NQABANQgAAAAABMINwJCAAEA7CAAAAAARgJ9AmMAAQAIIQAAAABGAoYCaAACABwhAAAAAIMAlwJs
AAIANCEAAAAARgKfAnEAAgBIIQAAAAARAKgCeAACAGQhAAAAAAEAxgKAAAMAgCEAAAAABhiIARMA
BACIIQAAAAADCNoCiwAEALwhAAAAAAYYiAETAAQA0CEAAAAAAxiIARMABADYIQAAAAAWCI8DpQAE
ABQiAAAAABYIowOqAAQAKCIAAAAAFgivA68ABAAwIgAAAAARGMMBFwAFAEQiAAAAAAYYiAETAAUA
TCIAAAAAFggLBMYABQCoIgAAAAAGGIgBEwAFALAiAAAAAAYAeQQTAAUAAAABAIQCAAABAL0CAAAB
AL0CAAABALsDCQCIARMAYQCIAeoAcQCIAfkAEQCIARMAeQCIARMAJACIARMALACIARMANACIARMA
PACIARMAJADaAosALADaAosANADaAosAPADaAosAgQCIARMAiQCIARMAkQCIAUgBmQDxBZMBGQB9
AmMAGQCGAmgAKQASBqABGQCfAnEAqQAuBrABGQCIARMAsQCIAcABRAAjA5AATAALBIsATABYBj0C
TACIARMAuQCIAUwCKQCwBlcCOQCIAVwCSQCIARMAyQDWBngCyQDcBngC0QCIARMAUQCIARMAUQAj
B4IC6QArB4cC4QA6B4wC4QBCB2gA4QBNB2gA6QCfB5EC8QC2B5YC+QALBJwCAQHJB6AC6QDrB6cC
EQEMCK0CGQEQCHEAIQEiCLMCCQEpCLoCKQE7CMMC4QCfAnEAIQEiCMgCMQFPCM4C2QBqCNQCQQGE
CHEA2QCNCHEAMQGZCBcASQGIAUwCUQGIARMAWQGIAYcCYQGIARMAaQGIAUgBcQGIAUgBeQGIAUgB
gQGIAUgBiQGIAUgBkQGIAUgBmQGIAUgBoQGIAUgBqQGIAUgBCAAsAOAACAAwAOUAKQCDAGEBLgAj
Ar4DLgA7Ar4DLgAbApMDLgDzAe8CLgD7AQ4DLgATAlECLgAzAlECLgDrAeYCLgArAvYDLgADAlYD
LgALAmMDLgDrAFECLgDbAY0DQAArAOUAQAATAPAAQwATAPAAQwAbAP8ASQCDAH8BYwAbAP8AYwAT
APAAaQCDAHIBgAArAOUAgwBzAOUAgwB7AOUAgwAbAP8AiQCDAE0BoAArAOUAowDDAMgBowATAPAA
wAArAOUAwwATAPAAwwDrAFECyQATAG8C4AArAOUA6QATAG8CAAErAOUAAAETAPAACQEbAeUAIAEr
AOUAIAETAPAAIwHjAeUAIwHbAVECQAErAOUAQAETAPAAYAETAPAAYAErAOUAgAErAOUAoAErAOUA
wAErAOUAwAETAPAA4AErAOUAAAITAPAAAAIrAOUANAE5AT4BQwGYAZwBpwGsAbsBuwFDAmMCagJ9
AtoCBAABAAYABQAHAAYACAAIAAAArAFPAAAAZQJUAAAAFAJZAAAAcQJeAAAALQOYAAAASgO1AAAA
wQO6AAAAuwPLAAIABAADAAIABQAFAAIABgAHAAIABwAJAAIADwALAAIAEgANAAIAEwAPAAEAFAAP
AAIAFwARAHUAdQCIABgBHwEmAS0BKgIxAgSAAAABAAAAAAAAAAAAAAAAAGIKAAAEAAAAAAAAAAAA
AAABAAoAAAAAAAoAAAAAAAAAAAAAAAoAEwAAAAAABAAAAAAAAAAAAAAAAQC1AQAAAAALAAAAAAAA
AAAAAADQABUEAAAAAAsAAAAAAAAAAAAAANAAVgcAAAAAAAAAAAEAAADjCAAABQAEAAYABAAKAAkA
AAAQAAwAuwIAABAAGQC7AgAAAAAbALsCLQC2AS0AOAIAAAAAADxNb2R1bGU+AG1zY29ybGliAE1p
Y3Jvc29mdC5WaXN1YWxCYXNpYwBNeUFwcGxpY2F0aW9uAFNjcmlwdFRhc2tfYzUxYmRhZDVkNzM2
NDkyZGJkNmRjNjdjZDNmMDA2MTQudmJwcm9qLk15AE15Q29tcHV0ZXIATXlQcm9qZWN0AE15V2Vi
U2VydmljZXMAVGhyZWFkU2FmZU9iamVjdFByb3ZpZGVyYDEATXlSZXNvdXJjZXMAU2NyaXB0VGFz
a19jNTFiZGFkNWQ3MzY0OTJkYmQ2ZGM2N2NkM2YwMDYxNC52YnByb2ouTXkuUmVzb3VyY2VzAE15
U2V0dGluZ3MAU2NyaXB0VGFza19jNTFiZGFkNWQ3MzY0OTJkYmQ2ZGM2N2NkM2YwMDYxNC52YnBy
b2oAU2NyaXB0TWFpbgBTY3JpcHRSZXN1bHRzAE1pY3Jvc29mdC5WaXN1YWxCYXNpYy5BcHBsaWNh
dGlvblNlcnZpY2VzAEFwcGxpY2F0aW9uQmFzZQAuY3RvcgBNaWNyb3NvZnQuVmlzdWFsQmFzaWMu
RGV2aWNlcwBDb21wdXRlcgBTeXN0ZW0AT2JqZWN0AC5jY3RvcgBnZXRfQ29tcHV0ZXIAbV9Db21w
dXRlck9iamVjdFByb3ZpZGVyAGdldF9BcHBsaWNhdGlvbgBtX0FwcE9iamVjdFByb3ZpZGVyAFVz
ZXIAZ2V0X1VzZXIAbV9Vc2VyT2JqZWN0UHJvdmlkZXIAZ2V0X1dlYlNlcnZpY2VzAG1fTXlXZWJT
ZXJ2aWNlc09iamVjdFByb3ZpZGVyAEFwcGxpY2F0aW9uAFdlYlNlcnZpY2VzAEVxdWFscwBvAEdl
dEhhc2hDb2RlAFR5cGUAR2V0VHlwZQBUb1N0cmluZwBDcmVhdGVfX0luc3RhbmNlX18AVABpbnN0
YW5jZQBEaXNwb3NlX19JbnN0YW5jZV9fAGdldF9HZXRJbnN0YW5jZQBNaWNyb3NvZnQuVmlzdWFs
QmFzaWMuTXlTZXJ2aWNlcy5JbnRlcm5hbABDb250ZXh0VmFsdWVgMQBtX0NvbnRleHQAR2V0SW5z
dGFuY2UAU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAX3Jlc01ncgBTeXN0ZW0uR2xv
YmFsaXphdGlvbgBDdWx0dXJlSW5mbwBfcmVzQ3VsdHVyZQBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdl
dF9DdWx0dXJlAHNldF9DdWx0dXJlAFZhbHVlAEN1bHR1cmUAU3lzdGVtLkNvbmZpZ3VyYXRpb24A
QXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAbV9WYWx1ZQBtX1N5bmNPYmplY3QAZ2V0X1ZhbHVlAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNr
cy5TY3JpcHRUYXNrAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBNYWluAEVudW0AdmFsdWVf
XwBTdWNjZXNzAEZhaWx1cmUAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0
dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBTeXN0ZW0uQ29kZURvbS5Db21waWxlcgBHZW5l
cmF0ZWRDb2RlQXR0cmlidXRlAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlckhpZGRlbkF0dHJp
YnV0ZQBNaWNyb3NvZnQuVmlzdWFsQmFzaWMuQ29tcGlsZXJTZXJ2aWNlcwBTdGFuZGFyZE1vZHVs
ZUF0dHJpYnV0ZQBIaWRlTW9kdWxlTmFtZUF0dHJpYnV0ZQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwu
RGVzaWduAEhlbHBLZXl3b3JkQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vydmlj
ZXMAUnVudGltZUhlbHBlcnMAR2V0T2JqZWN0VmFsdWUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlw
ZUZyb21IYW5kbGUAQWN0aXZhdG9yAENyZWF0ZUluc3RhbmNlAE15R3JvdXBDb2xsZWN0aW9uQXR0
cmlidXRlAHNldF9WYWx1ZQBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMAQ29tVmlzaWJs
ZUF0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVt
LlRocmVhZGluZwBNb25pdG9yAEVudGVyAEV4aXQARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0
ZQBFeGNlcHRpb24ARGF0ZVRpbWUAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBzZXRfVGFza1Jl
c3VsdABnZXRfTm93AGdldF9NaW51dGUAZ2V0X0hvdXIATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5h
Z2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFyaWFibGVzAGdldF9WYXJp
YWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0AT3BlcmF0b3JzAENvbXBhcmVTdHJpbmcARXZlbnRzT2Jq
ZWN0V3JhcHBlcgBnZXRfRXZlbnRzAEluZm9ybWF0aW9uAEVyck9iamVjdABFcnIAZ2V0X1NvdXJj
ZQBTdHJpbmcAQ29uY2F0AEZpcmVFcnJvcgBDb252ZXJ0AFRvSW50MzIAUHJvamVjdERhdGEAU2V0
UHJvamVjdEVycm9yAE1ldGhvZEJhc2UAZ2V0X1RhcmdldFNpdGUATWVtYmVySW5mbwBnZXRfTmFt
ZQBnZXRfTWVzc2FnZQBDbGVhclByb2plY3RFcnJvcgBDTFNDb21wbGlhbnRBdHRyaWJ1dGUAU1NJ
U1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAFNjcmlwdFRhc2tfYzUxYmRhZDVkNzM2NDky
ZGJkNmRjNjdjZDNmMDA2MTQudmJwcm9qLlJlc291cmNlcy5yZXNvdXJjZXMAQ29tcGlsYXRpb25S
ZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBTeXN0ZW0u
UnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUZpbGVW
ZXJzaW9uQXR0cmlidXRlAEd1aWRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUA
QXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2Vt
Ymx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5
VGl0bGVBdHRyaWJ1dGUAU1RfYWFiODVlZTUzMzhlNGI4ZDg5NzJlMGQ5MDEzNjJhODAAU1RfYWFi
ODVlZTUzMzhlNGI4ZDg5NzJlMGQ5MDEzNjJhODAuZGxsAAAAADFNAHkALgBSAGUAcwBvAHUAcgBj
AGUAcwAuAE0AeQBSAGUAcwBvAHUAcgBjAGUAcwAAI1AAYQBjAGsAYQBnAGUARQB4AGkAcwB0AHMA
RgBsAGEAZwAABU4AbwAAF1AAcgBvAGMAZQBzAHMAVAB5AHAAZQAACVMAUwBJAFMAABtQAGEAYwBr
AGEAZwBlAFAAYQB0AGgAOgAgAAAzRQB4AHQAcgBhAGMAdABQAGEAYwBrAGEAZwBlAFAAYQB0AGgA
QQBuAGQATgBhAG0AZQAAOSAAaQBzACAAbgBvAHQAIAB2AGEAbABpAGQAIABvAG4AIAB0AGgAaQBz
ACAAcwBlAHIAdgBlAHIAAAEAJ0EAYwBjAGUAcwBzAFcAaQBuAGQAbwB3AEUAbgBkAE0AaQBuAHMA
ACVFAHgAdAByAGEAYwB0ACAAUwB0AGEAcgB0AFQAaQBtAGUAIAAALyAAaQBzACAATwB1AHQAcwBp
AGQAZQAgAEwAbwBhAGQAIABXAGkAbgBkAG8AdwAAK0MAbwBuAG4AZQBjAHQAaQBvAG4AQwBoAGUA
YwBrAE8AdQB0AHAAdQB0AAArQwBvAG4AbgBlAGMAdABpAG8AbgBDAGgAZQBjAGsAUgBlAHMAdQBs
AHQAACkgAE8AbgBsAHkAIABoAGEAcwAgAGEAYwBjAGUAcwBzACAAdABvACAAAA9vAHUAdAAgAG8A
ZgAgAAA9IABSAGUAcQB1AGkAcgBlAGQAIABkAGEAdABhAGIAYQBzAGUAIABjAG8AbgBuAGUAYwB0
AGkAbwBuAHMAAC9EAGEAdABhAEMAdQByAHIAZQBuAGMAeQBDAGgAZQBjAGsATwB1AHQAcAB1AHQA
AC9EAGEAdABhAEMAdQByAHIAZQBuAGMAeQBDAGgAZQBjAGsAUgBlAHMAdQBsAHQAAC0gAGgAYQBz
ACAAYwB1AHIAcgBlAG4AdAAgAGQAYQB0AGEAIABmAG8AcgAgAAARIABvAHUAdAAgAG8AZgAgAAAp
IABSAGUAcQB1AGkAcgBlAGQAIABkAGEAdABhAGIAYQBzAGUAcwAgAAAAFpdBkda7Ck2slfFSNuem
XgAIt3pcVhk04IkIsD9ffxHVCjoDIAABAwAAAQQAABIMBwYVEhgBEgwEAAASCAcGFRIYARIIBAAA
EhEHBhUSGAESEQQAABIUBwYVEhgBEhQECAASDAQIABIIBAgAEhEECAASFAQgAQIcAyAACAQgABIV
AyAADgIeAAcQAQEeAB4ABzABAQEQHgACEwAEIAATAAcGFRIZARMABCgAEwADBhIdAwYSIQQAABId
BAAAEiEFAAEBEiEECAASHQQIABIhAwYSIAIGHAQAABIgBAgAEiAIiYRdzYCAzJECBggDBhEoBAAA
AAAEAQAAAAUgAQERNQgBAAEAAAAAAAUgAgEODhgBAApNeVRlbXBsYXRlCDEwLjAuMC4wAAAGFRIY
ARIMBhUSGAESCAYVEhgBEhEGFRIYARIUBAcBEgwEBwESCAQHARIRBAcBEhQEIAEBDhMBAA5NeS5X
ZWJTZXJ2aWNlcwAAEAEAC015LkNvbXB1dGVyAAAMAQAHTXkuVXNlcgAAEwEADk15LkFwcGxpY2F0
aW9uAAAEAAEcHAMHAQIDBwEIBgABEhURUQQHARIVAwcBDgUQAQAeAAQKAR4ABAcBHgAHIAQBDg4O
DmEBADRTeXN0ZW0uV2ViLlNlcnZpY2VzLlByb3RvY29scy5Tb2FwSHR0cENsaWVudFByb3RvY29s
EkNyZWF0ZV9fSW5zdGFuY2VfXxNEaXNwb3NlX19JbnN0YW5jZV9fAAAABhUSGAETAAYVEhkBEwAE
CgETAAUgAQETAAgHAxMAEwATAAQgAQECBQEAAAAABCAAEmEGIAIBDhJhBgcCEh0SHQQHARIhCAEA
AgAAAAAABAABARwEBwESIAQgABJ1BCABAQgEAAARcQQgABJ5BSABEn0cAyAAHAYAAwgODgIFIAAS
gIUFAAASgI0GAAMODg4OCCAFAggODg4IBAABCBwFAAEOHQ4FAAEBEm0FIAASgJ0LBwUIEm0RcRFx
HQ4IAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBRwEAGi5ORVRGcmFtZXdv
cmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0
DAEABzEuMC4wLjAAACkBACQ1ZDRmNjJiMy03MDhiLTRkZGMtOWI1ZC04NGI3YmQzMTZmNDAAAAUB
AAEAACoBACVDb3B5cmlnaHQgQCBCcmlnaHRzdGFyIExvZ2lzdGljcyAyMDA5AAA3AQAyU2NyaXB0
VGFza19jNTFiZGFkNWQ3MzY0OTJkYmQ2ZGM2N2NkM2YwMDYxNC52YnByb2oAABkBABRCcmlnaHRz
dGFyIExvZ2lzdGljcwAAEEIAAAAAAAAAAAAALkIAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBC
AAAAAAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAA
ABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA
NAQAAAAAAAAAAAAANAQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4A
AAEAAAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEA
cgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACw
BJQDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAHADAAABADAAMAAwADAAMAA0AGIA
MAAAAEwAFQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAQgByAGkAZwBoAHQAcwB0AGEAcgAg
AEwAbwBnAGkAcwB0AGkAYwBzAAAAAACQADMAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8A
bgAAAAAAUwBjAHIAaQBwAHQAVABhAHMAawBfAGMANQAxAGIAZABhAGQANQBkADcAMwA2ADQAOQAy
AGQAYgBkADYAZABjADYANwBjAGQAMwBmADAAMAA2ADEANAAuAHYAYgBwAHIAbwBqAAAAAAAwAAgA
AQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AMAAuADAAAABwACgAAQBJAG4AdABl
AHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGEAYQBiADgANQBlAGUANQAzADMAOABlADQAYgA4AGQA
OAA5ADcAMgBlADAAZAA5ADAAMQAzADYAMgBhADgAMAAuAGQAbABsAAAAcAAmAAEATABlAGcAYQBs
AEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAQgByAGkAZwBoAHQA
cwB0AGEAcgAgAEwAbwBnAGkAcwB0AGkAYwBzACAAMgAwADAAOQAAAHgAKAABAE8AcgBpAGcAaQBu
AGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBhAGEAYgA4ADUAZQBlADUAMwAzADgAZQA0AGIA
OABkADgAOQA3ADIAZQAwAGQAOQAwADEAMwA2ADIAYQA4ADAALgBkAGwAbAAAAIgAMwABAFAAcgBv
AGQAdQBjAHQATgBhAG0AZQAAAAAAUwBjAHIAaQBwAHQAVABhAHMAawBfAGMANQAxAGIAZABhAGQA
NQBkADcAMwA2ADQAOQAyAGQAYgBkADYAZABjADYANwBjAGQAMwBmADAAMAA2ADEANAAuAHYAYgBw
AHIAbwBqAAAAAAA0AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAA
LgAwAAAAOAAIAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAu
ADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAEAyAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Derive Package Path if it exists"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{808ee1e1-1561-42d2-b78c-e5875ef020f4}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Derive Package Path if it exists"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="11">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"spCheckSsisPath '" +   @[User::ExtractPackagePathAndName] + "'"</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{C2817111-D0E8-4039-882F-A0B2BE4501FF}"
                  SQLTask:SqlStatementSource="spCheckSsisPath '\UAT\ETL-RegionalReporting\ExtractExcelMasterDataRange'"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::DerivedPathAndName" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{ab1a1ddd-5894-46a8-ba5d-aedbd8e3cc1c}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Do Nothing"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="8">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="SELECT 1" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing 1"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Do Nothing"
              DTS:DTSID="{b8e30b99-aaa0-4ac4-999c-e12395cfef8f}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Do Nothing 1"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="10">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="SELECT 1" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Execute Extract Package"
              DTS:CreationName="SSIS.ExecutePackageTask.3"
              DTS:Description="Execute Package Task"
              DTS:DTSID="{2b349fbf-c83b-46c6-8ffa-32c2a077c089}"
              DTS:ExecutableType="SSIS.ExecutePackageTask.3"
              DTS:LocaleID="-1"
              DTS:ObjectName="Execute Extract Package"
              DTS:TaskContact="Executes DTS packages;Microsoft Corporation; Microsoft SQL Server v9; (C) 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="PackageName">@[User::ExtractPackagePathAndName]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <ExecutePackageTask>
                  <PackageName>\UAT\ETL-RegionalReporting\ExtractExcelMasterDataRange</PackageName>
                  <Connection>{C2817111-D0E8-4039-882F-A0B2BE4501FF}</Connection>
                </ExecutePackageTask>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Execute Store Proc"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute Store Proc"
              DTS:DTSID="{dc6dcc4a-a866-4476-9c06-e6b9e741dbbf}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Execute Store Proc"
              DTS:ThreadHint="12">
              <DTS:Variables />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_ec8a7a9a1d4b445582e7933b4f40f6db"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp">
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_446a96418cd448698d543797d4cc0ab4.Properties.Settings.get_Default():ST_446a96418cd448698d543797d4cc0ab4.Properties.Sett" +
    "ings")]

namespace ST_446a96418cd448698d543797d4cc0ab4.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_ec8a7a9a1d4b445582e7933b4f40f6db.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{555E2173-E0A4-4AF6-B638-0288B4D11225}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_446a96418cd448698d543797d4cc0ab4</RootNamespace><AssemblyName>ST_ec8a7a9a1d4b445582e7933b4f40f6db</AssemblyName><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST110</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
#endregion

namespace ST_446a96418cd448698d543797d4cc0ab4
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            string SourceCmdText = "";
            
            try
            {
                Variables vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ConnStr_Source", ref vars);
                string ConnStr_Source = vars[0].Value.ToString();
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::SourceQuery", ref vars);
                string SourceQuery = vars[0].Value.ToString();
                vars.Unlock();

                Variables varsSourceQueryEvaluated = null;
                Dts.VariableDispenser.LockOneForRead("User::SourceQueryEvaluated", ref varsSourceQueryEvaluated);
                var SourceQueryEvaluated = varsSourceQueryEvaluated[0];
                SourceQueryEvaluated.EvaluateAsExpression = false;
                SourceQueryEvaluated.Expression = SourceQuery;
                SourceQueryEvaluated.EvaluateAsExpression = true;
                SourceCmdText = SourceQueryEvaluated.Value.ToString();

                LogMessage(SourceCmdText);

                var dsb = new System.Data.Common.DbConnectionStringBuilder();

                checkConnection(ConnStr_Source);
                dsb.ConnectionString = ConnStr_Source;
                dsb.Remove("Provider");
                ConnStr_Source = dsb.ConnectionString;

                var SrcConn = new SqlConnection(ConnStr_Source + ";Connect Timeout=0");

                var sCommand = new SqlCommand(SourceCmdText, SrcConn);
                sCommand.CommandTimeout = 0;

                SrcConn.Open();
                sCommand.ExecuteNonQuery();
                SrcConn.Close();
                SrcConn.Dispose();


                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (System.Exception ex)
            {
                Variables vars = null;
                Dts.VariableDispenser.LockOneForRead("System::TaskName", ref vars);
                string TaskName = vars[0].Value.ToString();
                vars.Unlock();

                Dts.Events.FireError(1, TaskName, SourceCmdText + Environment.NewLine + ex.ToString(), "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
		}
        private void checkConnection(string ConnStr)
        {
            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr;
            dsb.Remove("Provider");

            SqlConnection con = new SqlConnection(dsb.ConnectionString);
            con.Open();
            con.Close();
        }
        private void LogMessage(string SourceCmdText)
        {
            Variables vars = null;
            Dts.VariableDispenser.LockOneForRead("User::ConnStr_ETLReference", ref vars);
            string ConnStr_ETLReference = vars[0].Value.ToString();
            vars.Unlock();

            vars = null;
            Dts.VariableDispenser.LockOneForRead("User::ExtractEndTime", ref vars);
            string ExtractEndTime = vars[0].Value.ToString();
            vars.Unlock();

            vars = null;
            Dts.VariableDispenser.LockOneForRead("User::ExtractJobID", ref vars);
            int ExtractJobID = Convert.ToInt32(vars[0].Value);
            vars.Unlock();

            vars = null;
            Dts.VariableDispenser.LockOneForRead("User::ExtractControlID", ref vars);
            int ExtractControlID = Convert.ToInt32(vars[0].Value);
            vars.Unlock();

            vars = null;
            Dts.VariableDispenser.LockOneForRead("User::ManagerGUID", ref vars);
            string ManagerGUID = vars[0].Value.ToString();
            vars.Unlock();

            SourceCmdText = SourceCmdText.Replace("'", "''");
            SourceCmdText = SourceCmdText.Length <= 3999 ? SourceCmdText : SourceCmdText.Substring(0, 3999);

            string sqlCmdLog = "[spInsertExtractExecutionLog] "
                             + "@ExtractJobID = " + ExtractJobID + ", "
                             + "@StartTime = NULL, "
                             + "@ManagerGUID = '" + ManagerGUID + "', "
                             + "@SuccessFlag = 1, "
                             + "@CompletedFlag = 0, "
                             + "@MessageSource = 'Log ExtractExecution.StoredProc', "
                             + "@Message = '" + SourceCmdText + "', "
                             + "@RowsExtracted = 0, "
                             + "@ExtractStartTime = '" + ExtractEndTime + "', "
                             + "@ExtractEndTime = '" + ExtractEndTime + "', "
                             + "@NextExtractStartTime = '" + ExtractEndTime + "', "
                             + "@ExtractPackagePathAndName = '', "
                             + "@ExtractControlID = " + ExtractControlID;

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");
            ConnStr_ETLReference = dsb.ConnectionString;

            var SrcConn = new SqlConnection(ConnStr_ETLReference);

            var sCommand = new SqlCommand(sqlCmdLog, SrcConn);
            SrcConn.Open();
            sCommand.ExecuteNonQuery();
            SrcConn.Close();
            SrcConn.Dispose();
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_446a96418cd448698d543797d4cc0ab4</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_446a96418cd448698d543797d4cc0ab4</msb:DisplayName>
		<msb:ProjectId>{C8422D35-F217-42E3-B64C-A8B506D5DB92}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_ec8a7a9a1d4b445582e7933b4f40f6db.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_446a96418cd448698d543797d4cc0ab4")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_446a96418cd448698d543797d4cc0ab4")]
[assembly: AssemblyCopyright("Copyright @  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_446a96418cd448698d543797d4cc0ab4.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_446a96418cd448698d543797d4cc0ab4.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_446a96418cd448698d543797d4cc0ab4.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_446a96418cd448698d543797d4cc0ab4.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_446a96418cd448698d543797d4cc0ab4.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_ec8a7a9a1d4b445582e7933b4f40f6db.dll">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
bFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4w
LjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0
ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNK
QgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAA5AQAACN+AABQBQAA2AcAACNTdHJpbmdz
AAAAACgNAADoBAAAI1VTABASAAAQAAAAI0dVSUQAAAAgEgAA7AEAACNCbG9iAAAAAAAAAAIAAAFX
HaIBCQMAAAD6JTMAFgAAAQAAACoAAAAFAAAABgAAAAsAAAADAAAANQAAAAIAAAAPAAAABAAAAAIA
AAADAAAABAAAAAEAAAAFAAAAAQAAAAEAAAAAAAoAAQAAAAAABgDBALoACgDdAMgADgA9ARQBBgBZ
AboABgBvAV4BBgCgAYsBBgCIAm4CBgCzAqECBgDKAqECBgDnAqECBgAGA6ECBgAfA6ECBgA4A6EC
BgBTA6ECBgBuA6ECBgCHA6ECBgDAA6ADBgDgA6ADBgA1BCIEBgBSBLoABgBXBLoABgB7BKECCgCn
BJEECgDABJEEBgDVBKADDgD3BBQBDgAZBRQBEgByBVIFEgCaBVIFBgCzBboAEgC5BVIFFgAsBhkG
BgB3BroAFgCbBoUGFgCpBoUGFgC0BhkGFgDRBhkGCgD5BpEEDgAaBxQBBgA5B7oABgBbB7oABgBl
B7oAAAAAAAEAAAAAAAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUAAQAQAHQAfwANAAQA
CAADAQAAowAAABEABAAMABEAfwETABEArAEXABEA9gE5AAYGOgJMAFaAQgJPAFaASgJPAFAgAAAA
AIMYvAEbAAEAWCAAAAAAkwjCAR8AAQCRIAAAAACTCNYBJAABAJggAAAAAJMI4gEpAAEAoCAAAAAA
lggGAj0AAgCzIAAAAACGGLwBGwACAKcgAAAAAJEY8ASJAAIAvCAAAAAAhgAaAhsAAgCcIgAAAACB
AB8CRwACANwiAAAAAIEALwJHAAMAAiUAAAAAhhi8ARsABAAAAAEAUgIAAAEAWAIAAAEAYAI5ALwB
RwBBALwBRwBJALwBRwBRALwBRwBZALwBRwBhALwBRwBpALwBRwBxALwBRwB5ALwBRwCBALwBRwCJ
ALwBXQCRALwBGwCZALwBGwAJALwBGwChAGkEYgChAIQEaQApALwBbgC5ALwBegDJALwBGwARALwB
GwDRALwBGwAZACsFjQDZAIQFkgDhAKQFlwDpAMIFnwD5AMsFpQAJANUFqQDpAN4FGwD5AOUFrQD5
AP4FRwABAbwBGwABAUYGRwABAVsGsgABAWIGqQAJAX4GtwARAbwBRwAZAbwBvQAhAb4GXQApAd4G
GwAhAeMGxQApAfMGGwAxAQMHGwDZAAsHXQDZAC4HyQBBAUUHzwAJAX4G0wA5AVEH2gBRAW0HBwEJ
AXUHDAEJAX0HxQAJAYgHEgEJAX4GGAEZALwBGwAIABQAUwAIABgAWAApAJMAgAAuABsApQEuACMA
pQEuAGMAywEuAAsANAEuABMAfAEuADMAfAEuACsApQEuADsAqwEuAEMApQEuAFsAwgFDAGsAWABJ
AJMAgABhAJsAWACDAKsAWAB1AOMA/gAeAQIAAQADAAMAAABvAS8AAADuATQAAAASAkIAAgACAAMA
AgADAAUAAQAEAAUAAgAFAAcABIAAAAEAAADZFLlyAAAAAAAA/gMAAAQAAAAAAAAAAAAAAAEAsQAA
AAAABAAAAAAAAAAAAAAAAQC6AAAAAAALAAAAAAAAAAAAAAAKAPUAAAAAAAsAAAAAAAAAAAAAAAoA
MwUAAAAABAAAAAAAAAAAAAAAAQANBgAAAAAAAAAAAQAAAJIHAAAFAAQAAAAAAAA8TW9kdWxlPgBT
VF9lYzhhN2E5YTFkNGI0NDU1ODJlNzkzM2I0ZjQwZjZkYi5kbGwAUmVzb3VyY2VzAFNUXzQ0NmE5
NjQxOGNkNDQ4Njk4ZDU0Mzc5N2Q0Y2MwYWI0LlByb3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFp
bgBTVF80NDZhOTY0MThjZDQ0ODY5OGQ1NDM3OTdkNGNjMGFiNABTY3JpcHRSZXN1bHRzAG1zY29y
bGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5n
c0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AU3lz
dGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6
YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1hbmFn
ZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0Rl
ZmF1bHQARGVmYXVsdABNYWluAGNoZWNrQ29ubmVjdGlvbgBMb2dNZXNzYWdlAHZhbHVlX18AU3Vj
Y2VzcwBGYWlsdXJlAHZhbHVlAENvbm5TdHIAU291cmNlQ21kVGV4dABTeXN0ZW0uUnVudGltZS5W
ZXJzaW9uaW5nAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3Nl
bWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlD
b25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVBy
b2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1h
cmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJp
YnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlv
bnNBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAU1RfZWM4YTdhOWExZDRi
NDQ1NTgyZTc5MzNiNGY0MGY2ZGIAU3lzdGVtLkRpYWdub3N0aWNzAERlYnVnZ2VyTm9uVXNlckNv
ZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBBc3Nl
bWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0
dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQAu
Y2N0b3IAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAFNjcmlwdE9iamVjdE1vZGVs
AGdldF9EdHMATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlJ1bnRpbWUAVmFyaWFibGVEaXNwZW5zZXIAZ2V0X1ZhcmlhYmxlRGlzcGVuc2VyAFZh
cmlhYmxlcwBMb2NrT25lRm9yUmVhZABJbnQzMgBWYXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUA
VG9TdHJpbmcAVW5sb2NrAHNldF9FdmFsdWF0ZUFzRXhwcmVzc2lvbgBzZXRfRXhwcmVzc2lvbgBT
eXN0ZW0uRGF0YQBTeXN0ZW0uRGF0YS5Db21tb24ARGJDb25uZWN0aW9uU3RyaW5nQnVpbGRlcgBz
ZXRfQ29ubmVjdGlvblN0cmluZwBSZW1vdmUAZ2V0X0Nvbm5lY3Rpb25TdHJpbmcAU3RyaW5nAENv
bmNhdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAU3FsQ29ubmVjdGlvbgBTcWxDb21tYW5kAERiQ29t
bWFuZABzZXRfQ29tbWFuZFRpbWVvdXQARGJDb25uZWN0aW9uAE9wZW4ARXhlY3V0ZU5vblF1ZXJ5
AENsb3NlAENvbXBvbmVudABEaXNwb3NlAHNldF9UYXNrUmVzdWx0AEV2ZW50c09iamVjdFdyYXBw
ZXIAZ2V0X0V2ZW50cwBFbnZpcm9ubWVudABnZXRfTmV3TGluZQBGaXJlRXJyb3IARXhjZXB0aW9u
AENvbnZlcnQAVG9JbnQzMgBSZXBsYWNlAGdldF9MZW5ndGgAU3Vic3RyaW5nAFNUXzQ0NmE5NjQx
OGNkNDQ4Njk4ZDU0Mzc5N2Q0Y2MwYWI0LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAA
AAAAcVMAVABfADQANAA2AGEAOQA2ADQAMQA4AGMAZAA0ADQAOAA2ADkAOABkADUANAAzADcAOQA3
AGQANABjAGMAMABhAGIANAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUA
cwAAAQApVQBzAGUAcgA6ADoAQwBvAG4AbgBTAHQAcgBfAFMAbwB1AHIAYwBlAAAjVQBzAGUAcgA6
ADoAUwBvAHUAcgBjAGUAUQB1AGUAcgB5AAA1VQBzAGUAcgA6ADoAUwBvAHUAcgBjAGUAUQB1AGUA
cgB5AEUAdgBhAGwAdQBhAHQAZQBkAAARUAByAG8AdgBpAGQAZQByAAAlOwBDAG8AbgBuAGUAYwB0
ACAAVABpAG0AZQBvAHUAdAA9ADAAACFTAHkAcwB0AGUAbQA6ADoAVABhAHMAawBOAGEAbQBlAAA1
VQBzAGUAcgA6ADoAQwBvAG4AbgBTAHQAcgBfAEUAVABMAFIAZQBmAGUAcgBlAG4AYwBlAAApVQBz
AGUAcgA6ADoARQB4AHQAcgBhAGMAdABFAG4AZABUAGkAbQBlAAAlVQBzAGUAcgA6ADoARQB4AHQA
cgBhAGMAdABKAG8AYgBJAEQAAC1VAHMAZQByADoAOgBFAHgAdAByAGEAYwB0AEMAbwBuAHQAcgBv
AGwASQBEAAAjVQBzAGUAcgA6ADoATQBhAG4AYQBnAGUAcgBHAFUASQBEAAADJwABBScAJwABXVsA
cwBwAEkAbgBzAGUAcgB0AEUAeAB0AHIAYQBjAHQARQB4AGUAYwB1AHQAaQBvAG4ATABvAGcAXQAg
AEAARQB4AHQAcgBhAGMAdABKAG8AYgBJAEQAIAA9ACAAAEssACAAQABTAHQAYQByAHQAVABpAG0A
ZQAgAD0AIABOAFUATABMACwAIABAAE0AYQBuAGEAZwBlAHIARwBVAEkARAAgAD0AIAAnAAGA0ycA
LAAgAEAAUwB1AGMAYwBlAHMAcwBGAGwAYQBnACAAPQAgADEALAAgAEAAQwBvAG0AcABsAGUAdABl
AGQARgBsAGEAZwAgAD0AIAAwACwAIABAAE0AZQBzAHMAYQBnAGUAUwBvAHUAcgBjAGUAIAA9ACAA
JwBMAG8AZwAgAEUAeAB0AHIAYQBjAHQARQB4AGUAYwB1AHQAaQBvAG4ALgBTAHQAbwByAGUAZABQ
AHIAbwBjACcALAAgAEAATQBlAHMAcwBhAGcAZQAgAD0AIAAnAAFZJwAsACAAQABSAG8AdwBzAEUA
eAB0AHIAYQBjAHQAZQBkACAAPQAgADAALAAgAEAARQB4AHQAcgBhAGMAdABTAHQAYQByAHQAVABp
AG0AZQAgAD0AIAAnAAEtJwAsACAAQABFAHgAdAByAGEAYwB0AEUAbgBkAFQAaQBtAGUAIAA9ACAA
JwABOScALAAgAEAATgBlAHgAdABFAHgAdAByAGEAYwB0AFMAdABhAHIAdABUAGkAbQBlACAAPQAg
ACcAAXEnACwAIABAAEUAeAB0AHIAYQBjAHQAUABhAGMAawBhAGcAZQBQAGEAdABoAEEAbgBkAE4A
YQBtAGUAIAA9ACAAJwAnACwAIABAAEUAeAB0AHIAYQBjAHQAQwBvAG4AdAByAG8AbABJAEQAIAA9
ACAAAbnc0gtX+xJMm030MACDxe4ACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUE
AAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAQgAQEOAgYIAwYRFAQAAAAABAEAAAAE
IAEBCAYAARJREVUEIAASWQYgAgEOElkEBwESFQUgAQERYQgBAAIAAAAAAAMAAAEEIAASbQQgABJx
ByACAQ4QEnUFIAESfRwDIAAcAyAADgQgAQECBCABAg4FAAIODg4HIAIBDhKAiQMgAAgFIAASgJ0D
AAAOBgADDg4ODgggBQIIDg4OCBoHDA4SdQ4OEnUSfRKAgRKAiRKAjRKApRJ1DggHAhKAgRKAiQQA
AQgcBSACDg4OBSACDggIBQABDh0cFQcLEnUODggIDg4SgIESgIkSgI0dHEcBABouTkVURnJhbWV3
b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsg
NCgBACNTVF80NDZhOTY0MThjZDQ0ODY5OGQ1NDM3OTdkNGNjMGFiNAAABQEAAAAAFgEAEUNvcHly
aWdodCBAICAyMDEzAAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBAAD8
OQAAAAAAAAAAAAAeOgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEDoAAAAAAAAAAAAAAAAAAAAA
AAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WEAAALADAAAAAAAAAAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQC5ctkUAAABALly2RQ/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsAQQAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAAMAAwADAA
NABiADAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8ANAA0
ADYAYQA5ADYANAAxADgAYwBkADQANAA4ADYAOQA4AGQANQA0ADMANwA5ADcAZAA0AGMAYwAwAGEA
YgA0AAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADUAMwAzADcALgAy
ADkAMwA2ADkAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AZQBjADgA
YQA3AGEAOQBhADEAZAA0AGIANAA0ADUANQA4ADIAZQA3ADkAMwAzAGIANABmADQAMABmADYAZABi
AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIA
aQBnAGgAdAAgAEAAIAAgADIAMAAxADMAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBUAF8AZQBjADgAYQA3AGEAOQBhADEAZAA0AGIANAA0ADUANQA4ADIAZQA3ADkA
MwAzAGIANABmADQAMABmADYAZABiAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfADQANAA2AGEAOQA2ADQAMQA4AGMAZAA0ADQAOAA2ADkAOABkADUANAAzADcA
OQA3AGQANABjAGMAMABhAGIANAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4ANQAzADMANwAuADIAOQAzADYAOQAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANQAzADMANwAuADIAOQAzADYAOQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAAAwOgAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get ExtractRowCount and NextExtractStartTime  for this extract in extract table"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{6f0b7908-6a45-48b2-ac64-90b7859b6903}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get ExtractRowCount and NextExtractStartTime  for this extract in extract table"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="13">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"SELECT COUNT(*) AS ExtractRowCount, COALESCE(CONVERT(CHAR(23), MAX(LastChangeTime), 121),  CONVERT(CHAR(23), DATEADD(DAY,-1,'" + @[User::ExtractEndTime]  + "'), 121)) AS NextExtractStartTime FROM " + @[User::ExtractTable]  +  " WHERE ExtractJobID = " +  (DT_WSTR, 10)@[User::ExtractJobID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{7FE8E375-C038-461C-921C-5EE662E76E0C}"
                  SQLTask:SqlStatementSource="SELECT COUNT(*) AS ExtractRowCount, COALESCE(CONVERT(CHAR(23), MAX(LastChangeTime), 121),  CONVERT(CHAR(23), DATEADD(DAY,-1,'2014-08-06 17:59:57.193'), 121)) AS NextExtractStartTime FROM ExtOMFShipmenttoCustomerBSIK WHERE ExtractJobID = -1002"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::ExtractRowCount" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="1"
                    SQLTask:DtsVariableName="User::NextExtractStartTime" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get NextExtractStartTime"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{abb40580-8f8a-4883-ae77-6a0e5b4043d4}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get NextExtractStartTime"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="14">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"SELECT CONVERT(CHAR(23), DATEADD(DAY,-1,'" + @[User::ExtractEndTime]  + "'), 121)"</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{7FE8E375-C038-461C-921C-5EE662E76E0C}"
                  SQLTask:SqlStatementSource="SELECT CONVERT(CHAR(23), DATEADD(DAY,-1,'2014-08-06 17:59:57.193'), 121)"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::NextExtractStartTime" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get Variable Values"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{5db85085-1dd6-41c5-9498-6fb8771d11bd}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get Variable Values"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="6">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"EXEC spGetExtractExecutionSqlVariables " +  (DT_WSTR, 10) @[User::ExtractControlID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="EXEC spGetExtractExecutionSqlVariables 1474"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="SourceName"
                    SQLTask:DtsVariableName="User::SourceName" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="ConnStr_Source"
                    SQLTask:DtsVariableName="User::ConnStr_Source" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="ConnStr_Destination"
                    SQLTask:DtsVariableName="User::ConnStr_Destination" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="DestinationName"
                    SQLTask:DtsVariableName="User::DestinationName" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Log Package Execution"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{faae928d-8b98-4d57-be4a-de7da914e990}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Log Package Execution"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="15">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"[spInsertExtractExecutionLog] 
@ExtractJobID= " + (DT_STR, 20, 1252)@[User::ExtractJobID] + ",
@StartTime = '" + @[User::StartTime] + "',
@ManagerGUID = '" + @[User::ManagerGUID] + "',
@SuccessFlag = 1,
@CompletedFlag = 1,
@MessageSource ='Log ExtractExecution Completed',
@Message = '',
@RowsExtracted = " + (DT_WSTR, 10)@[User::ExtractRowCount] + ",
@ExtractStartTime = '" + @[User::ExtractStartTime]   + "',
@ExtractEndTime = '" + @[User::ExtractEndTime]  + "',
@NextExtractStartTime = '" + (@[User::NextExtractStartTime]  &gt; @[User::ExtractStartTime] ? @[User::NextExtractStartTime]  : @[User::ExtractStartTime] )  + "',
@ExtractPackagePathAndName = '" +  @[User::ExtractPackagePathAndName]  + "',
@ExtractControlID = " + (DT_STR, 20, 1252)@[User::ExtractControlID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="[spInsertExtractExecutionLog] &#xA;@ExtractJobID= -1002,&#xA;@StartTime = '1900-01-01 00:00:00',&#xA;@ManagerGUID = '7D3FDB0F-14CC-4808-9D5E-003EE9AB8015',&#xA;@SuccessFlag = 1,&#xA;@CompletedFlag = 1,&#xA;@MessageSource ='Log ExtractExecution Completed',&#xA;@Message = '',&#xA;@RowsExtracted = 0,&#xA;@ExtractStartTime = '1900-01-01 00:00:00',&#xA;@ExtractEndTime = '2014-08-06 17:59:57.193',&#xA;@NextExtractStartTime = '1900-01-01 00:00:00',&#xA;@ExtractPackagePathAndName = '\UAT\ETL-RegionalReporting\ExtractExcelMasterDataRange',&#xA;@ExtractControlID = 1474" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Run ConnectionCheckQuery"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{674492d9-7216-41ed-b8a8-f33ad362ef3a}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Run ConnectionCheckQuery"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="7">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"--Run until all the databases for the query are available, or until we have reached our extract
--starttime cutoff (in this case 3am)
--If we still can't connect at this time then return the available databases anyway and this will
--be logged as an error
DECLARE @AvailableDBs AS INT
DECLARE @ExpectedDBs AS INT

SET @ExpectedDBs = " + (DT_WSTR, 10) @[User::ConnectionCheckResult]  + "
SET @AvailableDBs = 0

while ((@AvailableDBs &lt; @ExpectedDBs) AND (CONVERT(CHAR(19), GETDATE(), 120) &lt; (CONVERT(CHAR(11), GETDATE(), 120) + '03:00:00')))
	begin
		WAITFOR DELAY '00:00:10'
		SET @AvailableDBs = (" + @[User::ConnectionCheckQuery] + ")
	end

" + @[User::ConnectionCheckQuery]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{3568CB79-C956-4DA1-BB13-55F3DF24B2EC}"
                  SQLTask:SqlStatementSource="--Run until all the databases for the query are available, or until we have reached our extract&#xA;--starttime cutoff (in this case 3am)&#xA;--If we still can't connect at this time then return the available databases anyway and this will&#xA;--be logged as an error&#xA;DECLARE @AvailableDBs AS INT&#xA;DECLARE @ExpectedDBs AS INT&#xA;&#xA;SET @ExpectedDBs = 4&#xA;SET @AvailableDBs = 0&#xA;&#xA;while ((@AvailableDBs &lt; @ExpectedDBs) AND (CONVERT(CHAR(19), GETDATE(), 120) &lt; (CONVERT(CHAR(11), GETDATE(), 120) + '03:00:00')))&#xA;&#x9;begin&#xA;&#x9;&#x9;WAITFOR DELAY '00:00:10'&#xA;&#x9;&#x9;SET @AvailableDBs = (SELECT COUNT(*) FROM sys.databases WHERE name IN  ('dms','SOLPOT', 'SOLAUTELAPP','RBEACONBP') AND state_desc = 'ONLINE')&#xA;&#x9;end&#xA;&#xA;SELECT COUNT(*) FROM sys.databases WHERE name IN  ('dms','SOLPOT', 'SOLAUTELAPP','RBEACONBP') AND state_desc = 'ONLINE'"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::ConnectionCheckOutput" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Run DataCurrencyCheckQuery"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{ecd87a3d-5dfa-46e5-8df0-6b75046be62c}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Run DataCurrencyCheckQuery"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="9">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"--Run until the query which checks for data currency on the souce evaluates to the DataCurrencyCheckResult Value
--or until we have reached our extract starttime cutoff (in this case 3am)
--If we still can't get the correct datacurrencyCheckResult after this time,  then return the result from 
--the data currency check query and this will get logged as an error
DECLARE @DataCurrencyQueryResult AS INT
DECLARE @ExpectedDataCurrencyQueryResult AS INT

SET @ExpectedDataCurrencyQueryResult = " + (DT_WSTR, 10) @[User::DataCurrencyCheckResult]  + "
SET @DataCurrencyQueryResult = 0

while ((@DataCurrencyQueryResult &lt;&gt; @ExpectedDataCurrencyQueryResult) AND (CONVERT(CHAR(19), GETDATE(), 120) &lt; (CONVERT(CHAR(11), GETDATE(), 120) + '03:00:00')))
	begin
		WAITFOR DELAY '00:00:10'
		SET @DataCurrencyQueryResult = (" + @[User::DataCurrencyCheckQuery] + ")
	end

" + @[User::DataCurrencyCheckQuery]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{3568CB79-C956-4DA1-BB13-55F3DF24B2EC}"
                  SQLTask:SqlStatementSource="--Run until the query which checks for data currency on the souce evaluates to the DataCurrencyCheckResult Value&#xA;--or until we have reached our extract starttime cutoff (in this case 3am)&#xA;--If we still can't get the correct datacurrencyCheckResult after this time,  then return the result from &#xA;--the data currency check query and this will get logged as an error&#xA;DECLARE @DataCurrencyQueryResult AS INT&#xA;DECLARE @ExpectedDataCurrencyQueryResult AS INT&#xA;&#xA;SET @ExpectedDataCurrencyQueryResult = 4&#xA;SET @DataCurrencyQueryResult = 0&#xA;&#xA;while ((@DataCurrencyQueryResult &lt;&gt; @ExpectedDataCurrencyQueryResult) AND (CONVERT(CHAR(19), GETDATE(), 120) &lt; (CONVERT(CHAR(11), GETDATE(), 120) + '03:00:00')))&#xA;&#x9;begin&#xA;&#x9;&#x9;WAITFOR DELAY '00:00:10'&#xA;&#x9;&#x9;SET @DataCurrencyQueryResult = (SELECT COUNT(*)  FROM  (select database_name, max(backup_finish_date) as backup_finish_date from msdb..backupset where database_name IN ('dms','SOLPOT', 'SOLAUTELAPP','RBEACONBP') group by database_name) t WHERE backup_finish_date &gt; DATEADD(hour, -24, GETDATE()))&#xA;&#x9;end&#xA;&#xA;SELECT COUNT(*)  FROM  (select database_name, max(backup_finish_date) as backup_finish_date from msdb..backupset where database_name IN ('dms','SOLPOT', 'SOLAUTELAPP','RBEACONBP') group by database_name) t WHERE backup_finish_date &gt; DATEADD(hour, -24, GETDATE())"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::DataCurrencyCheckOutput" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Set Connection Check Result to Zero"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{3e0e0310-3849-4af5-82d1-7a298bd70de6}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Set Connection Check Result to Zero"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="6">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="SELECT 0"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::ConnectionCheckOutput" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Set DataCurrency Check Result to Zero"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{2cbdf77c-3a21-4544-b48b-fb0c010cbaca}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Set DataCurrency Check Result to Zero"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="8">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="SELECT 0"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::DataCurrencyCheckOutput" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:Description="@CheckDataCurrency == True"
              DTS:DTSID="{cc507934-1c3c-4eca-9d6c-bcc9dec1a35d}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckDataCurrency == True"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Run DataCurrencyCheckQuery" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:Description="Run as 64 Bit"
              DTS:DTSID="{cceaf06b-3c49-424e-8073-aa8afd3e6ae4}"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Check that ConnectionCheck and DataCurrencyCheck Returned Desired Result and CurrentTime &lt; AccessWindowEndMins and PackagePath is correct"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Execute Extract Package" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 10]"
              DTS:CreationName=""
              DTS:Description="@CheckDataCurrency == False"
              DTS:DTSID="{4586ef97-73b4-4d57-a57c-431ddeddabe6}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckDataCurrency == False"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 10"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Set DataCurrency Check Result to Zero" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 11]"
              DTS:CreationName=""
              DTS:DTSID="{2e39879c-ba5d-4c40-9b7a-833c74cdb291}"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Set Connection Check Result to Zero"
              DTS:ObjectName="Constraint 11"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 12]"
              DTS:CreationName=""
              DTS:DTSID="{496bf50f-fc29-4561-86a7-c9e090f9bb24}"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Run ConnectionCheckQuery"
              DTS:ObjectName="Constraint 12"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 13]"
              DTS:CreationName=""
              DTS:Description="ProcessType == &quot;SSIS&quot;"
              DTS:DTSID="{4d5e2d39-8988-4c0e-ac69-8f93c501f101}"
              DTS:EvalOp="3"
              DTS:Expression="@[User::ProcessType] == &quot;SSIS&quot;"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing 1"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 13"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Derive Package Path if it exists" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 14]"
              DTS:CreationName=""
              DTS:Description="CheckExtractRowCount == True"
              DTS:DTSID="{04843948-1792-46af-af92-f6190be888ec}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckExtractRowCount == True"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Execute Store Proc"
              DTS:ObjectName="Constraint 14"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get ExtractRowCount and NextExtractStartTime  for this extract in extract table" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 15]"
              DTS:CreationName=""
              DTS:Description="CheckExtractRowCount == True"
              DTS:DTSID="{5d2eb4bd-b2ee-47d5-98fc-a70429690c87}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckExtractRowCount == True"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Bulk Upload"
              DTS:ObjectName="Constraint 15"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get ExtractRowCount and NextExtractStartTime  for this extract in extract table" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 16]"
              DTS:CreationName=""
              DTS:Description="CheckExtractRowCount == False"
              DTS:DTSID="{e4ee3bd9-20df-4d0f-88e9-e93346bd946b}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckExtractRowCount == False"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Execute Store Proc"
              DTS:ObjectName="Constraint 16"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get NextExtractStartTime" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 17]"
              DTS:CreationName=""
              DTS:Description="ProcessType == &quot;BULK&quot;"
              DTS:DTSID="{128891ee-b5f5-4aa4-af7a-80366eebd127}"
              DTS:EvalOp="3"
              DTS:Expression="@[User::ProcessType] == &quot;BULK&quot;"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing 1"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 17"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Bulk Upload" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 18]"
              DTS:CreationName=""
              DTS:DTSID="{9a3c8ba0-fe14-42fe-8cdc-8ee46876dc0c}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckExtractRowCount == False"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Bulk Upload"
              DTS:ObjectName="Constraint 18"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get NextExtractStartTime" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 19]"
              DTS:CreationName=""
              DTS:Description=":ProcessType] == &quot;SP&quot;"
              DTS:DTSID="{458cf8c9-825c-49d6-a027-a21d8ec39dbc}"
              DTS:EvalOp="3"
              DTS:Expression="@[User::ProcessType] == &quot;SP&quot;"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing 1"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 19"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Execute Store Proc" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:Description="@CheckConnection == True"
              DTS:DTSID="{656ee461-6ee7-4f0e-a55d-0f5ac4f03a11}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckConnection == True"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get Variable Values"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Run ConnectionCheckQuery" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 20]"
              DTS:CreationName=""
              DTS:DTSID="{110ac342-a07b-48ae-85af-fb5bc198742f}"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get NextExtractStartTime"
              DTS:ObjectName="Constraint 20"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Log Package Execution" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 3]"
              DTS:CreationName=""
              DTS:Description="CheckExtractRowCount == False"
              DTS:DTSID="{9c1b066d-f01a-4294-a21c-73b3b69e347b}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckExtractRowCount == False"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Execute Extract Package"
              DTS:ObjectName="Constraint 3"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get NextExtractStartTime" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 4]"
              DTS:CreationName=""
              DTS:DTSID="{3d0dae18-7fce-4f0a-8c50-6138023ff75f}"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get ExtractRowCount and NextExtractStartTime  for this extract in extract table"
              DTS:ObjectName="Constraint 4"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Log Package Execution" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 5]"
              DTS:CreationName=""
              DTS:Description="CheckExtractRowCount == True"
              DTS:DTSID="{b4b847a8-09e4-4209-9847-3544f2856bbb}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckExtractRowCount == True"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Execute Extract Package"
              DTS:ObjectName="Constraint 5"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get ExtractRowCount and NextExtractStartTime  for this extract in extract table" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 6]"
              DTS:CreationName=""
              DTS:DTSID="{cb2bbe40-297f-44a1-b141-b65a9f521cb6}"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Derive Package Path if it exists"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 6"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Check that ConnectionCheck and DataCurrencyCheck Returned Desired Result and CurrentTime &lt; AccessWindowEndMins and PackagePath is correct" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 7]"
              DTS:CreationName=""
              DTS:DTSID="{13101738-01d5-46d8-983d-f69547df185f}"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Set DataCurrency Check Result to Zero"
              DTS:ObjectName="Constraint 7"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing 1" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 8]"
              DTS:CreationName=""
              DTS:Description="@CheckConnection == False"
              DTS:DTSID="{5a49ac55-b278-4f62-b357-507f823f5322}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckConnection == False"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get Variable Values"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 8"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Set Connection Check Result to Zero" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 9]"
              DTS:CreationName=""
              DTS:DTSID="{ba2a965a-44bc-405b-9ee9-59bd3621c204}"
              DTS:From="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Run DataCurrencyCheckQuery"
              DTS:ObjectName="Constraint 9"
              DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing 1" />
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Get Standard Variable Values"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Get Standard Variable Values. Have to do it like this due to varchar(max) issues"
          DTS:DTSID="{5a992dd1-41b0-4ab2-bc5b-487914dfc21c}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get Standard Variable Values"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">"EXEC spGetExtractExecutionStandardVariables " +  (DT_WSTR, 10) @[User::ExtractControlID]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
              SQLTask:SqlStatementSource="EXEC spGetExtractExecutionStandardVariables 1474"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::StandVariablesResult" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Log Information Exection guid and build version"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Log Information Exection guid and build version"
          DTS:DTSID="{b4253295-5082-4748-be17-c932a1d950c6}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Log Information Exection guid and build version"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">"[spInsertExtractExecutionLog] 
@ExtractJobID= " + (DT_STR, 20, 1252)@[User::ExtractJobID] + ",
@StartTime = NULL,
@ManagerGUID = '" + @[User::ManagerGUID] + "',
@SuccessFlag = 1,
@CompletedFlag = 0,
@MessageSource ='Log ExtractExecution Started',
@Message = 'ExectionInstanceGUID:" + @[System::ExecutionInstanceGUID] + ",BuildVersion:" + (DT_STR, 20, 1252)@[System::VersionBuild]  + "',
@RowsExtracted =0,
@ExtractStartTime = '" + @[User::ExtractEndTime]   + "',
@ExtractEndTime = '" + @[User::ExtractEndTime]  + "',
@NextExtractStartTime = '"+ @[User::ExtractEndTime]  + "',
@ExtractPackagePathAndName = '',
@ExtractControlID = " + (DT_STR, 20, 1252)@[User::ExtractControlID]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
              SQLTask:SqlStatementSource="[spInsertExtractExecutionLog] &#xA;@ExtractJobID= -1002,&#xA;@StartTime = NULL,&#xA;@ManagerGUID = '7D3FDB0F-14CC-4808-9D5E-003EE9AB8015',&#xA;@SuccessFlag = 1,&#xA;@CompletedFlag = 0,&#xA;@MessageSource ='Log ExtractExecution Started',&#xA;@Message = 'ExectionInstanceGUID:{E7302635-C689-4BEB-8D75-05D5B32CF9FD},BuildVersion:783',&#xA;@RowsExtracted =0,&#xA;@ExtractStartTime = '2014-08-06 17:59:57.193',&#xA;@ExtractEndTime = '2014-08-06 17:59:57.193',&#xA;@NextExtractStartTime = '2014-08-06 17:59:57.193',&#xA;@ExtractPackagePathAndName = '',&#xA;@ExtractControlID = 1474" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{94374ae9-4203-449f-b1df-6325840b9c45}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Populate Get Standard Variable Values from full result set into variables">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{bca624ef-f9d0-4845-b209-71db9b5839a8}"
            DTS:ObjectName="{79D007D8-5EC9-4DD3-8DE8-07300DF0E95B}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::StandVariablesResult" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables\Do Nothing - Dummy task otherwise the variables do not get populated"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Do Nothing - Dummy task otherwise the variables do not get populated"
              DTS:DTSID="{0cb57ac4-91bb-4cc5-b63e-88cc8bd6107b}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Do Nothing - Dummy task otherwise the variables do not get populated"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{9B2944F0-65EE-4028-B76A-B46B88798496}"
                  SQLTask:SqlStatementSource="SELECT 1" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{bbfd847d-7047-4269-b9bd-993333b615c6}"
              DTS:ObjectName="{90ADE791-ABCF-41CC-BCB2-359EF14130D9}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::ExtractPackageName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{93efacf8-ab31-4105-b2e0-f7f5e76ccbf4}"
              DTS:ObjectName="{790EB9F8-418C-4C1A-A778-DF2E19A3B3F4}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::Suite" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{f5738649-b7fe-44b9-88b3-3a8dd5cfbd63}"
              DTS:ObjectName="{D094AABB-6DCE-44AD-9FC9-844636F7B41E}"
              DTS:ValueIndex="2"
              DTS:VariableName="User::StartTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{79907b89-6635-41d5-ac4e-0b97243f4ff5}"
              DTS:ObjectName="{0979B776-9B3A-4BCB-80E6-7DBBA9AD518F}"
              DTS:ValueIndex="3"
              DTS:VariableName="User::CurrentExecutionOrder" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{c1526041-a5c4-44a5-b663-71338890985f}"
              DTS:ObjectName="{AA8C56D4-8737-44B6-9942-0CD1F6D552C7}"
              DTS:ValueIndex="4"
              DTS:VariableName="User::AccessWindowEndMins" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{c69ebc9a-52ea-4640-97b4-e53edf7a586e}"
              DTS:ObjectName="{142662CB-440A-419A-A062-528D91AD19F3}"
              DTS:ValueIndex="5"
              DTS:VariableName="User::ExtractPackagePath" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{f59c509f-6dea-48f4-a415-adc89121c0de}"
              DTS:ObjectName="{29C78093-741D-4746-9213-2214129CFE13}"
              DTS:ValueIndex="6"
              DTS:VariableName="User::ExtractTable" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{b9d9cf83-6133-45a2-bf21-78e7eb5b51fe}"
              DTS:ObjectName="{0C52AF0C-27B3-4658-845D-2D21D4A69549}"
              DTS:ValueIndex="7"
              DTS:VariableName="User::ExtractPackagePathAndName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{d30ba12d-9d6e-481e-8c21-9e0fbac046a7}"
              DTS:ObjectName="{F9DEA635-CFCD-4C1C-9EFE-D6AF3DA3DD7B}"
              DTS:ValueIndex="8"
              DTS:VariableName="User::Environment" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{8c9a357a-1cb1-4821-8082-9922896c768b}"
              DTS:ObjectName="{38322665-F382-44AB-AF6E-86759E0FC952}"
              DTS:ValueIndex="9"
              DTS:VariableName="User::Server" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{acae0e18-e236-4c0c-a272-a1e128f9db33}"
              DTS:ObjectName="{D64EA35E-FF20-4BA2-B7EC-90D7CC550DD3}"
              DTS:ValueIndex="10"
              DTS:VariableName="User::ConnStr_msdb" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{6de767ba-acd6-4c25-8ede-a2a2ecf0d793}"
              DTS:ObjectName="{D4B7DCD2-C085-407D-A7CC-E25BBBF6BADA}"
              DTS:ValueIndex="11"
              DTS:VariableName="User::ExtractStartTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{a5bbe9f8-555e-4a27-ae90-3db829b73b9d}"
              DTS:ObjectName="{96F031ED-7317-46F6-AD1C-F70FD42D96BF}"
              DTS:ValueIndex="12"
              DTS:VariableName="User::ConnectionCheckQuery" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{4ad4d4d2-6dd6-47a0-ac0d-435935a20aab}"
              DTS:ObjectName="{6017987F-6A52-435A-8003-BD1D18466532}"
              DTS:ValueIndex="13"
              DTS:VariableName="User::ConnectionCheckResult" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{dc4249c2-85a7-48d6-9913-f1d2d076edcc}"
              DTS:ObjectName="{7CFFB9A5-4DCE-4AC5-A774-19FAE97ED32D}"
              DTS:ValueIndex="14"
              DTS:VariableName="User::DataCurrencyCheckQuery" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{71048560-db5f-4e0e-bed1-d2c78df290db}"
              DTS:ObjectName="{96A2C41E-F42A-465E-81FD-46B3E667559E}"
              DTS:ValueIndex="15"
              DTS:VariableName="User::DataCurrencyCheckResult" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{17b2ac0e-8429-4ce3-94fb-453397022cd3}"
              DTS:ObjectName="{4499C63B-455A-442E-AD43-1E016D90E4FC}"
              DTS:ValueIndex="16"
              DTS:VariableName="User::CheckConnection" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{b51b28e9-640a-4cbb-aee1-f1af84d88946}"
              DTS:ObjectName="{3EBB30D8-D627-4E23-844A-E8FB4A3352C5}"
              DTS:ValueIndex="17"
              DTS:VariableName="User::CheckDataCurrency" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{1abd3d65-a051-4f95-9fb0-d2eb7ebd6b69}"
              DTS:ObjectName="{E244D107-C301-40C6-B6B9-EDB3EAE65894}"
              DTS:ValueIndex="18"
              DTS:VariableName="User::CheckExtractRowCount" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{48dfe5a0-fb57-476a-ad74-ece84a5c8c08}"
              DTS:ObjectName="{9C445D83-C17F-481D-B8B5-5A1163685B6B}"
              DTS:ValueIndex="19"
              DTS:VariableName="User::ProcessType" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{84341f94-a290-4884-bb0d-52daeffd155a}"
              DTS:ObjectName="{199A37BE-7D48-4E96-9086-B884CCE33A03}"
              DTS:ValueIndex="20"
              DTS:VariableName="User::SourceQuery" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{ac4df8f2-75b8-4b99-8bfc-e384e8991856}"
              DTS:ObjectName="{55181FA4-6452-4F7B-AEB5-59446CF71658}"
              DTS:ValueIndex="21"
              DTS:VariableName="User::SourceQueryMapping" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{9199596a-4072-4874-8792-c425697d42a0}"
              DTS:ObjectName="{252C8E3F-5CB8-460F-94F5-DC645360E6BC}"
              DTS:ValueIndex="22"
              DTS:VariableName="User::TruncateExtractTable" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{0d5b80db-35c7-4884-8a66-5f1e0b3b7a4e}"
              DTS:ObjectName="{8E648569-B31A-4EF1-955F-0038A3DD68B5}"
              DTS:ValueIndex="23"
              DTS:VariableName="User::BulkUploadLoadSize" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 15]"
          DTS:CreationName=""
          DTS:DTSID="{b3d948eb-e0ab-4f65-bd2e-ddb782cde1f6}"
          DTS:EvalOp="3"
          DTS:Expression="((@SourceTypeName == &quot;ODBC&quot; || @SourceTypeName == &quot;OLEDB&quot; || @SourceTypeName == &quot;OLEDB_ORACLE&quot;  || @SourceTypeName == &quot;ODBC_ORACLE&quot;)  &amp;&amp; @DestinationSourceTypeName == &quot;OLEDB&quot;) == FALSE"
          DTS:From="Package\Sequence Container\Execute SQL Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 15"
          DTS:To="Package\Sequence Container\Alternative Source to Destination" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{874bfd6b-e872-41f8-ab9d-591aeb57e816}"
          DTS:EvalOp="3"
          DTS:Expression="((@SourceTypeName == &quot;ODBC&quot; || @SourceTypeName == &quot;OLEDB&quot; || @SourceTypeName == &quot;OLEDB_ORACLE&quot;  || @SourceTypeName == &quot;ODBC_ORACLE&quot;)  &amp;&amp; @DestinationSourceTypeName == &quot;OLEDB&quot;) == TRUE"
          DTS:From="Package\Sequence Container\Execute SQL Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{5292bc5d-6bf0-496f-9072-48f5513583d4}"
          DTS:From="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Sequence Container\Execute SQL Task" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{40bdf33d-ac62-43de-9838-f656fca12174}"
          DTS:From="Package\Sequence Container\Log Information Exection guid and build version"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Sequence Container\Get Standard Variable Values" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 6]"
          DTS:CreationName=""
          DTS:DTSID="{c084c4eb-cc91-4e65-b583-cb4dbd1f9ccd}"
          DTS:From="Package\Sequence Container\Get Standard Variable Values"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 6"
          DTS:To="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{E5F7C400-4B63-4920-8CED-2B612DEB1821}"
      DTS:From="Package\Sequence Container"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Insert Error Record into ExtractExecutionLog"
      DTS:Value="1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{6C91B13D-0375-40AC-AABC-CA0620BEBF86}"
      DTS:EvalOp="3"
      DTS:Expression="(@SourceTypeName == &quot;ODBC&quot; || @SourceTypeName == &quot;OLEDB&quot;) &amp;&amp; @DestinationSourceTypeName == &quot;OLEDB&quot;"
      DTS:From="Package\Insert Error Record into ExtractExecutionLog"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Delete Any Records from Failed Extract in ExtractTable" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{E62E962D-EC66-4865-92DF-D01A65A25DA1}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{8EEF8D85-B1F1-4765-9716-E581ACE0C41B}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\Append Error to Error Message"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{5378975E-F16B-460E-87BA-D0E1B4BA49BD}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Append Error to Error Message">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_b96b9a606a9d4ae59db2a1c4a61786db"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_b96b9a606a9d4ae59db2a1c4a61786db.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{ea461d57-b3ca-4cdd-bda6-a9aaa927630e}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_b96b9a606a9d4ae59db2a1c4a61786db</RootNamespace>
    <AssemblyName>ST_b96b9a606a9d4ae59db2a1c4a61786db</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe"
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Settings.get_Default():ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Sett" +
    "ings")]

namespace ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_b96b9a606a9d4ae59db2a1c4a61786db
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            string ErrMessage = "";
            string ErrSource = "";
            string SystemErrMessage = "";
            string SystemSource = "";
            try
            {
                Variables vars = null;
                Dts.VariableDispenser.LockOneForRead("System::SourceName", ref vars);
                SystemSource = vars[0].Value.ToString();
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("System::ErrorDescription", ref vars);
                SystemErrMessage = vars[0].Value.ToString();
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("ErrorMessage", ref vars);
                ErrMessage = vars[0].Value.ToString();
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("ErrorSource", ref vars);
                ErrSource = vars[0].Value.ToString();
                vars.Unlock();

                if (ErrMessage == "")
                {
                    ErrMessage = SystemErrMessage;
                }
                else
                {
                    ErrMessage = ErrMessage + ";" + SystemErrMessage;
                }
                if (ErrSource == "")
                {
                    ErrSource = SystemSource;
                }
                else
                {
                    ErrSource = ErrSource + ";" + SystemSource;
                }

                ErrMessage = ErrMessage.Replace("'", "''");
                ErrSource = ErrSource.Replace("'", "''");

                vars = null;
                Dts.VariableDispenser.LockOneForWrite("ErrorSource", ref vars);
                vars[0].Value = ErrSource;
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForWrite("ErrorMessage", ref vars);
                vars[0].Value = ErrMessage;
                vars.Unlock();

                Dts.TaskResult = (int)ScriptResults.Success;

            }
            catch (Exception ex)
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_b96b9a606a9d4ae59db2a1c4a61786db</msb:CodeName>
		<msb:DisplayName>ST_b96b9a606a9d4ae59db2a1c4a61786db</msb:DisplayName>
		<msb:ProjectId>{73D23F85-7536-4439-8662-D4D476CEB1B4}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_b96b9a606a9d4ae59db2a1c4a61786db.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Breakpoint Include="f9a5fbe8eba442bd94de299afd8eb95f">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>93</msb:LineNumber>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_b96b9a606a9d4ae59db2a1c4a61786db")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_b96b9a606a9d4ae59db2a1c4a61786db")]
[assembly: AssemblyCopyright("Copyright @  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_b96b9a606a9d4ae59db2a1c4a61786db.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAGZEZ1IAAAAAAAAAAOAAAiELAQsAABIAAAAIAAAAAAAADjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMAwAABLAAAAAEAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAFBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADw
MAAAAAAAAEgAAAACAAUAiCMAADgNAAABAAAAAAAAANAiAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABswAwDgAQAAAgAAEXJzAABwCnJzAABwC3JzAABwDHJzAABwDRQTBAIo
FgAACm8XAAAKcnUAAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoNEQRvHAAAChQTBAIo
FgAACm8XAAAKcpsAAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoMEQRvHAAAChQTBAIo
FgAACm8XAAAKcs0AAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoKEQRvHAAAChQTBAIo
FgAACm8XAAAKcucAAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoLEQRvHAAACgZycwAA
cCgdAAAKLAQICisNBnL/AABwCCgeAAAKCgdycwAAcCgdAAAKLAQJCysNB3L/AABwCSgeAAAKCwZy
AwEAcHIHAQBwbx8AAAoKB3IDAQBwcgcBAHBvHwAACgsUEwQCKBYAAApvFwAACnLnAABwEgRvIAAA
ChEEFoweAAABbxkAAAoHbyEAAAoRBG8cAAAKFBMEAigWAAAKbxcAAApyzQAAcBIEbyAAAAoRBBaM
HgAAAW8ZAAAKBm8hAAAKEQRvHAAACgIoFgAAChZvIgAACt4PJgIoFgAAChdvIgAACt4AKkEcAAAA
AAAAGAAAALgBAADQAQAADwAAACEAAAEeAigjAAAKKgAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3Rl
bS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1
bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVz
b3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAA
AAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAAAQAACN+AABsBAAAKAYAACNTdHJpbmdzAAAAAJQK
AAAQAQAAI1VTAKQLAAAQAAAAI0dVSUQAAAC0CwAAhAEAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMA
AAD6JTMAFgAAAQAAACEAAAAFAAAABgAAAAkAAAABAAAAIwAAAAIAAAAPAAAAAgAAAAIAAAADAAAA
BAAAAAEAAAAEAAAAAQAAAAEAAAAAAAoAAQAAAAAABgDBALoACgDdAMgADgA9ARQBBgBZAboABgBv
AV4BBgCgAYsBBgBXAj0CBgCCAnACBgCZAnACBgC2AnACBgDVAnACBgDuAnACBgAHA3ACBgAiA3AC
BgA9A3ACBgBWA3ACBgCPA28DBgCvA28DBgDgA80DBgD9A7oABgACBLoABgAmBHACCgBSBDwECgBr
BDwEBgCABG8DDgCiBBQBDgDEBBQBEgAdBf0EEgBFBf0EBgBeBboAEgBkBf0EBgCQBboABgDbBboA
AAAAAAEAAAAAAAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUAAQAQAHQAfwANAAQACAAD
AQAAowAAABEABAAKABEAfwETABEArAEXABEA9gE5AAYGHwJHAFaAJwJKAFaALwJKAFAgAAAAAIMY
vAEbAAEAWCAAAAAAkwjCAR8AAQCRIAAAAACTCNYBJAABAJggAAAAAJMI4gEpAAEAoCAAAAAAlggG
Aj0AAgCzIAAAAACGGLwBGwACAKcgAAAAAJEYmwSJAAIAvCAAAAAAhgAaAhsAAgDEIgAAAACGGLwB
GwACAAAAAQA3AjkAvAFYAEEAvAFYAEkAvAFYAFEAvAFYAFkAvAFYAGEAvAFYAGkAvAFYAHEAvAFY
AHkAvAFYAIEAvAFYAIkAvAFdAJEAvAEbAJkAvAEbAAkAvAEbAKEAFARiAKEALwRpACkAvAFuALkA
vAF6AMkAvAEbABEAvAEbANEAvAEbABkA1gSNANkALwWSAOEATwWXAOkAbQWfAPkAdgWlAAkAgAWp
AOkAiQUbAAEBlwWtAAEBowWzAAEBqgW6AOEAsgWXAPkAwgXAANkAzAVdABkAvAEbAAgAFABOAAgA
GABTACkAkwCAAC4AGwA/AS4AIwA/AS4AYwBlAS4ACwDOAC4AEwAWAS4AMwAWAS4AKwA/AS4AOwBF
AS4AQwA/AS4AWwBcAUMAawBTAEkAkwCAAGEAmwBTAIMAqwBTAHUAxQACAAEAAwADAAAAbwEvAAAA
7gE0AAAAEgJCAAIAAgADAAIAAwAFAAEABAAFAAIABQAHAASAAAABAAAAtBPLZgAAAAAAAH8AAAAE
AAAAAAAAAAAAAAABALEAAAAAAAQAAAAAAAAAAAAAAAEAugAAAAAACwAAAAAAAAAAAAAACgD1AAAA
AAALAAAAAAAAAAAAAAAKAN4EAAAAAAAAAAABAAAA5QUAAAUABAAAAAA8TW9kdWxlPgBTVF9iOTZi
OWE2MDZhOWQ0YWU1OWRiMmExYzRhNjE3ODZkYi5kbGwAUmVzb3VyY2VzAFNUX2I5NmI5YTYwNmE5
ZDRhZTU5ZGIyYTFjNGE2MTc4NmRiLlByb3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF9i
OTZiOWE2MDZhOWQ0YWU1OWRiMmExYzRhNjE3ODZkYgBTY3JpcHRSZXN1bHRzAG1zY29ybGliAFN5
c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UA
TWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRh
c2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJl
c291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24A
Q3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0
X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQA
RGVmYXVsdABNYWluAHZhbHVlX18AU3VjY2VzcwBGYWlsdXJlAHZhbHVlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFz
c2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJs
eUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5
UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRl
bWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0
cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0
aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBTeXN0ZW0uRGlhZ25v
c3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxl
AEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50
TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBp
bGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRy
aWJ1dGUAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFn
ZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJsZURpc3BlbnNlcgBn
ZXRfVmFyaWFibGVEaXNwZW5zZXIAVmFyaWFibGVzAExvY2tPbmVGb3JSZWFkAEludDMyAFZhcmlh
YmxlAGdldF9JdGVtAGdldF9WYWx1ZQBUb1N0cmluZwBVbmxvY2sAU3RyaW5nAG9wX0VxdWFsaXR5
AENvbmNhdABSZXBsYWNlAExvY2tPbmVGb3JXcml0ZQBzZXRfVmFsdWUAc2V0X1Rhc2tSZXN1bHQA
RXhjZXB0aW9uAFNUX2I5NmI5YTYwNmE5ZDRhZTU5ZGIyYTFjNGE2MTc4NmRiLlByb3BlcnRpZXMu
UmVzb3VyY2VzLnJlc291cmNlcwAAcVMAVABfAGIAOQA2AGIAOQBhADYAMAA2AGEAOQBkADQAYQBl
ADUAOQBkAGIAMgBhADEAYwA0AGEANgAxADcAOAA2AGQAYgAuAFAAcgBvAHAAZQByAHQAaQBlAHMA
LgBSAGUAcwBvAHUAcgBjAGUAcwAAAQAlUwB5AHMAdABlAG0AOgA6AFMAbwB1AHIAYwBlAE4AYQBt
AGUAADFTAHkAcwB0AGUAbQA6ADoARQByAHIAbwByAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAGUUA
cgByAG8AcgBNAGUAcwBzAGEAZwBlAAAXRQByAHIAbwByAFMAbwB1AHIAYwBlAAADOwAAAycAAQUn
ACcAAQAAAIDyniZ/WI1IiPETycYDlGoACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAA
EhUEAAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAIGCAMGERQEAAAAAAQBAAAABCAB
AQ4EIAEBCAYAARJREVUEIAASWQYgAgEOElkEBwESFQUgAQERYQgBAAIAAAAAAAMAAAEEIAASbQQg
ABJxByACAQ4QEnUFIAESfRwDIAAcAyAADgUAAgIODgYAAw4ODg4FIAIODg4EIAEBHAgHBQ4ODg4S
dUcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUQ
Lk5FVCBGcmFtZXdvcmsgNCgBACNTVF9iOTZiOWE2MDZhOWQ0YWU1OWRiMmExYzRhNjE3ODZkYgAA
BQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDEzAAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNl
cHRpb25UaHJvd3MB6DAAAAAAAAAAAAAA/jAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAwAAAA
AAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAsAMAAAAAAAAAAAAAsAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAMtmtBMAAAEAy2a0Ez8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBBADAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAw
ADAAMAA0AGIAMAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwBiADkANgBiADkAYQA2ADAANgBhADkAZAA0AGEAZQA1ADkAZABiADIAYQAxAGMANABhADYAMQA3
ADgANgBkAGIAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANQAwADQA
NAAuADIANgAzADEANQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBi
ADkANgBiADkAYQA2ADAANgBhADkAZAA0AGEAZQA1ADkAZABiADIAYQAxAGMANABhADYAMQA3ADgA
NgBkAGIALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEAMwAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkA
bABlAG4AYQBtAGUAAABTAFQAXwBiADkANgBiADkAYQA2ADAANgBhADkAZAA0AGEAZQA1ADkAZABi
ADIAYQAxAGMANABhADYAMQA3ADgANgBkAGIALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQA
TgBhAG0AZQAAAAAAUwBUAF8AYgA5ADYAYgA5AGEANgAwADYAYQA5AGQANABhAGUANQA5AGQAYgAy
AGEAMQBjADQAYQA2ADEANwA4ADYAZABiAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkA
bwBuAAAAMQAuADAALgA1ADAANAA0AC4AMgA2ADMAMQA1AAAAAABIAA8AAQBBAHMAcwBlAG0AYgBs
AHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA1ADAANAA0AC4AMgA2ADMAMQA1AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAABAxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
              <Breakpoint
                Enabled="True"
                File="ScriptMain.cs"
                Line="93"
                Column="13" />
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="128" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph" xmlns:mssge="clr-namespace:Microsoft.SqlServer.Graph.Extended;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
        <NodeLayout
          Size="339,42"
          Id="Package\Delete Any Records from Failed Extract in ExtractTable"
          TopLeft="807.904761904763,1978.44047619047" />
        <NodeLayout
          Size="291,42"
          Id="Package\Insert Error Record into ExtractExecutionLog"
          TopLeft="829.75,1866.69047619047" />
        <NodeLayout
          Size="136,44"
          Id="Package\Sequence Container\Alternative Source to Destination\Do Nothing"
          TopLeft="562,213.5" />
        <NodeLayout
          Size="136,44"
          Id="Package\Sequence Container\Alternative Source to Destination\Do Nothing 1"
          TopLeft="346,213.5" />
        <NodeLayout
          Size="227,44"
          Id="Package\Sequence Container\Alternative Source to Destination\Do Nothing 2"
          TopLeft="516.5,5.5" />
        <NodeLayout
          Size="158,43"
          Id="Package\Sequence Container\Alternative Source to Destination\Get Dest File"
          TopLeft="335,110" />
        <NodeLayout
          Size="147,44"
          Id="Package\Sequence Container\Alternative Source to Destination\Get Dest Sql"
          TopLeft="127.5,109.5" />
        <NodeLayout
          Size="155,42"
          Id="Package\Sequence Container\Alternative Source to Destination\Get Source File"
          TopLeft="766.5,110.5" />
        <NodeLayout
          Size="152,43"
          Id="Package\Sequence Container\Alternative Source to Destination\Get Source Sql"
          TopLeft="554,110" />
        <NodeLayout
          Size="354,57"
          Id="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Check that CurrentTime &lt; AccessWindowEndMins and PackagePath is correct"
          TopLeft="5.50000000000003,109.5" />
        <NodeLayout
          Size="240,44"
          Id="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Derive Package Path if it exists"
          TopLeft="62.5,5.5" />
        <NodeLayout
          Size="275,44"
          Id="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Execute Extract Package"
          TopLeft="45,226.5" />
        <NodeLayout
          Size="208,43"
          Id="Package\Sequence Container\Alternative Source to Destination\Sequence Container\Log Package Execution"
          TopLeft="78.5000000000001,330.5" />
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination\Sequence Container.PrecedenceConstraints[Constraint 2]"
          TopLeft="182.5,49.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination\Sequence Container.PrecedenceConstraints[Constraint 3]"
          TopLeft="182.5,166.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination\Sequence Container.PrecedenceConstraints[Constraint 4]"
          TopLeft="182.5,270.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="365,429"
          Size="365,472"
          Id="Package\Sequence Container\Alternative Source to Destination\Sequence Container"
          TopLeft="231.5,317.5" />
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 1]"
          TopLeft="201,153.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="191.666666666667,60"
              Start="0,0"
              End="191.666666666667,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.5813953488372" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.5813953488372"
                    Point2="0,35.5813953488372"
                    Point3="4,35.5813953488372" />
                  <mssgle:LineSegment
                    End="187.666666666667,35.5813953488372" />
                  <mssgle:CubicBezierSegment
                    Point1="187.666666666667,35.5813953488372"
                    Point2="191.666666666667,35.5813953488372"
                    Point3="191.666666666667,39.5813953488372" />
                  <mssgle:LineSegment
                    End="191.666666666667,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 10]"
          TopLeft="695.7,49.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="148.3,61"
              Start="0,0"
              End="148.3,53.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,14.0768753874767" />
                  <mssgle:CubicBezierSegment
                    Point1="0,14.0768753874767"
                    Point2="0,18.0768753874767"
                    Point3="4,18.0768753874767" />
                  <mssgle:LineSegment
                    End="144.3,18.0768753874767" />
                  <mssgle:CubicBezierSegment
                    Point1="144.3,18.0768753874767"
                    Point2="148.3,18.0768753874767"
                    Point3="148.3,22.0768753874767" />
                  <mssgle:LineSegment
                    End="148.3,53.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="66.15,23.0768753874767,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 11]"
          TopLeft="844,152.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-192.666666666667,61"
              Start="0,0"
              End="-192.666666666667,53.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,32.1744186046512" />
                  <mssgle:CubicBezierSegment
                    Point1="0,32.1744186046512"
                    Point2="0,36.1744186046512"
                    Point3="-4,36.1744186046512" />
                  <mssgle:LineSegment
                    End="-188.666666666667,36.1744186046512" />
                  <mssgle:CubicBezierSegment
                    Point1="-188.666666666667,36.1744186046512"
                    Point2="-192.666666666667,36.1744186046512"
                    Point3="-192.666666666667,40.1744186046512" />
                  <mssgle:LineSegment
                    End="-192.666666666667,53.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 12]"
          TopLeft="564.3,49.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-363.3,60"
              Start="0,0"
              End="-363.3,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,13.7805331680099" />
                  <mssgle:CubicBezierSegment
                    Point1="0,13.7805331680099"
                    Point2="0,17.7805331680099"
                    Point3="-4,17.7805331680099" />
                  <mssgle:LineSegment
                    End="-359.3,17.7805331680099" />
                  <mssgle:CubicBezierSegment
                    Point1="-359.3,17.7805331680099"
                    Point2="-363.3,17.7805331680099"
                    Point3="-363.3,21.7805331680099" />
                  <mssgle:LineSegment
                    End="-363.3,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-189.65,22.7805331680099,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 13]"
          TopLeft="414,257.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-59.5,60"
              Start="0,0"
              End="-59.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.8428805237316" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.8428805237316"
                    Point2="0,35.8428805237316"
                    Point3="-4,35.8428805237316" />
                  <mssgle:LineSegment
                    End="-55.5,35.8428805237316" />
                  <mssgle:CubicBezierSegment
                    Point1="-55.5,35.8428805237316"
                    Point2="-59.5,35.8428805237316"
                    Point3="-59.5,39.8428805237316" />
                  <mssgle:LineSegment
                    End="-59.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 14]"
          TopLeft="630,257.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-156.5,60"
              Start="0,0"
              End="-156.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.8428805237316" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.8428805237316"
                    Point2="0,35.8428805237316"
                    Point3="-4,35.8428805237316" />
                  <mssgle:LineSegment
                    End="-152.5,35.8428805237316" />
                  <mssgle:CubicBezierSegment
                    Point1="-152.5,35.8428805237316"
                    Point2="-156.5,35.8428805237316"
                    Point3="-156.5,39.8428805237316" />
                  <mssgle:LineSegment
                    End="-156.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 5]"
          TopLeft="608.1,49.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-194.1,60.5"
              Start="0,0"
              End="-194.1,53">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.0199902486592" />
                  <mssgle:CubicBezierSegment
                    Point1="0,23.0199902486592"
                    Point2="0,27.0199902486592"
                    Point3="-4,27.0199902486592" />
                  <mssgle:LineSegment
                    End="-190.1,27.0199902486592" />
                  <mssgle:CubicBezierSegment
                    Point1="-190.1,27.0199902486592"
                    Point2="-194.1,27.0199902486592"
                    Point3="-194.1,31.0199902486592" />
                  <mssgle:LineSegment
                    End="-194.1,53" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-105.05,32.0199902486592,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 6]"
          TopLeft="414,153">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="21.3333333333334,60.5"
              Start="0,0"
              End="21.3333333333334,53">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.8779069767442" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.8779069767442"
                    Point2="0,35.8779069767442"
                    Point3="4,35.8779069767442" />
                  <mssgle:LineSegment
                    End="17.3333333333334,35.8779069767442" />
                  <mssgle:CubicBezierSegment
                    Point1="17.3333333333334,35.8779069767442"
                    Point2="21.3333333333334,35.8779069767442"
                    Point3="21.3333333333334,39.8779069767442" />
                  <mssgle:LineSegment
                    End="21.3333333333334,53" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 8]"
          TopLeft="651.9,49.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-21.9,60.5"
              Start="0,0"
              End="-21.9,53">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.0199902486592" />
                  <mssgle:CubicBezierSegment
                    Point1="0,23.0199902486592"
                    Point2="0,27.0199902486592"
                    Point3="-4,27.0199902486592" />
                  <mssgle:LineSegment
                    End="-17.9,27.0199902486592" />
                  <mssgle:CubicBezierSegment
                    Point1="-17.9,27.0199902486592"
                    Point2="-21.9,27.0199902486592"
                    Point3="-21.9,31.0199902486592" />
                  <mssgle:LineSegment
                    End="-21.9,53" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-18.95,32.0199902486592,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Alternative Source to Destination.PrecedenceConstraints[Constraint 9]"
          TopLeft="630,153">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-21.3333333333334,60.5"
              Start="0,0"
              End="-21.3333333333334,53">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.8779069767442" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.8779069767442"
                    Point2="0,35.8779069767442"
                    Point3="-4,35.8779069767442" />
                  <mssgle:LineSegment
                    End="-17.3333333333334,35.8779069767442" />
                  <mssgle:CubicBezierSegment
                    Point1="-17.3333333333334,35.8779069767442"
                    Point2="-21.3333333333334,35.8779069767442"
                    Point3="-21.3333333333334,39.8779069767442" />
                  <mssgle:LineSegment
                    End="-21.3333333333334,53" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="This section is for setting the source and destination variables"
          ParentId="Package\Sequence Container\Alternative Source to Destination"
          Size="165,67"
          Id="106ad2e3-83ca-405f-b929-36965851e28b"
          TopLeft="5.5,520">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Family="Tahoma"
              Size="11.25"
              Color="#FF080000">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
        <AnnotationLayout
          Text="An error will occur if you try to set a file to a oledb connection"
          ParentId="Package\Sequence Container\Alternative Source to Destination"
          Size="148,67"
          Id="b51fb246-4ce4-4195-b960-70120ff433e7"
          TopLeft="657,520">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Family="Tahoma"
              Size="11.25"
              Color="#FF080000">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="927,845"
          Size="927,888"
          Id="Package\Sequence Container\Alternative Source to Destination"
          TopLeft="60,636" />
        <NodeLayout
          Size="135,44"
          Id="Package\Sequence Container\Execute SQL Task"
          TopLeft="923,470" />
        <NodeLayout
          Size="137,42"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Bulk Upload"
          TopLeft="716.837662337663,550.149350649351" />
        <NodeLayout
          Size="447,52"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Check that ConnectionCheck and DataCurrencyCheck Returned Desired Result and CurrentTime &lt; AccessWindowEndMins and PackagePath is correct"
          TopLeft="200.714285714286,590.214285714286" />
        <NodeLayout
          Size="226,42"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Derive Package Path if it exists"
          TopLeft="317.714285714286,519.214285714286" />
        <NodeLayout
          Size="136,44"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing"
          TopLeft="362.714285714286,212.071428571429" />
        <NodeLayout
          Size="143,42"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Do Nothing 1"
          TopLeft="359.214285714286,420.071428571429" />
        <NodeLayout
          Size="275,44"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Execute Extract Package"
          TopLeft="291.214285714286,670.214285714286" />
        <NodeLayout
          Size="133,42"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Execute Store Proc"
          TopLeft="5.50000000000011,665.5" />
        <NodeLayout
          Size="319,45"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get ExtractRowCount and NextExtractStartTime  for this extract in extract table"
          TopLeft="506.318181818182,832.785714285714" />
        <NodeLayout
          Size="201,42"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get NextExtractStartTime"
          TopLeft="159.214285714286,844.214285714286" />
        <NodeLayout
          Size="227,44"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Get Variable Values"
          TopLeft="311.5,6.9285714285711" />
        <NodeLayout
          Size="189,42"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Log Package Execution"
          TopLeft="341.214285714286,925.214285714286" />
        <NodeLayout
          Size="244,44"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Run ConnectionCheckQuery"
          TopLeft="303,110.928571428571" />
        <NodeLayout
          Size="244,44"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Run DataCurrencyCheckQuery"
          TopLeft="308.714285714286,316.071428571429" />
        <NodeLayout
          Size="211,44"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Set Connection Check Result to Zero"
          TopLeft="37.2142857142856,108.071428571429" />
        <NodeLayout
          Size="211,44"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL\Set DataCurrency Check Result to Zero"
          TopLeft="37.2142857142856,316.071428571429" />
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint]"
          TopLeft="452.047619047619,256.071428571429">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-21.3333333333333,60"
              Start="0,0"
              End="-21.3333333333333,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.4186046511628" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.4186046511628"
                    Point2="0,24.4186046511628"
                    Point3="-4,24.4186046511628" />
                  <mssgle:LineSegment
                    End="-17.3333333333333,24.4186046511628" />
                  <mssgle:CubicBezierSegment
                    Point1="-17.3333333333333,24.4186046511628"
                    Point2="-21.3333333333333,24.4186046511628"
                    Point3="-21.3333333333333,28.4186046511628" />
                  <mssgle:LineSegment
                    End="-21.3333333333333,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-88.2716666666666,29.4186046511628,155.21,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 1]"
          TopLeft="426.464285714286,642.214285714286">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,28"
              Start="0,0"
              End="0,20.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 10]"
          TopLeft="409.380952380953,256.071428571429">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-266.666666666667,60"
              Start="0,0"
              End="-266.666666666667,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.4186046511628" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.4186046511628"
                    Point2="0,24.4186046511628"
                    Point3="-4,24.4186046511628" />
                  <mssgle:LineSegment
                    End="-262.666666666667,24.4186046511628" />
                  <mssgle:CubicBezierSegment
                    Point1="-262.666666666667,24.4186046511628"
                    Point2="-266.666666666667,24.4186046511628"
                    Point3="-266.666666666667,28.4186046511628" />
                  <mssgle:LineSegment
                    End="-266.666666666667,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-212.033333333333,29.4186046511628,157.4,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 11]"
          TopLeft="142.714285714286,152.071428571429">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="266.666666666667,60"
              Start="0,0"
              End="266.666666666667,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.5813953488372" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.5813953488372"
                    Point2="0,35.5813953488372"
                    Point3="4,35.5813953488372" />
                  <mssgle:LineSegment
                    End="262.666666666667,35.5813953488372" />
                  <mssgle:CubicBezierSegment
                    Point1="262.666666666667,35.5813953488372"
                    Point2="266.666666666667,35.5813953488372"
                    Point3="266.666666666667,39.5813953488372" />
                  <mssgle:LineSegment
                    End="266.666666666667,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 12]"
          TopLeft="425,154.928571428571">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="27.0476190476188,57.1428571428572"
              Start="0,0"
              End="27.0476190476188,49.6428571428572">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.8870431893688" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29.8870431893688"
                    Point2="0,33.8870431893688"
                    Point3="4,33.8870431893688" />
                  <mssgle:LineSegment
                    End="23.0476190476188,33.8870431893688" />
                  <mssgle:CubicBezierSegment
                    Point1="23.0476190476188,33.8870431893688"
                    Point2="27.0476190476188,33.8870431893688"
                    Point3="27.0476190476188,37.8870431893688" />
                  <mssgle:LineSegment
                    End="27.0476190476188,49.6428571428572" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 13]"
          TopLeft="430.714285714286,462.071428571428">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,57.1428571428573"
              Start="0,0"
              End="0,49.6428571428573">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,49.6428571428573" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-61.333515625,16.8214285714287,122.66703125,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 14]"
          TopLeft="92.8333333333334,707.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="495.234848484848,125.285714285714"
              Start="0,0"
              End="495.234848484848,117.785714285714">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,67.7409839517641" />
                  <mssgle:CubicBezierSegment
                    Point1="0,67.7409839517641"
                    Point2="0,71.7409839517641"
                    Point3="4,71.7409839517641" />
                  <mssgle:LineSegment
                    End="491.234848484848,71.7409839517641" />
                  <mssgle:CubicBezierSegment
                    Point1="491.234848484848,71.7409839517641"
                    Point2="495.234848484848,71.7409839517641"
                    Point3="495.234848484848,75.7409839517641" />
                  <mssgle:LineSegment
                    End="495.234848484848,117.785714285714" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="166.627424242424,76.7409839517641,161.98,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 15]"
          TopLeft="806.837662337663,592.149350649351">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-63.269480519481,240.636363636363"
              Start="0,0"
              End="-63.269480519481,233.136363636363">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,133.742734153534" />
                  <mssgle:CubicBezierSegment
                    Point1="0,133.742734153534"
                    Point2="0,137.742734153534"
                    Point3="-4,137.742734153534" />
                  <mssgle:LineSegment
                    End="-59.269480519481,137.742734153534" />
                  <mssgle:CubicBezierSegment
                    Point1="-59.269480519481,137.742734153534"
                    Point2="-63.269480519481,137.742734153534"
                    Point3="-63.269480519481,141.742734153534" />
                  <mssgle:LineSegment
                    End="-63.269480519481,233.136363636363" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-112.624740259741,142.742734153534,161.98,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 16]"
          TopLeft="51.1666666666668,707.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="160.297619047619,136.714285714286"
              Start="0,0"
              End="160.297619047619,129.214285714286">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,73.8076002400402" />
                  <mssgle:CubicBezierSegment
                    Point1="0,73.8076002400402"
                    Point2="0,77.8076002400402"
                    Point3="4,77.8076002400402" />
                  <mssgle:LineSegment
                    End="156.297619047619,77.8076002400402" />
                  <mssgle:CubicBezierSegment
                    Point1="156.297619047619,77.8076002400402"
                    Point2="160.297619047619,77.8076002400402"
                    Point3="160.297619047619,81.8076002400402" />
                  <mssgle:LineSegment
                    End="160.297619047619,129.214285714286" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-1.93619047619062,82.8076002400402,164.17,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 17]"
          TopLeft="464.464285714286,462.071428571429">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="320.873376623377,88.077922077922"
              Start="0,0"
              End="320.873376623377,80.577922077922">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.4342476745223" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26.4342476745223"
                    Point2="0,30.4342476745223"
                    Point3="4,30.4342476745223" />
                  <mssgle:LineSegment
                    End="316.873376623377,30.4342476745223" />
                  <mssgle:CubicBezierSegment
                    Point1="316.873376623377,30.4342476745223"
                    Point2="320.873376623377,30.4342476745223"
                    Point3="320.873376623377,34.4342476745223" />
                  <mssgle:LineSegment
                    End="320.873376623377,80.577922077922" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="97.6681726866885,35.4342476745223,125.53703125,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 18]"
          TopLeft="763.837662337663,592.149350649351">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-455.873376623377,252.064935064935"
              Start="0,0"
              End="-455.873376623377,244.564935064935">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,139.403889827521" />
                  <mssgle:CubicBezierSegment
                    Point1="0,139.403889827521"
                    Point2="0,143.403889827521"
                    Point3="-4,143.403889827521" />
                  <mssgle:LineSegment
                    End="-451.873376623377,143.403889827521" />
                  <mssgle:CubicBezierSegment
                    Point1="-451.873376623377,143.403889827521"
                    Point2="-455.873376623377,143.403889827521"
                    Point3="-455.873376623377,147.403889827521" />
                  <mssgle:LineSegment
                    End="-455.873376623377,244.564935064935" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-235.936688311688,148.403889827521,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 19]"
          TopLeft="396.964285714286,462.071428571428">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-324.964285714286,203.428571428572"
              Start="0,0"
              End="-324.964285714286,195.928571428572">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.2922523700558" />
                  <mssgle:CubicBezierSegment
                    Point1="0,16.2922523700558"
                    Point2="0,20.2922523700558"
                    Point3="-4,20.2922523700558" />
                  <mssgle:LineSegment
                    End="-320.964285714286,20.2922523700558" />
                  <mssgle:CubicBezierSegment
                    Point1="-320.964285714286,20.2922523700558"
                    Point2="-324.964285714286,20.2922523700558"
                    Point3="-324.964285714286,24.2922523700558" />
                  <mssgle:LineSegment
                    End="-324.964285714286,195.928571428572" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-222.820658482143,25.2922523700558,120.67703125,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 2]"
          TopLeft="461.5,50.9285714285711">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-36.5,60"
              Start="0,0"
              End="-36.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.2519685039371" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.2519685039371"
                    Point2="0,24.2519685039371"
                    Point3="-4,24.2519685039371" />
                  <mssgle:LineSegment
                    End="-32.5,24.2519685039371" />
                  <mssgle:CubicBezierSegment
                    Point1="-32.5,24.2519685039371"
                    Point2="-36.5,24.2519685039371"
                    Point3="-36.5,28.2519685039371" />
                  <mssgle:LineSegment
                    End="-36.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-90.49,29.2519685039371,144.48,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 20]"
          TopLeft="259.714285714286,886.214285714286">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="145.833333333333,39"
              Start="0,0"
              End="145.833333333333,31.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.2035676810073" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19.2035676810073"
                    Point2="0,23.2035676810073"
                    Point3="4,23.2035676810073" />
                  <mssgle:LineSegment
                    End="141.833333333333,23.2035676810073" />
                  <mssgle:CubicBezierSegment
                    Point1="141.833333333333,23.2035676810073"
                    Point2="145.833333333333,23.2035676810073"
                    Point3="145.833333333333,27.2035676810073" />
                  <mssgle:LineSegment
                    End="145.833333333333,31.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 3]"
          TopLeft="384.214285714286,714.214285714286">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-124.5,130"
              Start="0,0"
              End="-124.5,122.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.0511930585683" />
                  <mssgle:CubicBezierSegment
                    Point1="0,28.0511930585683"
                    Point2="0,32.0511930585683"
                    Point3="-4,32.0511930585683" />
                  <mssgle:LineSegment
                    End="-120.5,32.0511930585683" />
                  <mssgle:CubicBezierSegment
                    Point1="-120.5,32.0511930585683"
                    Point2="-124.5,32.0511930585683"
                    Point3="-124.5,36.0511930585683" />
                  <mssgle:LineSegment
                    End="-124.5,122.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-144.335,37.0511930585683,164.17,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 4]"
          TopLeft="665.818181818182,877.785714285714">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-199.937229437229,47.4285714285713"
              Start="0,0"
              End="-199.937229437229,39.9285714285713">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.218258132214" />
                  <mssgle:CubicBezierSegment
                    Point1="0,24.218258132214"
                    Point2="0,28.218258132214"
                    Point3="-4,28.218258132214" />
                  <mssgle:LineSegment
                    End="-195.937229437229,28.218258132214" />
                  <mssgle:CubicBezierSegment
                    Point1="-195.937229437229,28.218258132214"
                    Point2="-199.937229437229,28.218258132214"
                    Point3="-199.937229437229,32.218258132214" />
                  <mssgle:LineSegment
                    End="-199.937229437229,39.9285714285713" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 5]"
          TopLeft="473.214285714286,714.214285714286">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="192.603896103896,118.571428571429"
              Start="0,0"
              End="192.603896103896,111.071428571429">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,43.8400991633096" />
                  <mssgle:CubicBezierSegment
                    Point1="0,43.8400991633096"
                    Point2="0,47.8400991633096"
                    Point3="4,47.8400991633096" />
                  <mssgle:LineSegment
                    End="188.603896103896,47.8400991633096" />
                  <mssgle:CubicBezierSegment
                    Point1="188.603896103896,47.8400991633096"
                    Point2="192.603896103896,47.8400991633096"
                    Point3="192.603896103896,51.8400991633096" />
                  <mssgle:LineSegment
                    End="192.603896103896,111.071428571429" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="15.311948051948,52.8400991633096,161.98,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 6]"
          TopLeft="427.464285714286,561.214285714286">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,29"
              Start="0,0"
              End="0,21.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 7]"
          TopLeft="142.714285714286,360.071428571429">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="265.5,60"
              Start="0,0"
              End="265.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.6016597510372" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.6016597510372"
                    Point2="0,35.6016597510372"
                    Point3="4,35.6016597510372" />
                  <mssgle:LineSegment
                    End="261.5,35.6016597510372" />
                  <mssgle:CubicBezierSegment
                    Point1="261.5,35.6016597510372"
                    Point2="265.5,35.6016597510372"
                    Point3="265.5,39.6016597510372" />
                  <mssgle:LineSegment
                    End="265.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 8]"
          TopLeft="388.5,50.9285714285711">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-245.785714285714,57.1428571428575"
              Start="0,0"
              End="-245.785714285714,49.6428571428575">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.0971128608925" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19.0971128608925"
                    Point2="0,23.0971128608925"
                    Point3="-4,23.0971128608925" />
                  <mssgle:LineSegment
                    End="-241.785714285714,23.0971128608925" />
                  <mssgle:CubicBezierSegment
                    Point1="-241.785714285714,23.0971128608925"
                    Point2="-245.785714285714,23.0971128608925"
                    Point3="-245.785714285714,27.0971128608925" />
                  <mssgle:LineSegment
                    End="-245.785714285714,49.6428571428575" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-196.227857142857,28.0971128608925,146.67,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 9]"
          TopLeft="430.714285714286,360.071428571429">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="22.5,60"
              Start="0,0"
              End="22.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.6016597510372" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.6016597510372"
                    Point2="0,35.6016597510372"
                    Point3="4,35.6016597510372" />
                  <mssgle:LineSegment
                    End="18.5,35.6016597510372" />
                  <mssgle:CubicBezierSegment
                    Point1="18.5,35.6016597510372"
                    Point2="22.5,35.6016597510372"
                    Point3="22.5,39.6016597510372" />
                  <mssgle:LineSegment
                    End="22.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43.924528301886795"
          IsExpanded="True"
          PanelSize="898,1027"
          Size="898,1071"
          Id="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL"
          TopLeft="1048,543" />
        <NodeLayout
          Size="174,42"
          Id="Package\Sequence Container\Get Standard Variable Values"
          TopLeft="903.5,162" />
        <NodeLayout
          Size="307,42"
          Id="Package\Sequence Container\Log Information Exection guid and build version"
          TopLeft="837,60" />
        <NodeLayout
          Size="418,42"
          Id="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables\Do Nothing - Dummy task otherwise the variables do not get populated"
          TopLeft="5.5,5.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="429,103"
          Size="429,146"
          Id="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables"
          TopLeft="776,264" />
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 15]"
          TopLeft="969.333333333333,514">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-445.833333333333,122"
              Start="0,0"
              End="-445.833333333333,114.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,45.6573938506589" />
                  <mssgle:CubicBezierSegment
                    Point1="0,45.6573938506589"
                    Point2="0,49.6573938506589"
                    Point3="-4,49.6573938506589" />
                  <mssgle:LineSegment
                    End="-441.833333333333,49.6573938506589" />
                  <mssgle:CubicBezierSegment
                    Point1="-441.833333333333,49.6573938506589"
                    Point2="-445.833333333333,49.6573938506589"
                    Point3="-445.833333333333,53.6573938506589" />
                  <mssgle:LineSegment
                    End="-445.833333333333,114.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-230.916666666667,54.6573938506589,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 2]"
          TopLeft="1011.66666666667,514">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="485.333333333333,29"
              Start="0,0"
              End="485.333333333333,21.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,7.80380673499269" />
                  <mssgle:CubicBezierSegment
                    Point1="0,7.80380673499269"
                    Point2="0,11.8038067349927"
                    Point3="4,11.8038067349927" />
                  <mssgle:LineSegment
                    End="481.333333333333,11.8038067349927" />
                  <mssgle:CubicBezierSegment
                    Point1="481.333333333333,11.8038067349927"
                    Point2="485.333333333333,11.8038067349927"
                    Point3="485.333333333333,15.8038067349927" />
                  <mssgle:LineSegment
                    End="485.333333333333,21.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="234.666666666667,16.8038067349927,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 3]"
          TopLeft="990.5,410">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 5]"
          TopLeft="990.5,102">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 6]"
          TopLeft="990.5,204">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="1951,1778"
          Size="1951,1821"
          Id="Package\Sequence Container"
          TopLeft="0.999999999999773,2.27373675443232E-13" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="975.875,1821">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,45.6904761904732"
              Start="0,0"
              End="0,38.1904761904732">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.1904761904732" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.24134765625,14.2207263764866,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="976.327380952381,1908.69047619047">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,69.7500000000002"
              Start="0,0"
              End="0,62.2500000000002">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,62.2500000000002" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-8,23.1250000000001,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="Package.EventHandlers[OnError]\Append Error to Error Message"
          TopLeft="NaN,NaN" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 10]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 13]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 14]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 15]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 16]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 17]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 19]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 2]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 3]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 5]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Extract Execution Dynamic Tasks SQL to SQL.PrecedenceConstraints[Constraint 8]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>