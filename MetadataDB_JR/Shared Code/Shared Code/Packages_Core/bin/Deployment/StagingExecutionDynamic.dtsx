<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/11/2010"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="AU-L234"
  DTS:CreatorName="BRIGHTSTAR\oszymczak"
  DTS:DTSID="{70E42E9D-A7E5-489E-9658-6D5D1F377996}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:ForceExecutionResult="0"
  DTS:LastModifiedProductVersion="11.0.3402.0"
  DTS:LocaleID="3081"
  DTS:ObjectName="StagingExecutionDynamic"
  DTS:PackageType="5"
  DTS:SuppressConfigurationWarnings="True"
  DTS:VersionBuild="988"
  DTS:VersionGUID="{8CA3D9DC-3A7A-44D7-9A57-5B0F066EC0D8}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Destination]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{96DF69D6-222D-4B0C-BD4B-AC47568EA9C3}"
      DTS:ObjectName="Destination">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ConnStr_Staging]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=05W8F2APSQ01\dev2012;Initial Catalog=DWStaging;Provider=SQLNCLI11.1;Integrated Security=SSPI;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ETLReference]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{83D20683-E373-44B2-9C9F-5984105B3FA4}"
      DTS:ObjectName="ETLReference">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ConnStr_ETLReference]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=05W8F2APSQ03\dev2012;Initial Catalog=DWReference;Provider=SQLNCLI11.1;Integrated Security=SSPI;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[msdb]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{1D83E65C-45A6-436E-9011-CD128AC6AB98}"
      DTS:ObjectName="msdb">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ConnStr_msdb]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=05W8F2APSQ01\DEV;Initial Catalog=msdb;Provider=SQLNCLI11.1;Integrated Security=SSPI;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Source]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{BB37B11A-5236-4DDB-8167-088B71AA49C0}"
      DTS:ObjectName="Source">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ConnStr_Source]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=05W8F2APSQ01\dev2012;Initial Catalog=DWStaging;Provider=SQLNCLI11.1;Integrated Security=SSPI;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="msdb"
      DTS:CreationName="DTS.LogProviderSQLServer.3"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{F4A5293A-AECF-4739-BEB2-6A9A4BF75E2E}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CCE3B528-0BEF-4094-85A8-FF1764D8F748}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BulkUploadLoadSize">
      <DTS:VariableValue
        DTS:DataType="8">1000</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7360877B-5DFE-4D8C-9A4A-5930D9C4ABD4}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CheckExtractRowCount">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E2236810-E50F-4D90-94C6-0D605A69C260}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnStr_ETLReference">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=05W8F2APSQ03\dev2012;Initial Catalog=DWReference;Provider=SQLNCLI11.1;Integrated Security=SSPI;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BA269E2C-F0A0-4E51-9934-6F3BFB3ECB96}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnStr_msdb">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=05W8F2APSQ01\DEV;Initial Catalog=msdb;Provider=SQLNCLI11.1;Integrated Security=SSPI;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{74568F90-709E-4597-A5CD-1513C3129861}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnStr_Source">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=05W8F2APSQ01\dev2012;Initial Catalog=DWStaging;Provider=SQLNCLI11.1;Integrated Security=SSPI;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6250CA74-3A6A-4120-94FF-BF46D2A40378}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnStr_Staging">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=05W8F2APSQ01\dev2012;Initial Catalog=DWStaging;Provider=SQLNCLI11.1;Integrated Security=SSPI;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{717069F5-A57B-49FB-A352-1426820FB6DE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DelimiterChar">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E3CFC798-8F6F-4BD7-B1A4-706A713C2AD0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Environment">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E36C412C-6E90-4D2A-9D9B-EF1BCBBFC65F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorMessage">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FDBB3AD1-E45F-4DCB-92B6-1A3FDE4DA2BE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorSource">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{141B1B76-191E-438E-9583-D40D32744F65}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExtractEndTime">
      <DTS:VariableValue
        DTS:DataType="8">1900-01-01</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AE386029-71EF-48FE-A9D7-B5F1445AF9AD}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExtractStartTime">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{255A54E9-78E6-4A5A-81BC-73F79E92D3A9}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileNameSeparator">
      <DTS:VariableValue
        DTS:DataType="8">_</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7D71F0EA-E0CC-44CC-B3D9-7E31D3B3DEEE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileTimeStampFormat">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{44CDF527-8AE9-4515-8D56-CC60D54393D0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FolderBaseLocation">
      <DTS:VariableValue
        DTS:DataType="8">\\05W8F2APSQ03\DWReferenceFileProcess\DEV</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9682B17C-BD1B-4C43-871E-9F9C7171FF1B}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="HasFooter">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{610DD6BB-E1B4-408C-AC99-EEDD0EF64CEF}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="HasHeader">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{67086881-D187-4561-895D-B9FBE9E9C66D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ManagerGUID">
      <DTS:VariableValue
        DTS:DataType="8">7D3FDB0F-14CC-4808-9D5E-003EE9AB8015</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7884138F-9BDE-4994-8FFE-286C9550333B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MergeQuery">
      <DTS:VariableValue
        DTS:DataType="8">VendorMerge</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{157CEDAA-75D5-4257-9179-9913BB2E1092}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="NextExtractStartTime">
      <DTS:VariableValue
        DTS:DataType="8">1900-01-01</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5C9E6DF0-8C06-4ECE-B455-E4F4637AF242}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ProcessType">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{40C82980-F2EB-43D1-ADA0-EB234111E2AB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowsDeleted">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{02160038-26B7-4459-AFEE-7578837B9474}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowsInserted">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DA9B20BC-C7AF-42BF-8D0C-9F8BFF593C0B}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowsUpdated">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{614EA74A-823B-4A56-BC50-FF11169782F9}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Server">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{63D760E2-49B2-4E33-895A-E61A48DDF0B8}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceQuery">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3C8AE199-661C-4FED-BCF5-09544CDBB1D3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceQueryEvaluated">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E9E82970-B7EA-4DC0-99AD-64C34B29FC60}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceQueryMapping">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F0027C8D-FC2F-4999-B28D-DD72152AB506}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceTypeName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2A441414-865F-4770-AF9C-CBAE785CFB06}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="StagingControlID">
      <DTS:VariableValue
        DTS:DataType="3">3</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{89B61F8C-C7BE-4B9D-845C-A6864E66024C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="StagingJobID">
      <DTS:VariableValue
        DTS:DataType="3">-1002</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6D5E84C5-317F-48CA-83F8-75BE0A531F68}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StagingPackageName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FAB2AEC2-3CC0-406F-A946-374B0485A08C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StagingPackagePath">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4343ED5E-C775-4E21-BD3D-B5F72AF0F8D4}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StagingPathAndName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FC34D13F-04CB-432D-A3E4-4479494F1AF9}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="StagingRowCount">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0D040A2E-E4E9-4E6A-A09D-8D7C0F03CE34}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StagingTable">
      <DTS:VariableValue
        DTS:DataType="8">ExtOMFShipmenttoCustomerBSIK</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6FE32808-585C-4EC7-8D44-6A23A9B6429A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StandVariablesResult">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8B35860C-3772-4675-AF9A-4419761B75E1}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StartTime">
      <DTS:VariableValue
        DTS:DataType="8">1900-01-01 00:00:00</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8A29492F-F694-4656-9095-9396B0D4E8EA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Suite">
      <DTS:VariableValue
        DTS:DataType="8">MDS</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FCFB6F5E-4D18-45D6-A9A7-BE848ED0B69E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="TruncateStagingTable">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">3,7,OnError,13,OnPostExecute,9,OnWarning</DTS:Property>
    <DTS:Property
      DTS:EventName="Diagnostic"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnExecStatusChanged"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnInformation"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPostExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPostValidate"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPreExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPreValidate"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnProgress"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnQueryCancel"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnTaskFailed"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnVariableValueChanged"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnWarning"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{F4A5293A-AECF-4739-BEB2-6A9A4BF75E2E}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Insert Error Record into StagingExecutionLog"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{31E0EE8B-E195-40CB-899B-056D591E0E0A}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:ExecValue="1"
      DTS:ExecValueType="3"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="Insert Error Record into StagingExecutionLog"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:PropertyExpression
        DTS:Name="SqlStatementSource">"EXEC [dbo].[spInsertStagingExecutionLog]
 @StagingJobID =-1,
 @StartTime = '" + @[User::StartTime] + "',
@ManagerGUID ='" + @[User::ManagerGUID] + "',
@SuccessFlag =0,
@CompletedFlag =1,
@MessageSource ='Log StagingExection Error: " + @[User::ErrorSource]  + "'  ,
@Message = '" + @[User::ErrorMessage]  + "', 
@RowsStaged = 0, @RowsInserted = 0, @RowsDeleted = 0, @RowsUpdated = 0,
 @StagingPackagePathAndName =NULL,
@ActualFileName = NULL,

@StagingControlID=" + (DT_WSTR, 10)@[User::StagingControlID] + ", @ExtractStartTime = NULL, @ExtractEndTime = NULL"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{83D20683-E373-44B2-9C9F-5984105B3FA4}"
          SQLTask:SqlStatementSource="EXEC [dbo].[spInsertStagingExecutionLog]&#xA; @StagingJobID =-1,&#xA; @StartTime = '1900-01-01 00:00:00',&#xA;@ManagerGUID ='7D3FDB0F-14CC-4808-9D5E-003EE9AB8015',&#xA;@SuccessFlag =0,&#xA;@CompletedFlag =1,&#xA;@MessageSource ='Log StagingExection Error: '  ,&#xA;@Message = '', &#xA;@RowsStaged = 0, @RowsInserted = 0, @RowsDeleted = 0, @RowsUpdated = 0,&#xA; @StagingPackagePathAndName =NULL,&#xA;@ActualFileName = NULL,&#xA;&#xA;@StagingControlID=3, @ExtractStartTime = NULL, @ExtractEndTime = NULL" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Sequence Container"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{C866EB44-F49D-4D06-AB11-5BDD97A140DA}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Bulk File Processing"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{F80437B6-7856-4947-988E-69267C3C974C}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="Bulk File Processing">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Bulk File Processing\File Bulk Upload"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="File Bulk Upload"
              DTS:DTSID="{F9FE143F-624D-4E2B-AC5D-B6149F534306}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="File Bulk Upload"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_060ace5346c44cdaa03356127c150a18"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp">
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Collections;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Reflection;
using System.Collections.Generic;
using DWReferenceHelper;
#endregion

namespace ST_060ace5346c44cdaa03356127c150a18
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            ScriptHelper sh = new ScriptHelper();
            Dictionary<string, object> values = new Dictionary<string, object>();
            try
            {
                #region SSIS Variables
                Variables vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ConnStr_ETLReference", ref vars);
                values.Add("ConnStr_ETLReference", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::Environment", ref vars);
                values.Add("Environment", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::FileNameSeparator", ref vars);
                values.Add("FileNameSeparator", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::StagingPackageName", ref vars);
		        values.Add("StagingPackageName", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ConnStr_Staging", ref vars);
                values.Add("ConnStr_Staging", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::SourceQueryMapping", ref vars);
                values.Add("SourceQueryMapping", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::DelimiterChar", ref vars);
                values.Add("DelimiterChar", vars[0].Value);
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::Suite", ref vars);
                values.Add("Suite", vars[0].Value.ToString());
                vars.Unlock();
                
                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::FolderBaseLocation", ref vars);
                values.Add("FolderBaseLocation", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::StagingTable", ref vars);
                values.Add("StagingTable", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::MergeQuery", ref vars);
                values.Add("MergeQuery", vars[0].Value.ToString());
                vars.Unlock();
                
                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::HasHeader", ref vars);
                values.Add("HasHeader", vars[0].Value);
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::BulkUploadLoadSize", ref vars);
                values.Add("BulkUploadLoadSize", vars[0].Value);
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::StartTime", ref vars);
                values.Add("StartTime", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::FileTimeStampFormat", ref vars);
                values.Add("FileTimeStampFormat", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::StagingControlID", ref vars);
                values.Add("StagingControlID", vars[0].Value);
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ManagerGUID", ref vars);
                values.Add("ManagerGUID", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::TruncateStagingTable", ref vars);
                values.Add("TruncateStagingTable", vars[0].Value);
                vars.Unlock();

                #endregion
                sh.MainStagingExecutionFileBulkUpload(values);
                Dts.TaskResult = (int)ScriptResults.Success;    
            }
            catch (System.Exception ex)
            {
                Variables vars = null;
                Dts.VariableDispenser.LockOneForRead("System::TaskName", ref vars);
                string TaskName = vars[0].Value.ToString();
                vars.Unlock();
                string errorMessage = "";
                
                try
                {
                    sh.CleanUpFiles(sh.unProcessedFileFullName, sh.InProcessedFileFullName, sh.SuiteFolderLocation);
                }
                catch (Exception ex1)
                {
                    errorMessage = ex1.Message;
                }

                Dts.Events.FireError(1, TaskName, ex.ToString() + " " + errorMessage, "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}

}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_060ace5346c44cdaa03356127c150a18.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{388C6745-019E-4432-9EAA-E733BA085E5F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_060ace5346c44cdaa03356127c150a18</RootNamespace>
    <AssemblyName>ST_060ace5346c44cdaa03356127c150a18</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
    <PlatformTarget>AnyCPU</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Oracle.DataAccess, Version=4.112.3.0, Culture=neutral, PublicKeyToken=89b483f429c47342, processorArchitecture=AMD64" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.IO.Compression" />
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="ScriptHelper.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_060ace5346c44cdaa03356127c150a18</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_060ace5346c44cdaa03356127c150a18</msb:DisplayName>
		<msb:ProjectId>{FE3479CE-B21E-4A92-BB57-7CBD3C16E4E4}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_060ace5346c44cdaa03356127c150a18.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="ScriptHelper.cs"/>
		<msb:Breakpoint Include="3b0cb8afdcb847558ac4e79535391761">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>200</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="5ee48e9bd8b74571b4dae071bf09eb17">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>104</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="015f8ebdab8d45a89fd9ea9559ca7ab7">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>21</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>213</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="f75b8ad1a9444d9ca3917918cd431500">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>109</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="7c9afaa9bfe145f6bcd16f534483e5d7">
			<msb:FileName>ScriptHelper.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>745</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptHelper.cs"
                    Encoding="UTF8"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
//This code is copied to:
//Packages_Core.StagingManagerDynamic
//Packages_Core.StagingExecutionDynamic
//and StagingHelper
//The problem is referencing the dll on all servers used. 
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;
using Oracle.DataAccess.Client;

namespace DWReferenceHelper
{
    public class ScriptHelper
    {

        #region Properties
        public int RowsInserted { get; set; }
        public int RowsDeleted { get; set; }
        public int RowsUpdated { get; set; }
        public int RowsStaged { get; set; }
        public string SuiteFolderLocation { get; set; }
        public string unProcessedFileFullName { get; set; }
        public string InProcessedFileFullName { get; set; }
        public Dictionary<int, ProcessInformation> ProcessControl = new Dictionary<int, ProcessInformation>();
        public int SSISPackagesCount = 0;

        public List<string> ORACLE = new List<string> { "OLEDB_ORACLE", "ODBC_ORACLE" };
        public List<string> SQL = new List<string> { "OLEDB", "ODBC", "OLEDB_SQL", "ODBC_SQL" };

        #endregion

        #region Staging Manager

        /// <summary>
        /// Staging Manager Process Files Task
        /// Checks if any files are to be loaded or sql extracts and run them
        /// </summary>
        /// <param name="values"></param>
        public void MainStagingManagerProcessFiles(Dictionary<string, object> values)
        {
            string Suite = values["Suite"].ToString();
            string StagingExecutionLocation = values["StagingExecutionLocation"].ToString();
            string Server = values["Server"].ToString();
            string FileNameSeparator = values["FileNameSeparator"].ToString();
            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string ExecutionInstanceGUID = values["ExecutionInstanceGUID"].ToString();
            string StartTime = values["StartTime"].ToString();

            //Process Files

            var ds = GetData(ConnStr_ETLReference, "[dbo].[spGetStagingManagerFolderLocation] @SuiteName = '" + Suite + "'");



            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                string FolderLocationUprocessed = Path.Combine(dr["BaseFolder"].ToString(),
                                                               dr["Environment"].ToString(),
                                                               dr["SuiteName"].ToString(),
                                                               dr["Folder"].ToString());
                var files = GetFiles(FolderLocationUprocessed);

                if (files != null && files.Count > 0)
                {
                    foreach (int stagingControlID in GetStagingControlIDs(ConnStr_ETLReference, files, Suite, FileNameSeparator))
                    {
                        ds = GetData(ConnStr_ETLReference, "SELECT RunAs32Bit FROM StagingControl WHERE StagingControlID = " + stagingControlID);
                        bool runAs32Bit = Convert.ToBoolean(ds.Tables[0].Rows[0]["RunAs32Bit"]);

                        string dtexec = GetDtexecLocation(runAs32Bit, ConnStr_ETLReference);


                        string ExecutionCommand = CreateStagingExecutionCommand(StagingExecutionLocation, Server, stagingControlID, ExecutionInstanceGUID, StartTime, ConnStr_ETLReference);

                        StagingLogMessage(ConnStr_ETLReference,
                            -1,
                            1,
                            0,
                            "Log Manager Starting StagingExecution File Extract",
                            dtexec + " " + ExecutionCommand,
                            0,
                            0,
                            0,
                            0,
                            "",
                            StartTime,
                            "",
                            "",
                            stagingControlID,
                            ExecutionInstanceGUID);

                        StartSSISPackage(ExecutionCommand, stagingControlID, runAs32Bit, ConnStr_ETLReference);
                    }
                }
            }
            //Process Data Extracts
            foreach (int stagingControlID in GetNextRunDateTimeStagingControlID(ConnStr_ETLReference, Suite))
            {
                ds = GetData(ConnStr_ETLReference, "SELECT RunAs32Bit FROM StagingControl WHERE StagingControlID = " + stagingControlID);
                bool runAs32Bit = Convert.ToBoolean(ds.Tables[0].Rows[0]["RunAs32Bit"]);

                string dtexec = GetDtexecLocation(runAs32Bit, ConnStr_ETLReference);

                string ExecutionCommand = CreateStagingExecutionCommand(StagingExecutionLocation, Server, stagingControlID, ExecutionInstanceGUID,
                    StartTime, ConnStr_ETLReference);

                StagingLogMessage(ConnStr_ETLReference,
                    -1,
                    1,
                    0,
                    "Log Manager Starting StagingExecution Data Extracts",
                    dtexec + " " + ExecutionCommand,
                    0,
                    0,
                    0,
                    0,
                    "",
                    StartTime,
                    "",
                    "",
                    stagingControlID,
                    ExecutionInstanceGUID);

                StartSSISPackage(ExecutionCommand, stagingControlID, false, ConnStr_ETLReference);
            }
            while (0 < SSISPackagesCount)
            {
                //Check every 5 secs to see if the packages have completed.
                Thread.Sleep(5000);
            }

            foreach (var value in ProcessControl.Values)
            {
                if (value.ExitCode != 0)
                {
                    StagingLogMessage(ConnStr_ETLReference,
                        -1,
                        0,
                        1,
                        "Log Manager Error Log for StagingExecutionDynamic",
                        value.OutputMessage,
                        0,
                        0,
                        0,
                        0,
                        "",
                        StartTime,
                        "",
                        "",
                        value.ControlID,
                        ExecutionInstanceGUID);
                }
            }

            StagingLogMessage(ConnStr_ETLReference,
                   -1,
                   1,
                   1,
                   "Log Manager Complete",
                   "",
                   0,
                   0,
                   0,
                   0,
                   "",
                   StartTime,
                   "",
                   "",
                   -1,
                   ExecutionInstanceGUID);
        }

        /// <summary>
        /// Staging Execution Sql BulkUpload
        /// Checks if any sql extracts need to occur and run them
        /// </summary>
        /// <param name="values"></param>
        public void MainStagingExecutionSqlBulkUpload(Dictionary<string, object> values)
        {
            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string ConnStr_Staging = values["ConnStr_Staging"].ToString();
            string ConnStr_Source = values["ConnStr_Source"].ToString();
            int StagingJobID = Convert.ToInt32(values["StagingJobID"]);
            string SourceCmdText = values["SourceCmdText"].ToString();
            string StartTime = values["StartTime"].ToString();
            string ExtractStartTime = values["ExtractStartTime"].ToString();
            string ExtractEndTime = values["ExtractEndTime"].ToString();
            int StagingControlID = Convert.ToInt32(values["StagingControlID"]);
            string ManagerGUID = values["ManagerGUID"].ToString();
            int BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            string StagingTable = values["StagingTable"].ToString();
            string SourceQueryMapping = values["SourceQueryMapping"].ToString();
            bool bTruncateStagingTable = Convert.ToBoolean(values["TruncateStagingTable"]);
            string SourceTypeName = values["SourceTypeName"].ToString();

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            checkConnection(ConnStr_Staging);
            dsb.ConnectionString = ConnStr_Staging;
            dsb.Remove("Provider");
            ConnStr_Staging = dsb.ConnectionString + ";Connect Timeout=0";

            checkConnection(ConnStr_Source, SourceTypeName);
            dsb.ConnectionString = ConnStr_Source;
            dsb.Remove("Provider");

            ConnStr_Source = dsb.ConnectionString;
            if (SQL.Contains(SourceTypeName))
            {
                ConnStr_Source += ";Connect Timeout=0";
            }

            StagingLogMessage(ConnStr_ETLReference,
                StagingJobID,
                1,
                0,
                "Log StagingExecution BulkSQL evaluated Source Query",
                SourceCmdText,
                0,
                0,
                0,
                0,
                "",
                StartTime,
                ExtractStartTime,
                ExtractEndTime,
                StagingControlID,
                ManagerGUID);

            TruncateTable(StagingTable, ConnStr_Staging, bTruncateStagingTable);

            int rowsCopied = PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Staging, BulkUploadLoadSize, StagingTable, SourceQueryMapping, SourceTypeName);
            values.Add("rowsCopied", rowsCopied);

        }

        public void MainStagingExecutionFileBulkUpload(Dictionary<string, object> values)
        {

            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string Environment = values["Environment"].ToString();
            string FileNameSeparator = values["FileNameSeparator"].ToString();
            string StagingPackageName = values["StagingPackageName"].ToString();
            string ConnStr_Staging = values["ConnStr_Staging"].ToString();
            string SourceQueryMapping = values["SourceQueryMapping"].ToString();
            char DelimiterChar = Convert.ToChar(values["DelimiterChar"]);
            string Suite = values["Suite"].ToString();
            string FolderBaseLocation = values["FolderBaseLocation"].ToString();
            string StagingTable = values["StagingTable"].ToString();
            string MergeQuery = values["MergeQuery"].ToString();
            bool bHasHeader = Convert.ToBoolean(values["HasHeader"]);
            int BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            string StartTime = values["StartTime"].ToString();
            string FileTimeStampFormat = values["FileTimeStampFormat"].ToString();
            int StagingControlID = Convert.ToInt32(values["StagingControlID"]);
            string ManagerGUID = values["ManagerGUID"].ToString();
            bool bTruncateStagingTable = Convert.ToBoolean(values["TruncateStagingTable"]);

            SuiteFolderLocation = GetSuiteFolderLocation(FolderBaseLocation, Environment, Suite);

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            checkConnection(ConnStr_Staging);
            dsb.ConnectionString = ConnStr_Staging;
            dsb.Remove("Provider");
            ConnStr_Staging = dsb.ConnectionString + ";Connect Timeout=0";

            List<Mapping> Mappings = SplitMappings(SourceQueryMapping);

            var fileFullNames = GetFiles(Path.Combine(SuiteFolderLocation, "Unprocessed"));
            var OrderFiles = GetOrderFiles(fileFullNames, FileNameSeparator, StagingPackageName, FileTimeStampFormat);

            if (OrderFiles != null)
            {
                foreach (var file in OrderFiles)
                {

                    int StagingJobID = GetStagingJobID(ConnStr_ETLReference);
                    unProcessedFileFullName = file.Value;

                    StagingLogMessage(ConnStr_ETLReference,
                        StagingJobID,
                        1,
                        0,
                        "Log StagingExecution Starting file process.",
                        "",
                        0,
                        0,
                        0,
                        0,
                        unProcessedFileFullName,
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);


                    InProcessedFileFullName = moveFileToInProcess(unProcessedFileFullName, StagingJobID, SuiteFolderLocation);

                    CheckFileHeadersAndColumns(InProcessedFileFullName, SourceQueryMapping, StagingTable, ConnStr_Staging, DelimiterChar);

                    TruncateTable(StagingTable, ConnStr_Staging, bTruncateStagingTable);

                    ProcessFile(StagingJobID, InProcessedFileFullName, ConnStr_Staging, Mappings, BulkUploadLoadSize, StagingTable, SuiteFolderLocation, bHasHeader, DelimiterChar);

                    RowCountStaged(ConnStr_Staging, StagingTable, StagingJobID);

                    MergeData(ConnStr_Staging, MergeQuery, StagingJobID);

                    StagingLogMessage(ConnStr_ETLReference,
                        StagingJobID,
                        1,
                        1,
                        "Log StagingExecution Completed files processed.",
                        "",
                        RowsInserted,
                        RowsDeleted,
                        RowsUpdated,
                        RowsStaged,
                        unProcessedFileFullName,
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);
                }
            }
            else
            {
                StagingLogMessage(ConnStr_ETLReference,
                        -1,
                        1,
                        1,
                        "Log StagingExecution Completed no files found.",
                        "",
                        0,
                        0,
                        0,
                        0,
                        "",
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);
            }

        }

        public string GetPackageName(string fileFullName, string fileNameSeparator)
        {
            string fileName = Path.GetFileName(fileFullName);

            string packageName = fileName.Substring(0, fileName.LastIndexOf(fileNameSeparator));
            return packageName;
        }

        public string GetSuiteFolderLocation(string FolderBaseLocation, string Environment, string Suite)
        {
            return Path.Combine(FolderBaseLocation, Environment, Suite);
        }

        public string CreateStagingExecutionCommand(string StagingExecutionLocation, string Server, int StagingControlID, string ManagerGUID, string StartTime,
            string ConnStr_ETLReference)
        {
            string command = "/SQL \"" + StagingExecutionLocation
                             + "\" /SERVER \"" + Server
                             + "\"" + " /MAXCONCURRENT \" -1 \" /CHECKPOINTING OFF"
                             + " /SET \"\\Package.Variables[StagingControlID].Value\";" + StagingControlID
                             + " /SET \"\\Package.Variables[ManagerGUID].Value\";\"" + ManagerGUID + "\""
                             + " /SET \"\\Package.Variables[User::StartTime].Value\";\"" + StartTime + "\""
                             + " /SET \"\\Package.Variables[ConnStr_ETLReference].Value\";\"\\\"" + ConnStr_ETLReference + "\\\"\"";
            return command;
        }

        public void StartManagerPackageStaging(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            string command = "/SQL \"" + packageLocationlocation
                             + "\" /SERVER \"" + server + "\""
                             + " /CHECKPOINTING OFF"
                             + " /SET \"\\Package.Variables[ConnStr_ETLReference].Value\";\"\\\"" + ConnStr_ETLReference + "\\\"\""
                             + " /REPORTING E";

            StartSSISPackage(command, -1, false, ConnStr_ETLReference);
        }

        public string GetTimeStamp(string fileFullName, string fileNameSeparator)
        {
            string fileName = Path.GetFileName(fileFullName);
            int index = fileName.LastIndexOf(fileNameSeparator);
            string timeStamp = fileName.Substring((fileName.LastIndexOf(fileNameSeparator) + 1), (fileName.Length - 1 - index));
            return Path.GetFileNameWithoutExtension(timeStamp);
        }

        public List<string> GetFiles(string suiteFolderLocation)
        {
            if (Directory.Exists(suiteFolderLocation))
            {
                var files =
                    Directory.GetFiles(suiteFolderLocation, "*.*")
                        .Where(file => file.ToLower().EndsWith("csv")
                                       || file.ToLower().EndsWith("zip")
                                       || file.ToLower().EndsWith("txt"))
                        .ToList();
                return files;
            }
            return null;
        }

        public List<int> GetStagingControlIDs(string ConnStr_ETLReference, List<string> fileFullNames, String suite, string fileNameSeparator)
        {
            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");

            string packages = "";
            foreach (var fileFullName in fileFullNames)
            {
                string packageName = GetPackageName(fileFullName, fileNameSeparator);

                if (!String.IsNullOrEmpty(packages))
                {
                    packages += ", ";
                }
                packages += "''" + packageName + "''";
            }
            if (!String.IsNullOrEmpty(packages))
            {
                string sqlQuery = "EXEC dbo.spGetStagingPackagesFile @SuiteName='" + suite + "', @Packages='" + packages + "' ";

                var ds = GetData(ConnStr_ETLReference, sqlQuery);

                if (ds.Tables.Count > 0)
                {
                    DataTable dtPackages = ds.Tables[0];
                    var query = from r in dtPackages.AsEnumerable()
                                select r.Field<int>("StagingControlID");

                    return query.ToList();

                }
            }

            return null;
        }

        public SortedList<DateTime, String> GetOrderFiles(List<string> fileFullNames, string fileNameSeparator, string PackageName, string fileTimeStampFormat)
        {
            var files = new SortedList<DateTime, String>();
            foreach (var filefullName in fileFullNames)
            {
                if (PackageName == GetPackageName(filefullName, fileNameSeparator))
                {
                    string timeStamp = GetTimeStamp(filefullName, fileNameSeparator);

                    CultureInfo provider = CultureInfo.InvariantCulture;
                    DateTime dt = DateTime.ParseExact(timeStamp, fileTimeStampFormat, provider);

                    files.Add(dt, filefullName);
                }
            }
            if (files.Count > 0)
            {
                return files;
            }
            return null;
        }

        public void RowCountStaged(string ConnStr_Staging, string StagingExtractTable, int StagingJobID)
        {
            var ds = GetData(ConnStr_Staging, "SELECT COUNT(*) AS 'RowsStaged' FROM " + StagingExtractTable + " WHERE StagingJobID = " + StagingJobID);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                RowsStaged = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsStaged"]);
            }
            else
            {
                throw new Exception("RowCountStaged - Failed to return row count");
            }

        }

        public void MergeData(string ConnStr_Staging, string MergeQuery, int StagingJobID)
        {
            var ds = GetData(ConnStr_Staging, "EXEC " + MergeQuery + " @StagingJobID = " + StagingJobID);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                RowsInserted = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsInserted"]);
                RowsDeleted = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsDeleted"]);
                RowsUpdated = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsUpdated"]);
            }
            else
            {
                throw new Exception("MergeData stored proc failed to return row count details");
            }
        }

        public int GetStagingJobID(string ConnStr_ETLReference)
        {
            var ds = GetData(ConnStr_ETLReference, "EXEC dbo.spGetJobID @Type = 'StagingJobID'");

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return Convert.ToInt32(ds.Tables[0].Rows[0]["JobID"]);
            }

            throw new Exception("GetStagingJobID failed to return a StagingJobID");
        }

        public void CleanUpFiles(string unProcessedFileFullName, string InProcessedFileFullName, string SuiteFolderLocation)
        {
            if (String.IsNullOrEmpty(SuiteFolderLocation) == false)
            {
                if (String.IsNullOrEmpty(InProcessedFileFullName) == false && File.Exists(InProcessedFileFullName))
                {
                    string archiveFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(InProcessedFileFullName));
                    if (File.Exists(archiveFileFullName))
                    {
                        File.Delete(archiveFileFullName);
                    }

                    File.Move(InProcessedFileFullName, archiveFileFullName);

                    if (Directory.Exists(Path.GetDirectoryName(InProcessedFileFullName)))
                    {
                        //Todo: Delete files
                        Directory.Delete(Path.GetDirectoryName(InProcessedFileFullName), true);
                    }
                }

                if (String.IsNullOrEmpty(unProcessedFileFullName) == false && File.Exists(unProcessedFileFullName))
                {
                    string archiveFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName));
                    if (File.Exists(archiveFileFullName))
                    {
                        //Todo: Delete files
                        File.Delete(archiveFileFullName);
                    }

                    File.Move(unProcessedFileFullName, Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName)));
                }
            }
        }

        public int PerformSQLBulkCopy(string ConnStr_Source, string SourceCmdText, string ConnStr_Destination,
            int BulkUploadLoadSize, string StagingTable, string SourceQueryMapping, string SourceTypeName)
        {
            List<Mapping> Mappings = SplitMappings(SourceQueryMapping);

            return PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Destination, BulkUploadLoadSize,
                StagingTable, Mappings, SourceTypeName);
        }


        public int PerformFileBulkCopy(string SourceCmdText, string ConnStr_Destination, string FileFullName,
            int BulkUploadLoadSize, string DestinationTable, List<Mapping> Mappings, bool HasHeader, char DelimiterChar)
        {

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_Destination;
            dsb.Remove("Provider");
            ConnStr_Destination = dsb.ConnectionString + ";Connect Timeout=0";

            CreateShemaIniFile(FileFullName, Mappings, HasHeader, DelimiterChar);

            var bulkCopy = new SqlBulkCopy(ConnStr_Destination, SqlBulkCopyOptions.KeepIdentity);

            bulkCopy.BatchSize = BulkUploadLoadSize;
            bulkCopy.BulkCopyTimeout = 0;
            bulkCopy.DestinationTableName = DestinationTable;

            BulkCopyMapping(bulkCopy, Mappings);

            var connString = string.Format(
                @"Provider=Microsoft.Jet.OleDb.4.0; Data Source={0};Extended Properties=""Text;HDR=YES;FMT=Delimited""",
                Path.GetDirectoryName(FileFullName)
            );

            using (var conn = new OleDbConnection(connString))
            {
                conn.Open();

                using (OleDbCommand cmd = new OleDbCommand(SourceCmdText, conn))
                {

                    using (OleDbDataReader reader = cmd.ExecuteReader())
                    {
                        bulkCopy.WriteToServer(reader);
                    }
                }
            }
            int result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);

            bulkCopy.Close();
            return result;
        }

        public void ProcessFile(int StagingJobID, string InProcessedFileFullName, string ConnStr_Staging, List<Mapping> Mappings, int BulkUploadLoadSize,
            string StagingExtractTable, string SuiteFolderLocation, bool HasHeader, char DelimiterChar)
        {
            string selectColumns = "";
            foreach (var mapping in Mappings)
            {
                selectColumns += mapping.OledSourceMap + ", ";
            }

            var query = "SELECT " + selectColumns + StagingJobID + " AS [StagingJobID] FROM [" +
                            Path.GetFileName(InProcessedFileFullName) + "]";

            PerformFileBulkCopy(query, ConnStr_Staging, InProcessedFileFullName, BulkUploadLoadSize, StagingExtractTable,
                Mappings, HasHeader, DelimiterChar);

            string archiveFileFullName = Path.Combine(SuiteFolderLocation, "Processed", Path.GetFileName(InProcessedFileFullName));

            if (File.Exists(archiveFileFullName))
            {
                //TODO: Fix deletion
                File.Delete(archiveFileFullName);
            }

            File.Move(InProcessedFileFullName, archiveFileFullName);

            if (Directory.Exists(Path.GetDirectoryName(InProcessedFileFullName)))
            {
                Directory.Delete(Path.GetDirectoryName(InProcessedFileFullName), true);
            }

            // Move zip file into Processed

            if (Path.GetExtension(unProcessedFileFullName).ToLower() == ".zip")
            {
                archiveFileFullName = Path.Combine(SuiteFolderLocation, "Processed", Path.GetFileName(unProcessedFileFullName));

                if (File.Exists(archiveFileFullName))
                {
                    File.Delete(archiveFileFullName);
                }
                File.Move(unProcessedFileFullName, archiveFileFullName);
            }
        }

        /// <summary>
        /// This is used to create the Schema.ini file used by the OleDbConnection. To forece column types
        /// </summary>
        /// <param name="InProcessedFileFullName"></param>
        public void CreateShemaIniFile(string FileFullName, List<Mapping> Mappings, bool HasHeader, char DelimiterChar)
        {
            StringBuilder schema = new StringBuilder();

            schema.AppendLine("[" + Path.GetFileName(FileFullName) + "]");

            if (HasHeader)
            {
                schema.AppendLine("ColNameHeader=True");
            }
            else
            {
                schema.AppendLine("ColNameHeader=False");
            }

            //Delimited Character
            switch (DelimiterChar)
            {
                case ',':
                    schema.AppendLine("Format=CSVDelimited");
                    break;
                case '\t':
                    schema.AppendLine("Format=TabDelimited");
                    break;
                default:
                    schema.AppendLine("Format=Delimited(" + DelimiterChar + ")");
                    break;
            }

            for (int i = 0; i < Mappings.Count; i++)
            {
                schema.AppendLine("col" + (i + 1).ToString() + "=" + Mappings[i].OledSourceMap + " Text");
            }

            string schemaFileName = Path.Combine(Path.GetDirectoryName(FileFullName), "Schema.ini");
            TextWriter tw = new StreamWriter(schemaFileName);
            tw.WriteLine(schema.ToString());
            tw.Close();

        }

        public string moveFileToInProcess(string unProcessedFileFullName, int StagingJobID, string SuiteFolderLocation)
        {
            string InProcessFileFullName = "";
            string InProcessDirectory = Path.Combine(SuiteFolderLocation, "InProcess", Guid.NewGuid().ToString());
            if (Path.GetExtension(unProcessedFileFullName).ToLower() == ".zip")
            {
                var zip = ZipFile.Open(unProcessedFileFullName, ZipArchiveMode.Read);

                string zippedFileName = "";
                if (zip.Entries.Count == 1)
                {
                    zippedFileName = zip.Entries[0].FullName;
                }
                else
                {
                    zip.Dispose();
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "Zip file has more than one file: ");
                }

                if (zippedFileName.Split('.').Count() > 2)
                {
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "file has to many fullstops in the name expected format *.*: ");
                }

                string newTempDir = Path.Combine(SuiteFolderLocation, Guid.NewGuid().ToString());
                Directory.CreateDirectory(newTempDir);
                zip.ExtractToDirectory(newTempDir);
                zip.Dispose();

                string extractedFilePathName = Path.Combine(newTempDir, zippedFileName);

                if (File.Exists(extractedFilePathName))
                {
                    InProcessFileFullName = Path.Combine(InProcessDirectory, StagingJobID.ToString().PadLeft(5, '0') + "_" + zippedFileName);
                    Directory.CreateDirectory(InProcessDirectory);
                    System.IO.File.Move(extractedFilePathName, InProcessFileFullName);
                    Directory.Delete(newTempDir, true);
                }
                else
                {
                    throw new Exception("Unzipped file cannot be found: " + extractedFilePathName);
                }
            }
            else
            {
                if (Path.GetFileName(unProcessedFileFullName).Split('.').Count() > 2)
                {
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "file has to many fullstops in the name expected format *.*: ");
                }

                InProcessFileFullName = Path.Combine(InProcessDirectory, Path.GetFileName(unProcessedFileFullName));
                Directory.CreateDirectory(InProcessDirectory);
                System.IO.File.Move(unProcessedFileFullName, InProcessFileFullName);
            }
            return InProcessFileFullName;
        }

        public string getFailedDir(string SuiteFolderLocation)
        {
            return Path.Combine(SuiteFolderLocation, "Failed");
        }
        public void MoveToUnProcessedToFailedDir(string unProcessedFileFullName, string SuiteFolderLocation, string ErrorMessage)
        {
            string FailedFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName));

            //handle zip files
            if (File.Exists(unProcessedFileFullName))
            {
                if (File.Exists(FailedFileFullName))
                {
                    //Todo:Fix deletion
                    File.Delete(FailedFileFullName);
                }

                File.Move(unProcessedFileFullName, FailedFileFullName);
            }

            throw new Exception(ErrorMessage + unProcessedFileFullName);
        }

        public List<int> GetNextRunDateTimeStagingControlID(string ConnStr_ETLReference, string Suite)
        {
            var ds = GetData(ConnStr_ETLReference, "[dbo].[spGetStagingPackagesSql] '" + Suite + "'");

            if (ds.Tables.Count > 0)
            {
                DataTable dtPackages = ds.Tables[0];
                var query = from r in dtPackages.AsEnumerable()
                            select r.Field<int>("StagingControlID");
                return query.ToList();
            }

            return null;
        }

        public bool CheckFileHeadersAndColumns(string filename, string SourceQueryMapping, string StagingTable, string ConnStr_Staging, char Delimeter)
        {
            var schemaName = string.Empty;
            var tableName = StagingTable;

            if (StagingTable.Split('.').Count() > 1)
            {
                schemaName = StagingTable.Split('.')[0];
                tableName = StagingTable.Split('.')[1];
            }

            var query = "SELECT c.COLUMN_NAME AS column_name FROM INFORMATION_SCHEMA.COLUMNS c WHERE c.TABLE_NAME = '" + tableName + "' " + (schemaName != string.Empty ? " AND  c.TABLE_SCHEMA='" + schemaName + "'" : "");
            var columnsDs = GetData(ConnStr_Staging, query);
            List<string> listColumns = (from DataRow row in columnsDs.Tables[0].Rows select row[0].ToString()).ToList();

            var listHeaderFromFile = ReadFileHeader(filename, Delimeter);

            var Mappings = SplitMappings(SourceQueryMapping);

            // Check File Header fields should be valid fair with sourcequerymapping
            bool isHeaderValid = true;
            foreach (var header in listHeaderFromFile)
            {
                isHeaderValid = Mappings.FirstOrDefault(f => f.SourceMap == header) != null;
                if (!isHeaderValid)
                {
                    throw new Exception("File header field is not existed. File header fields: " + header + " doesn't existed in source query mapping: " + SourceQueryMapping + ". File name: " + filename + ", Staging table: " + StagingTable);
                }
            }

            // Check Columns from table should be valid fair with sourcequerymapping
            bool isColumnValid = true;

            foreach (var mapping in Mappings)
            {
                isColumnValid = listColumns.Contains(mapping.DestinationMap);
                if (!isColumnValid)
                {
                    throw new Exception("Sourcequerymaping is unvalid. Mapping: " + mapping.DestinationMap + " in source query mapping: " + SourceQueryMapping + " does not existed in table: " + StagingTable);
                }
            }

            // Check File Header fields should be in the same order and value as the sourcequerymapping
            if (listHeaderFromFile.Count > Mappings.Count)
            {
                isHeaderValid = false;
            }
            else
            {
                if (listHeaderFromFile.Where((t, i) => t != Mappings[i].SourceMap).Any())
                {
                    isHeaderValid = false;
                    throw new Exception("Wrong header order. File header fields in file: " + filename + " has order: " + GenerateListToString(listHeaderFromFile) + " is not matched to source query mapping: " + SourceQueryMapping);
                }
            }

            return isHeaderValid && isColumnValid;
        }

        public static List<string> ReadFileHeader(string filename, char delimiter)
        {
            string strHeader = string.Empty;
            var file = new StreamReader(filename);
            while ((strHeader = file.ReadLine()) != null)
            {
                break;
            }

            file.Close();
            var listHeader = new List<string>();
            if (!string.IsNullOrEmpty(strHeader))
            {
                string[] headers = strHeader.Split(delimiter);

                listHeader.AddRange(headers);
            }

            return listHeader;
        }

        public void StagingLogMessage(string ConnStr_ETLReference,
                      int StagingJobID,
                      int SuccessFlag,
                      int CompletedFlag,
                      string MessageSource,
                      string Message,
                      int RowsInserted,
                      int RowsDeleted,
                      int RowsUpdated,
                      int RowsStaged,
                      string ActualFileName,
                      string StartTime,
                      string ExtractStartTime,
                      string ExtractEndTime,
                      int StagingControlID,
                      string ManagerGUID)
        {
            string tempMessage = Message.Replace("'", "''");

            string sqlCmdLog = "[spInsertStagingExecutionLog] "
                               + "@StagingJobID = " + StagingJobID + ", "
                               + "@ManagerGUID = '" + ManagerGUID + "', "
                               + "@SuccessFlag = " + SuccessFlag + ", "
                               + "@CompletedFlag = " + CompletedFlag + ", "
                               + "@MessageSource = '" + MessageSource + "', "
                               + "@Message = '" + tempMessage + "', "
                               + "@RowsStaged = " + RowsStaged + ", "
                               + "@RowsInserted = " + RowsInserted + ", "
                               + "@RowsDeleted = " + RowsDeleted + ", "
                               + "@RowsUpdated = " + RowsUpdated + ", "
                               + "@StagingPackagePathAndName = NULL, "
                               + "@ActualFileName = '" + ActualFileName + "', "
                               + "@StartTime = '" + StartTime + "', ";

            if (String.IsNullOrEmpty(ExtractStartTime))
            {
                sqlCmdLog += "@ExtractStartTime = NULL, ";
            }
            else
            {
                sqlCmdLog += "@ExtractStartTime = '" + ExtractStartTime + "', ";
            }

            if (String.IsNullOrEmpty(ExtractStartTime))
            {
                sqlCmdLog += "@ExtractEndTime = NULL, ";
            }
            else
            {
                sqlCmdLog += "@ExtractEndTime = '" + ExtractEndTime + "', ";
            }

            sqlCmdLog += "@StagingControlID = " + StagingControlID;

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");
            ConnStr_ETLReference = dsb.ConnectionString;

            var SrcConn = new SqlConnection(ConnStr_ETLReference);

            var sCommand = new SqlCommand(sqlCmdLog, SrcConn);
            SrcConn.Open();
            sCommand.ExecuteNonQuery();
            SrcConn.Close();
            SrcConn.Dispose();
        }
        #endregion

        #region Extract Manager

        public void MainExtractManagerBulkUpload(Dictionary<string, object> values)
        {
            var dsb = new DbConnectionStringBuilder();
            var ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            var ConnStr_Destination = values["ConnStr_Destination"].ToString();
            var ConnStr_Source = values["ConnStr_Source"].ToString();
            var SourceTypeName = values["SourceTypeName"].ToString();
            var SourceCmdText = values["SourceCmdText"].ToString();
            var bTruncateExtractTable = Convert.ToBoolean(values["bTruncateExtractTable"]);
            var ExtractTable = values["ExtractTable"].ToString();
            var BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            var SourceQueryMapping = values["SourceQueryMapping"].ToString();
            var ExtractStartTime = values["ExtractStartTime"].ToString();
            var ExtractEndTime = values["ExtractEndTime"].ToString();
            var ExtractJobID = Convert.ToInt32(values["ExtractJobID"]);
            var ExtractControlID = Convert.ToInt32(values["ExtractControlID"]);
            var ManagerGUID = values["ManagerGUID"].ToString();


            checkConnection(ConnStr_Destination);
            dsb.ConnectionString = ConnStr_Destination;
            dsb.Remove("Provider");
            ConnStr_Destination = dsb.ConnectionString + ";Connect Timeout=0";

            checkConnection(ConnStr_Source, SourceTypeName);
            dsb.ConnectionString = ConnStr_Source;
            dsb.Remove("Provider");

            ConnStr_Source = dsb.ConnectionString;
            if (SQL.Contains(SourceTypeName))
            {
                ConnStr_Source += ";Connect Timeout=0";
            }

            //This is to handle if the source query uses any paramters. All evaluted paramters
            //must be part if the readlonly collection

            string tempSourceCmdText = SourceCmdText.Replace("'", "''");

            ExtractLogMessage(ConnStr_ETLReference,
               ExtractJobID,
               1,
               0,
               "Log ExtractExecution.BulkUpload",
               tempSourceCmdText,
               0,
               "",
               null,
               ExtractStartTime,
               ExtractEndTime,
               ExtractEndTime,
               ExtractControlID,
               ManagerGUID
               );

            TruncateTable(ExtractTable, ConnStr_Destination, bTruncateExtractTable);

            int rowsCopied = PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Destination, BulkUploadLoadSize, ExtractTable, SourceQueryMapping, SourceTypeName);
            values.Add("rowsCopied", rowsCopied);
        }

        private void ExtractLogMessage(string ConnStr_ETLReference,
                     int ExtractJobID,
                     int SuccessFlag,
                     int CompletedFlag,
                     string MessageSource,
                     string Message,
                     int RowsExtracted,
                     string ExtractPackagePathAndName,
                     string StartTime,
                     string ExtractStartTime,
                     string ExtractEndTime,
                     string NextExtractStartTime,
                     int ExtractControlID,
                     string ManagerGUID
          )
        {
            StartTime = StartTime == null ? "NULL" : "'" + StartTime + "'";
            ExtractStartTime = ExtractStartTime == null ? "NULL" : "'" + ExtractStartTime + "'";
            ExtractEndTime = ExtractEndTime == null ? "NULL" : "'" + ExtractEndTime + "'";
            NextExtractStartTime = NextExtractStartTime == null ? "NULL" : "'" + NextExtractStartTime + "'";

            string sqlCmdLog = "[spInsertExtractExecutionLog] "
                 + "@ExtractJobID = " + ExtractJobID + ", "
                 + "@StartTime = " + StartTime + ","
                 + "@ManagerGUID = '" + ManagerGUID + "', "
                 + "@SuccessFlag = " + SuccessFlag + ", "
                 + "@CompletedFlag = " + CompletedFlag + ", "
                 + "@MessageSource = '" + MessageSource + "', "
                 + "@Message = '" + Message + "', "
                 + "@RowsExtracted = " + RowsExtracted + ", "
                 + "@ExtractStartTime = " + ExtractStartTime + ", "
                 + "@ExtractEndTime = " + ExtractEndTime + ", "
                 + "@NextExtractStartTime = " + NextExtractStartTime + ", "
                 + "@ExtractPackagePathAndName = '" + ExtractPackagePathAndName + "', "
                 + "@ExtractControlID = " + ExtractControlID;

            //string sqlCmdLog = "[spInsertExtractExecutionLog] "
            //     + "@ExtractJobID = " + ExtractJobID + ", "
            //     + "@StartTime = NULL,"
            //     + "@ManagerGUID = '" + ManagerGUID + "', "
            //     + "@SuccessFlag = 1, "
            //     + "@CompletedFlag = 0, "
            //     + "@MessageSource = 'Log ExtractExecution.BulkUpload', "
            //     + "@Message = '" + tempSourceCmdText + "', "
            //     + "@RowsExtracted = 0, "
            //     + "@ExtractStartTime = '" + ExtractEndTime + "', "
            //     + "@ExtractEndTime = '" + ExtractEndTime + "', "
            //     + "@NextExtractStartTime = '" + ExtractEndTime + "', "
            //     + "@ExtractPackagePathAndName = '', "
            //     + "@ExtractControlID = " + ExtractControlID;

            var dsb = new DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");
            ConnStr_ETLReference = dsb.ConnectionString;

            var SrcConn = new SqlConnection(ConnStr_ETLReference);

            var sCommand = new SqlCommand(sqlCmdLog, SrcConn);
            SrcConn.Open();
            sCommand.ExecuteNonQuery();
            SrcConn.Close();
            SrcConn.Dispose();
        }

        public void StartManagerPackageExtract(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }

        #endregion

        #region Delivery Manager
        public void StartManagerPackageDelivery(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }
        #endregion

        #region Summary Manager

        public void StartManagerPackageSummary(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }
        #endregion

        #region Common

        public int PerformSQLBulkCopy(string ConnStr_Source, string SourceCmdText, string ConnStr_Destination,
         int BulkUploadLoadSize, string DestinatonTable, List<Mapping> Mappings, string SourceTypeName)
        {

            int result = 0;
            var bulkCopy = new SqlBulkCopy(ConnStr_Destination, SqlBulkCopyOptions.KeepIdentity);

            bulkCopy.BatchSize = BulkUploadLoadSize;
            bulkCopy.BulkCopyTimeout = 0;
            bulkCopy.DestinationTableName = DestinatonTable;

            BulkCopyMapping(bulkCopy, Mappings);

            if (SQL.Contains(SourceTypeName))
            {
                var SrcConn = new SqlConnection(ConnStr_Source);
                var sCommand = new SqlCommand(SourceCmdText, SrcConn);
                sCommand.CommandTimeout = 0;

                SrcConn.Open();
                var SqlReader = sCommand.ExecuteReader();
                bulkCopy.WriteToServer(SqlReader);

                SqlReader.Close();
                SrcConn.Close();
                SrcConn.Dispose();
                result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);
                bulkCopy.Close();
            }
            else if (ORACLE.Contains(SourceTypeName))
            {

                var SrcConn = new OracleConnection(ConnStr_Source);
                SrcConn.Open();

                var sCommand = new OracleCommand(SourceCmdText, SrcConn);
                sCommand.CommandTimeout = 0;
                sCommand.Parameters.Add("cur", OracleDbType.RefCursor);
                sCommand.Parameters["cur"].Direction = ParameterDirection.Output;
                sCommand.ExecuteNonQuery();

                var SqlReader = sCommand.ExecuteReader();
                bulkCopy.WriteToServer(SqlReader);

                SqlReader.Close();
                SrcConn.Close();
                SrcConn.Dispose();

                result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);
                bulkCopy.Close();
            }

            return result;
        }

        public List<Mapping> SplitMappings(string SourceQueryMapping)
        {
            var lMapping = new List<Mapping>();
            if ((!String.IsNullOrEmpty(SourceQueryMapping)) && SourceQueryMapping.Contains(";"))
            {
                List<string> lSourceQueryMapping = new List<string>(SourceQueryMapping.Split(';'));

                foreach (var map in lSourceQueryMapping)
                {
                    List<string> cols = new List<string>(map.Split(','));
                    if (cols.Count == 2)
                    {
                        if (String.IsNullOrEmpty(cols[0]) || String.IsNullOrEmpty(cols[1]))
                        {
                            throw new System.Exception("Bulk copy SourceQueryMapping has an invalid pair (empty string)");
                        }
                        lMapping.Add(new Mapping()
                        {
                            SourceMap = cols[0].Trim(),
                            DestinationMap = cols[1].Trim()
                        });

                    }
                    else
                    {
                        throw new System.Exception("Bulk copy SourceQueryMapping has an invalid pair (count does not match): " + map);
                    }
                }
            }
            return lMapping;
        }

        public void checkConnection(string ConnStr, string SourceTypeName = "OLEDB")
        {
            var dsb = new DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr;
            dsb.Remove("Provider");
            if (SQL.Contains(SourceTypeName))
            {

                var con = new SqlConnection(dsb.ConnectionString);
                con.Open();
                con.Close();
            }
            else if (ORACLE.Contains(SourceTypeName))
            {
                var con = new OracleConnection(dsb.ConnectionString);
                con.Open();
                con.Close();
            }

        }

        public void BulkCopyMapping(SqlBulkCopy bulkCopy, List<Mapping> Mappings)
        {
            foreach (var mapping in Mappings)
            {
                var m = new SqlBulkCopyColumnMapping();

                bulkCopy.ColumnMappings.Add(new
                 SqlBulkCopyColumnMapping(mapping.OledSourceMap, mapping.DestinationMap));
            }
        }

        public string GetDtexecLocation(bool RunAs32Bit, string ConnStr_ETLReference)
        {
            var ds = GetData(ConnStr_ETLReference, "EXEC spGetDtexecLocation @RunAs32Bit='" + RunAs32Bit.ToString() + "'");

            string dtexec = ds.Tables[0].Rows[0]["LocationDtexec"].ToString();

            if (dtexec.Contains(" "))
            {
                dtexec = "\"" + dtexec + "\"";
            }
            return dtexec;
        }
        public void StartSSISPackage(string command, int ControlID, bool RunAs32Bit, string ConnStr_ETLReference)
        {
            string dtexec = GetDtexecLocation(RunAs32Bit, ConnStr_ETLReference);

            ProcessInformation p = new ProcessInformation() { ControlID = ControlID };
            ProcessControl.Add(ControlID, p);
            p.EnableRaisingEvents = true;
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;
            p.Exited += p_Exited;

            p.OutputDataReceived += new DataReceivedEventHandler
            (
                delegate(object sender, DataReceivedEventArgs e)
                {
                    ((ProcessInformation)sender).OutputMessage += e.Data + Environment.NewLine;
                }
            );

            p.StartInfo.FileName = dtexec;
            p.StartInfo.Arguments = command;
            p.StartInfo.CreateNoWindow = true;

            SSISPackagesCount++;

            p.Start();
            p.BeginOutputReadLine();
        }

        void p_Exited(object sender, EventArgs e)
        {
            SSISPackagesCount--;
        }

        public string GenerateListToString(List<string> list)
        {
            string str = list.Aggregate(string.Empty, (current, item) => current + (item + ","));
            if (str.Length > 1)
            {
                str = str.Substring(0, str.Length - 1);
            }

            return str;
        }

        public DataSet GetData(string connnectionString, string sqlQuery)
        {
            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = connnectionString;
            dsb.Remove("Provider");

            var ds = new DataSet();
            using (var conn = new SqlConnection(dsb.ConnectionString))
            {
                var adapter = new SqlDataAdapter(sqlQuery, conn);
                adapter.Fill(ds);
            }

            return ds;
        }

        public void TruncateTable(string Table, string ConnStr_Destination, bool bTruncateTable)
        {
            if (bTruncateTable)
            {
                var trcConn = new SqlConnection(ConnStr_Destination);

                var trcCommand = new SqlCommand("TRUNCATE TABLE " + Table, trcConn);
                trcCommand.CommandTimeout = 0;

                trcConn.Open();
                trcCommand.ExecuteNonQuery();
                trcConn.Close();
                trcConn.Dispose();
            }
        }
        #endregion

    }

    public class ProcessInformation : Process
    {
        public int ControlID { get; set; }
        public string OutputMessage { get; set; }
    }
    static class SqlBulkCopyExtension
    {
        public static int RowsCopiedCount(this SqlBulkCopy bulkCopy)
        {
            FieldInfo _rowsCopiedField = typeof(SqlBulkCopy).GetField("_rowsCopied", BindingFlags.NonPublic | BindingFlags.GetField | BindingFlags.Instance);
            return (int)_rowsCopiedField.GetValue(bulkCopy);
        }

    }
    public class Mapping
    {
        public string SourceMap { get; set; }
        public string OledSourceMap
        {
            get { return SourceMap.Replace(".", ""); }
        }
        public string DestinationMap { get; set; }
    }

}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Settings.get_Default():ST_060ace5346c44cdaa03356127c150a18.Properties.Sett" +
    "ings")]

namespace ST_060ace5346c44cdaa03356127c150a18.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_060ace5346c44cdaa03356127c150a18")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_060ace5346c44cdaa03356127c150a18")]
[assembly: AssemblyCopyright("Copyright @  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_060ace5346c44cdaa03356127c150a18.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_060ace5346c44cdaa03356127c150a18.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_060ace5346c44cdaa03356127c150a18.dll">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
AHASAm/QAAAKB3IdBgBwCBaMJgAAAW/RAAAKb9IAAApvLwAACghv0wAAChQMAijOAAAKb88AAApy
9B4AcBICb9AAAAoHcgEAAHAIFowmAAABb9EAAApv0gAACm8QAAAKby8AAAoIb9MAAAoUDAIozgAA
Cm/PAAAKcgwfAHASAm/QAAAKB3I5BgBwCBaMJgAAAW/RAAAKb9IAAApvEAAACm8vAAAKCG/TAAAK
FAwCKM4AAApvzwAACnI+HwBwEgJv0AAACgdyrQQAcAgWjCYAAAFv0QAACm/SAAAKbxAAAApvLwAA
Cghv0wAAChQMAijOAAAKb88AAApyZB8AcBICb9AAAAoHcl8GAHAIFowmAAABb9EAAApv0gAACm8Q
AAAKby8AAAoIb9MAAAoUDAIozgAACm/PAAAKcoYfAHASAm/QAAAKB3J1BgBwCBaMJgAAAW/RAAAK
b9IAAApvLwAACghv0wAAChQMAijOAAAKb88AAApyph8AcBICb9AAAAoHcocEAHAIFowmAAABb9EA
AApv0gAACm8vAAAKCG/TAAAKFAwCKM4AAApvzwAACnLYHwBwEgJv0AAACgdyxwAAcAgWjCYAAAFv
0QAACm/SAAAKbxAAAApvLwAACghv0wAAChQMAijOAAAKb88AAApy+B8AcBICb9AAAAoHcokGAHAI
FowmAAABb9EAAApv0gAACm8QAAAKby8AAAoIb9MAAAoUDAIozgAACm/PAAAKciwgAHASAm/QAAAK
B3JNBABwCBaMJgAAAW/RAAAKb9IAAApvLwAACghv0wAAChQMAijOAAAKb88AAApyWiAAcBICb9AA
AAoHcm8EAHAIFowmAAABb9EAAApv0gAACm8QAAAKby8AAAoIb9MAAAoUDAIozgAACm/PAAAKcn4g
AHASAm/QAAAKB3LtBABwCBaMJgAAAW/RAAAKb9IAAApvLwAACghv0wAACgYHbxEAAAYCKM4AAAoW
b9QAAArdowAAAA0UEwQCKM4AAApvzwAACnK0IABwEgRv0AAAChEEFowmAAABb9EAAApv0gAACm8Q
AAAKEwURBG/TAAAKcqECAHATBgYGbwsAAAYGbw0AAAYGbwkAAAZvHQAABt4NEwcRB2/VAAAKEwbe
AAIozgAACm/WAAAKFxEFCW8QAAAKcp0CAHARBigRAAAKcqECAHAWb9cAAAomAijOAAAKF2/UAAAK
3gAqAEE0AAAAAAAAzQQAABoAAADnBAAADQAAADgAAAEAAAAADAAAAH8EAACLBAAAowAAADgAAAEe
AijYAAAKKrQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwg
bXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tl
bj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAA
AAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAACc
FgAAI34AAAgXAABAHQAAI1N0cmluZ3MAAAAASDQAANggAAAjVVMAIFUAABAAAAAjR1VJRAAAADBV
AAB4CQAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJCwAAAPolMwAWAAABAAAAdgAAAAsAAAAeAAAAVwAA
AKwAAADYAAAAAwAAAEEAAAAkAAAABQAAAA8AAAAbAAAAFAAAAAEAAAAKAAAAAQAAAAMAAAAMAAAA
AAAKAAEAAAAAAAYAEAEJAQoAKgEXAQoARwEyAQ4ApwF+AQYAwwEJAQYAAwPoAgYAMQPoAgoAMQTo
AgYAPgQJARIALwYZBgYAbgYJARIAlgYNBgYAgglxCQYAswmeCQYAtg2cDQYA4Q3PDQYA+A3PDQYA
FQ7PDQYANA7PDQYATQ7PDQYAZg7PDQYAgQ7PDQYAnA7PDQYAtQ7PDQYA7g7ODgYADg/ODgYALA/O
DgYAPw/ODgYAbA8JARIAeg8NBhIAmQ8NBhIAow8NBhIAvg8NBgYA7A/ZDxIAEhANBgYAJBAaEB8A
OxAAAAYARhAJAQYATBAJAQYAZxAJAQYAjBB7EBsAmRAAAKsAOxAAABIA3BDJEAYAOxHoAgYASRHo
AgYAvxEJAQYA/hEaEBYAJxIbEgYAMhLoAhoArxINBhoA1RINBhoA6RINBhoAEBMNBgYAWhMJAQYA
dRMJAQYAfxMaEBIAoRMZBhIACBT2ExIAGBTJEBIAKhT2ExIANxT2ExIAVRQNBgYAjhSCFAYApxQJ
AQYArBQaEAYAuRQaEAYAzhQJAR4AEhX8FCIAGhX8FCIAJRX8FAYAUxU0FSIAaBX8FAYAnRUaEB4A
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
HQacALQGtQOJAUASQAaJAUQXWwZxArQGIAB5AmAXHAB5Am8UeQEUALQGeQEUAGkXqgbpAHIXQgCB
ArQGIACJArQGxQaRAp0XEwDhAW8UeQGZAnMQeQGhArQGeQGRAuUXFwCJAkcUAgexAm8UeQG5ArQG
IADBArQGEQfBAncYGQfJAjARHwfJAloPKQfhAsIYMAfBAkcUNwd0ALQGeQHpACcRxgIUALQGqgYU
AFoPHgXpAOEYHAB0ADARVQf5ArQGeQFRACIZhwf5ArQGOwEBAzARjQcJA2MPHAARA6wZHAAhA7UZ
tQcsADAR1wIRAMEZuQcRAOoZvgcpA/gZuQcpAwwauQcpAycauQcxA7QGtQMRAE4axAcZA7QGtQMR
AFkaywcpA3AaIAApA30aIAApA4sauQcRAJ4aSAIRAKQaeQGkALQGtQOJAQkb7QdhALQGeQE5A7QG
xQZBAy4bDAgsALQGeQEUADARVQcRALQGeQFJA0obNghJA3MbPwhZA3wbSQhpA7QGeQFJA6sbVAhp
ALQGWgh5A7QGZwgZALQGeQGJA7QGeQEMALQGeQEhACEcewiRA3ocgQiZA5ochwihA1oPkAipA1gR
AwKhA7IceQGRA7kcFwDBAcgcHACRA+gclwixA/McnQghALQGeQEIAGgAwgEIAGwAxwEOAC0CzAEg
AHMAxwEuAGMAWAkuAFsATwkuAGsAxwEuAAsAvwguABMACQkuABsAMgkuACMAMgkuACsAMgkuADMA
CQkuADsAOAkuAEMAMglAAHMAxwFgAHMAxwGAAHMAxwGDAGsAxwGgAHMAxwGhAHMAxwHAAHMAxwHB
AHMAxwHDADsGxwHgAHMAxwHhAHMAxwEAAXMAxwEBAXMAxwEDAWMGxwEgAXMAxwEhAXMAxwFAAXMA
xwFBAXMAxwFDAXMAxwFgAXMAxwFhAXMAxwFjAXMAxwGAAXMAxwGBAXMAxwGgAXMAxwGhAXMAxwGp
AVMGbgjAAXMAxwHBAXMAxwHJAVMGbgjhAXMAxwEBAnMAxwEhAnMAxwFBAnMAxwFhAnMAxwGBAnMA
xwGhAnMAxwEBA3MAxwEgB3MAxwFAB3MAxwFgB3MAxwGAB3MAxwGgB3MAxwHAB3MAxwHgB3MAxwEA
CHMAxwEgCHMAxwFACHMAxwGACGsAxwGgCHMAxwHACHMAxwEACXMAxwEgCXMAxwGIAt8CKgN1A4AD
jAOSA+oDUgR+BJQEmwSxBN0E/wQkBX8FlAWYBWcGtQbNBt0G8wY9B1sHeweWB6IH0gcSCCAIKQhO
CGIIpggCAAEAAwAIAAUACgAGAA0ABwAPAAAApQeAAQAAsgeAAQAAvgeAAQAAygeAAQAA1QeEAQAA
6QeEAQAAAQiEAQAAkwiAAQAAnQiEAQAASgmEAQAAVAmEAQAAYgmEAQAAggmmAQAA+wmrAQAAHwq5
AQIAAQADAAEAAgADAAIAAwAFAAEABAAFAAEABgAHAAIABQAHAAIABwAJAAEACAAJAAIACQALAAEA
CgALAAIACwANAAEADAANAAEADgAPAAIADQAPAAEAQAARAAIAPwARAAIAQQATAAEAQgATAAEARgAV
AAIARQAVAAIARwAXAAEASQAZAAIASAAZAAIATAAbAAIATQAdAAEATgAdAAIATwAfANcBFAIaAioC
UQJlAnoC+gITAyEDrQMSBCYE8AT3BE4F6AUUBjcG5AcEgAAAAQAAANoUnXsAAAAAAADOAAAABAAA
AAAAAAAAAAAAAQAAAQAAAAAEAAAAAAAAAAAAAAABAAkBAAAAAAsAAAAAAAAAAAAAAAoAXwEAAAAA
BAAAAAAAAAAAAAAAAQANBgAAAAAEAAAAAAAAAAAAAAABAA8SAAAAAAQAAAAAAAAAAAAAAAEAkRIA
AAAABAAAAAAAAAAAAAAAAQDbFAAAAAAEAAAAAAAAAAAAAAABAPwUAAAAAAQAcAADAAAAAAAAAAgH
ExgAAAAACwAAAAAAAAAAAAAACgApHAAAAAAAAAAAAQAAAP0cAAAJAAgACgACAAsAAgCFANUDhwDV
A4kADgSbAEsEhwAOBPUA1QMFAeIFCQENBg0BMgYRAdUDEwHVA3sBBwgAAAAAADxNb2R1bGU+AFNU
XzA2MGFjZTUzNDZjNDRjZGFhMDMzNTYxMjdjMTUwYTE4LmRsbABTY3JpcHRIZWxwZXIARFdSZWZl
cmVuY2VIZWxwZXIAUHJvY2Vzc0luZm9ybWF0aW9uAFNxbEJ1bGtDb3B5RXh0ZW5zaW9uAE1hcHBp
bmcAUmVzb3VyY2VzAFNUXzA2MGFjZTUzNDZjNDRjZGFhMDMzNTYxMjdjMTUwYTE4LlByb3BlcnRp
ZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF8wNjBhY2U1MzQ2YzQ0Y2RhYTAzMzU2MTI3YzE1MGEx
OABTY3JpcHRSZXN1bHRzAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkRpYWdub3N0aWNz
AFByb2Nlc3MAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWlj
cm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tz
LlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AZ2V0X1Jvd3NJbnNl
cnRlZABzZXRfUm93c0luc2VydGVkAGdldF9Sb3dzRGVsZXRlZABzZXRfUm93c0RlbGV0ZWQAZ2V0
X1Jvd3NVcGRhdGVkAHNldF9Sb3dzVXBkYXRlZABnZXRfUm93c1N0YWdlZABzZXRfUm93c1N0YWdl
ZABnZXRfU3VpdGVGb2xkZXJMb2NhdGlvbgBzZXRfU3VpdGVGb2xkZXJMb2NhdGlvbgBnZXRfdW5Q
cm9jZXNzZWRGaWxlRnVsbE5hbWUAc2V0X3VuUHJvY2Vzc2VkRmlsZUZ1bGxOYW1lAGdldF9JblBy
b2Nlc3NlZEZpbGVGdWxsTmFtZQBzZXRfSW5Qcm9jZXNzZWRGaWxlRnVsbE5hbWUAU3lzdGVtLkNv
bGxlY3Rpb25zLkdlbmVyaWMARGljdGlvbmFyeWAyAFByb2Nlc3NDb250cm9sAFNTSVNQYWNrYWdl
c0NvdW50AExpc3RgMQBPUkFDTEUAU1FMAE1haW5TdGFnaW5nTWFuYWdlclByb2Nlc3NGaWxlcwBN
YWluU3RhZ2luZ0V4ZWN1dGlvblNxbEJ1bGtVcGxvYWQATWFpblN0YWdpbmdFeGVjdXRpb25GaWxl
QnVsa1VwbG9hZABHZXRQYWNrYWdlTmFtZQBHZXRTdWl0ZUZvbGRlckxvY2F0aW9uAENyZWF0ZVN0
YWdpbmdFeGVjdXRpb25Db21tYW5kAFN0YXJ0TWFuYWdlclBhY2thZ2VTdGFnaW5nAEdldFRpbWVT
dGFtcABHZXRGaWxlcwBHZXRTdGFnaW5nQ29udHJvbElEcwBTb3J0ZWRMaXN0YDIARGF0ZVRpbWUA
R2V0T3JkZXJGaWxlcwBSb3dDb3VudFN0YWdlZABNZXJnZURhdGEAR2V0U3RhZ2luZ0pvYklEAENs
ZWFuVXBGaWxlcwBQZXJmb3JtU1FMQnVsa0NvcHkAUGVyZm9ybUZpbGVCdWxrQ29weQBQcm9jZXNz
RmlsZQBDcmVhdGVTaGVtYUluaUZpbGUAbW92ZUZpbGVUb0luUHJvY2VzcwBnZXRGYWlsZWREaXIA
TW92ZVRvVW5Qcm9jZXNzZWRUb0ZhaWxlZERpcgBHZXROZXh0UnVuRGF0ZVRpbWVTdGFnaW5nQ29u
dHJvbElEAENoZWNrRmlsZUhlYWRlcnNBbmRDb2x1bW5zAFJlYWRGaWxlSGVhZGVyAFN0YWdpbmdM
b2dNZXNzYWdlAE1haW5FeHRyYWN0TWFuYWdlckJ1bGtVcGxvYWQARXh0cmFjdExvZ01lc3NhZ2UA
U3RhcnRNYW5hZ2VyUGFja2FnZUV4dHJhY3QAU3RhcnRNYW5hZ2VyUGFja2FnZURlbGl2ZXJ5AFN0
YXJ0TWFuYWdlclBhY2thZ2VTdW1tYXJ5AFNwbGl0TWFwcGluZ3MAY2hlY2tDb25uZWN0aW9uAFN5
c3RlbS5EYXRhAFN5c3RlbS5EYXRhLlNxbENsaWVudABTcWxCdWxrQ29weQBCdWxrQ29weU1hcHBp
bmcAR2V0RHRleGVjTG9jYXRpb24AU3RhcnRTU0lTUGFja2FnZQBFdmVudEFyZ3MAcF9FeGl0ZWQA
R2VuZXJhdGVMaXN0VG9TdHJpbmcARGF0YVNldABHZXREYXRhAFRydW5jYXRlVGFibGUALmN0b3IA
PFJvd3NJbnNlcnRlZD5rX19CYWNraW5nRmllbGQAPFJvd3NEZWxldGVkPmtfX0JhY2tpbmdGaWVs
ZAA8Um93c1VwZGF0ZWQ+a19fQmFja2luZ0ZpZWxkADxSb3dzU3RhZ2VkPmtfX0JhY2tpbmdGaWVs
ZAA8U3VpdGVGb2xkZXJMb2NhdGlvbj5rX19CYWNraW5nRmllbGQAPHVuUHJvY2Vzc2VkRmlsZUZ1
bGxOYW1lPmtfX0JhY2tpbmdGaWVsZAA8SW5Qcm9jZXNzZWRGaWxlRnVsbE5hbWU+a19fQmFja2lu
Z0ZpZWxkAFJvd3NJbnNlcnRlZABSb3dzRGVsZXRlZABSb3dzVXBkYXRlZABSb3dzU3RhZ2VkAFN1
aXRlRm9sZGVyTG9jYXRpb24AdW5Qcm9jZXNzZWRGaWxlRnVsbE5hbWUASW5Qcm9jZXNzZWRGaWxl
RnVsbE5hbWUAZ2V0X0NvbnRyb2xJRABzZXRfQ29udHJvbElEAGdldF9PdXRwdXRNZXNzYWdlAHNl
dF9PdXRwdXRNZXNzYWdlADxDb250cm9sSUQ+a19fQmFja2luZ0ZpZWxkADxPdXRwdXRNZXNzYWdl
PmtfX0JhY2tpbmdGaWVsZABDb250cm9sSUQAT3V0cHV0TWVzc2FnZQBSb3dzQ29waWVkQ291bnQA
Z2V0X1NvdXJjZU1hcABzZXRfU291cmNlTWFwAGdldF9PbGVkU291cmNlTWFwAGdldF9EZXN0aW5h
dGlvbk1hcABzZXRfRGVzdGluYXRpb25NYXAAPFNvdXJjZU1hcD5rX19CYWNraW5nRmllbGQAPERl
c3RpbmF0aW9uTWFwPmtfX0JhY2tpbmdGaWVsZABTb3VyY2VNYXAAT2xlZFNvdXJjZU1hcABEZXN0
aW5hdGlvbk1hcABTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBT
eXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUAZ2V0X1Jlc291
cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5j
ZQBnZXRfRGVmYXVsdABEZWZhdWx0AE1haW4AdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAdmFsdWUA
dmFsdWVzAGZpbGVGdWxsTmFtZQBmaWxlTmFtZVNlcGFyYXRvcgBGb2xkZXJCYXNlTG9jYXRpb24A
RW52aXJvbm1lbnQAU3VpdGUAU3RhZ2luZ0V4ZWN1dGlvbkxvY2F0aW9uAFNlcnZlcgBTdGFnaW5n
Q29udHJvbElEAE1hbmFnZXJHVUlEAFN0YXJ0VGltZQBDb25uU3RyX0VUTFJlZmVyZW5jZQBzZXJ2
ZXIAcGFja2FnZUxvY2F0aW9ubG9jYXRpb24Ac3VpdGVGb2xkZXJMb2NhdGlvbgBmaWxlRnVsbE5h
bWVzAHN1aXRlAFBhY2thZ2VOYW1lAGZpbGVUaW1lU3RhbXBGb3JtYXQAQ29ublN0cl9TdGFnaW5n
AFN0YWdpbmdFeHRyYWN0VGFibGUAU3RhZ2luZ0pvYklEAE1lcmdlUXVlcnkAQ29ublN0cl9Tb3Vy
Y2UAU291cmNlQ21kVGV4dABDb25uU3RyX0Rlc3RpbmF0aW9uAEJ1bGtVcGxvYWRMb2FkU2l6ZQBT
dGFnaW5nVGFibGUAU291cmNlUXVlcnlNYXBwaW5nAFNvdXJjZVR5cGVOYW1lAEZpbGVGdWxsTmFt
ZQBEZXN0aW5hdGlvblRhYmxlAE1hcHBpbmdzAEhhc0hlYWRlcgBEZWxpbWl0ZXJDaGFyAEVycm9y
TWVzc2FnZQBmaWxlbmFtZQBEZWxpbWV0ZXIAZGVsaW1pdGVyAFN1Y2Nlc3NGbGFnAENvbXBsZXRl
ZEZsYWcATWVzc2FnZVNvdXJjZQBNZXNzYWdlAEFjdHVhbEZpbGVOYW1lAEV4dHJhY3RTdGFydFRp
bWUARXh0cmFjdEVuZFRpbWUARXh0cmFjdEpvYklEAFJvd3NFeHRyYWN0ZWQARXh0cmFjdFBhY2th
Z2VQYXRoQW5kTmFtZQBOZXh0RXh0cmFjdFN0YXJ0VGltZQBFeHRyYWN0Q29udHJvbElEAERlc3Rp
bmF0b25UYWJsZQBDb25uU3RyAGJ1bGtDb3B5AFJ1bkFzMzJCaXQAY29tbWFuZABzZW5kZXIAZQBs
aXN0AGNvbm5uZWN0aW9uU3RyaW5nAHNxbFF1ZXJ5AFRhYmxlAGJUcnVuY2F0ZVRhYmxlAFN5c3Rl
bS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5c3RlbS5SZWZs
ZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0
ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRl
AEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3Nl
bWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1ibHlW
ZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGlsYXRp
b25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBFeHRl
bnNpb25BdHRyaWJ1dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUAZ2V0X0l0ZW0AVG9TdHJp
bmcAU3RyaW5nAENvbmNhdABEYXRhVGFibGVDb2xsZWN0aW9uAGdldF9UYWJsZXMARGF0YVRhYmxl
AERhdGFSb3dDb2xsZWN0aW9uAGdldF9Sb3dzAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAFN5
c3RlbS5Db2xsZWN0aW9ucwBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAGdldF9DdXJyZW50AERh
dGFSb3cAU3lzdGVtLklPAFBhdGgAQ29tYmluZQBnZXRfQ291bnQARW51bWVyYXRvcgBJbnQzMgBD
b252ZXJ0AFRvQm9vbGVhbgBNb3ZlTmV4dABJRGlzcG9zYWJsZQBEaXNwb3NlAFN5c3RlbS5UaHJl
YWRpbmcAVGhyZWFkAFNsZWVwAFZhbHVlQ29sbGVjdGlvbgBnZXRfVmFsdWVzAGdldF9FeGl0Q29k
ZQBUb0ludDMyAFN5c3RlbS5EYXRhLkNvbW1vbgBEYkNvbm5lY3Rpb25TdHJpbmdCdWlsZGVyAHNl
dF9Db25uZWN0aW9uU3RyaW5nAFJlbW92ZQBnZXRfQ29ubmVjdGlvblN0cmluZwBDb250YWlucwBB
ZGQAVG9DaGFyAElFbnVtZXJhdG9yYDEAS2V5VmFsdWVQYWlyYDIAZ2V0X1ZhbHVlAEdldEZpbGVO
YW1lAExhc3RJbmRleE9mAFN1YnN0cmluZwBnZXRfTGVuZ3RoAEdldEZpbGVOYW1lV2l0aG91dEV4
dGVuc2lvbgA8R2V0RmlsZXM+Yl9fMABmaWxlAEZ1bmNgMgBDUyQ8PjlfX0NhY2hlZEFub255bW91
c01ldGhvZERlbGVnYXRlMQBUb0xvd2VyAEVuZHNXaXRoAERpcmVjdG9yeQBFeGlzdHMAU3lzdGVt
LkNvcmUAU3lzdGVtLkxpbnEARW51bWVyYWJsZQBJRW51bWVyYWJsZWAxAFdoZXJlAFRvTGlzdAA8
R2V0U3RhZ2luZ0NvbnRyb2xJRHM+Yl9fMgByAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9k
RGVsZWdhdGUzAFN5c3RlbS5EYXRhLkRhdGFTZXRFeHRlbnNpb25zAERhdGFSb3dFeHRlbnNpb25z
AEZpZWxkAElzTnVsbE9yRW1wdHkARGF0YVRhYmxlRXh0ZW5zaW9ucwBFbnVtZXJhYmxlUm93Q29s
bGVjdGlvbmAxAEFzRW51bWVyYWJsZQBFbnVtZXJhYmxlUm93Q29sbGVjdGlvbkV4dGVuc2lvbnMA
U2VsZWN0AG9wX0VxdWFsaXR5AGdldF9JbnZhcmlhbnRDdWx0dXJlAElGb3JtYXRQcm92aWRlcgBQ
YXJzZUV4YWN0AEV4Y2VwdGlvbgBGaWxlAERlbGV0ZQBNb3ZlAEdldERpcmVjdG9yeU5hbWUAU3Fs
QnVsa0NvcHlPcHRpb25zAHNldF9CYXRjaFNpemUAc2V0X0J1bGtDb3B5VGltZW91dABzZXRfRGVz
dGluYXRpb25UYWJsZU5hbWUARm9ybWF0AFN5c3RlbS5EYXRhLk9sZURiAE9sZURiQ29ubmVjdGlv
bgBEYkNvbm5lY3Rpb24AT3BlbgBPbGVEYkNvbW1hbmQAT2xlRGJEYXRhUmVhZGVyAEV4ZWN1dGVS
ZWFkZXIASURhdGFSZWFkZXIAV3JpdGVUb1NlcnZlcgBDbG9zZQBHZXRFeHRlbnNpb24AU3lzdGVt
LlRleHQAU3RyaW5nQnVpbGRlcgBBcHBlbmRMaW5lAENoYXIAU3RyZWFtV3JpdGVyAFRleHRXcml0
ZXIAV3JpdGVMaW5lAEd1aWQATmV3R3VpZABTeXN0ZW0uSU8uQ29tcHJlc3Npb24uRmlsZVN5c3Rl
bQBTeXN0ZW0uSU8uQ29tcHJlc3Npb24AWmlwRmlsZQBaaXBBcmNoaXZlAFppcEFyY2hpdmVNb2Rl
AFN5c3RlbS5Db2xsZWN0aW9ucy5PYmplY3RNb2RlbABSZWFkT25seUNvbGxlY3Rpb25gMQBaaXBB
cmNoaXZlRW50cnkAZ2V0X0VudHJpZXMAZ2V0X0Z1bGxOYW1lAFNwbGl0AENvdW50AERpcmVjdG9y
eUluZm8AQ3JlYXRlRGlyZWN0b3J5AFppcEZpbGVFeHRlbnNpb25zAEV4dHJhY3RUb0RpcmVjdG9y
eQBQYWRMZWZ0ADxHZXROZXh0UnVuRGF0ZVRpbWVTdGFnaW5nQ29udHJvbElEPmJfXzQAQ1MkPD45
X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTUAPD5jX19EaXNwbGF5Q2xhc3NiADxDaGVj
a0ZpbGVIZWFkZXJzQW5kQ29sdW1ucz5iX184AHQAaQA8PmNfX0Rpc3BsYXlDbGFzc2UAQ1MkPD44
X19sb2NhbHNjAGhlYWRlcgA8Q2hlY2tGaWxlSGVhZGVyc0FuZENvbHVtbnM+Yl9fNwBmADxDaGVj
a0ZpbGVIZWFkZXJzQW5kQ29sdW1ucz5iX182AHJvdwBDUyQ8PjlfX0NhY2hlZEFub255bW91c01l
dGhvZERlbGVnYXRlOQBvcF9JbmVxdWFsaXR5AEVtcHR5AElFbnVtZXJhYmxlAENhc3QARmlyc3RP
ckRlZmF1bHQARnVuY2AzAEFueQBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBSZWFkTGluZQBBZGRS
YW5nZQBSZXBsYWNlAFNxbENvbm5lY3Rpb24AU3FsQ29tbWFuZABEYkNvbW1hbmQARXhlY3V0ZU5v
blF1ZXJ5AFN5c3RlbS5Db21wb25lbnRNb2RlbABDb21wb25lbnQATm90SW1wbGVtZW50ZWRFeGNl
cHRpb24Ac2V0X0NvbW1hbmRUaW1lb3V0AFNxbERhdGFSZWFkZXIARGJEYXRhUmVhZGVyAE9yYWNs
ZS5EYXRhQWNjZXNzAE9yYWNsZS5EYXRhQWNjZXNzLkNsaWVudABPcmFjbGVDb25uZWN0aW9uAE9y
YWNsZUNvbW1hbmQAT3JhY2xlUGFyYW1ldGVyQ29sbGVjdGlvbgBnZXRfUGFyYW1ldGVycwBPcmFj
bGVQYXJhbWV0ZXIAT3JhY2xlRGJUeXBlAERiUGFyYW1ldGVyAFBhcmFtZXRlckRpcmVjdGlvbgBz
ZXRfRGlyZWN0aW9uAE9yYWNsZURhdGFSZWFkZXIAVHJpbQBTcWxCdWxrQ29weUNvbHVtbk1hcHBp
bmcAU3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nQ29sbGVjdGlvbgBnZXRfQ29sdW1uTWFwcGluZ3MA
Qm9vbGVhbgBEYXRhUmVjZWl2ZWRFdmVudEFyZ3MAPFN0YXJ0U1NJU1BhY2thZ2U+Yl9fMTIARGF0
YVJlY2VpdmVkRXZlbnRIYW5kbGVyAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdh
dGUxMwBnZXRfRGF0YQBnZXRfTmV3TGluZQBzZXRfRW5hYmxlUmFpc2luZ0V2ZW50cwBQcm9jZXNz
U3RhcnRJbmZvAGdldF9TdGFydEluZm8Ac2V0X1VzZVNoZWxsRXhlY3V0ZQBzZXRfUmVkaXJlY3RT
dGFuZGFyZE91dHB1dABzZXRfUmVkaXJlY3RTdGFuZGFyZEVycm9yAEV2ZW50SGFuZGxlcgBhZGRf
RXhpdGVkAGFkZF9PdXRwdXREYXRhUmVjZWl2ZWQAc2V0X0ZpbGVOYW1lAHNldF9Bcmd1bWVudHMA
c2V0X0NyZWF0ZU5vV2luZG93AFN0YXJ0AEJlZ2luT3V0cHV0UmVhZExpbmUAPEdlbmVyYXRlTGlz
dFRvU3RyaW5nPmJfXzE0AGN1cnJlbnQAaXRlbQBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhv
ZERlbGVnYXRlMTUAQWdncmVnYXRlAFNxbERhdGFBZGFwdGVyAERhdGFBZGFwdGVyAEZpbGwAVHlw
ZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWVsZEluZm8AQmluZGluZ0Zs
YWdzAEdldEZpZWxkAEdldFZhbHVlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAQXNzZW1i
bHkAZ2V0X0Fzc2VtYmx5AEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVT
dGF0ZQAuY2N0b3IAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAFNjcmlwdE9iamVj
dE1vZGVsAGdldF9EdHMATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFyaWFibGVEaXNwZW5zZXIAZ2V0X1ZhcmlhYmxlRGlzcGVu
c2VyAFZhcmlhYmxlcwBMb2NrT25lRm9yUmVhZABWYXJpYWJsZQBVbmxvY2sAc2V0X1Rhc2tSZXN1
bHQAZ2V0X01lc3NhZ2UARXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAEZpcmVFcnJvcgBT
VF8wNjBhY2U1MzQ2YzQ0Y2RhYTAzMzU2MTI3YzE1MGExOC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5y
ZXNvdXJjZXMAAAtTAHUAaQB0AGUAADFTAHQAYQBnAGkAbgBnAEUAeABlAGMAdQB0AGkAbwBuAEwA
bwBjAGEAdABpAG8AbgAADVMAZQByAHYAZQByAAAjRgBpAGwAZQBOAGEAbQBlAFMAZQBwAGEAcgBh
AHQAbwByAAApQwBvAG4AbgBTAHQAcgBfAEUAVABMAFIAZQBmAGUAcgBlAG4AYwBlAAArRQB4AGUA
YwB1AHQAaQBvAG4ASQBuAHMAdABhAG4AYwBlAEcAVQBJAEQAABNTAHQAYQByAHQAVABpAG0AZQAA
cVsAZABiAG8AXQAuAFsAcwBwAEcAZQB0AFMAdABhAGcAaQBuAGcATQBhAG4AYQBnAGUAcgBGAG8A
bABkAGUAcgBMAG8AYwBhAHQAaQBvAG4AXQAgAEAAUwB1AGkAdABlAE4AYQBtAGUAIAA9ACAAJwAB
AycAARVCAGEAcwBlAEYAbwBsAGQAZQByAAAXRQBuAHYAaQByAG8AbgBtAGUAbgB0AAATUwB1AGkA
dABlAE4AYQBtAGUAAA1GAG8AbABkAGUAcgAAf1MARQBMAEUAQwBUACAAUgB1AG4AQQBzADMAMgBC
AGkAdAAgAEYAUgBPAE0AIABTAHQAYQBnAGkAbgBnAEMAbwBuAHQAcgBvAGwAIABXAEgARQBSAEUA
IABTAHQAYQBnAGkAbgBnAEMAbwBuAHQAcgBvAGwASQBEACAAPQAgAAAVUgB1AG4AQQBzADMAMgBC
AGkAdAAAZUwAbwBnACAATQBhAG4AYQBnAGUAcgAgAFMAdABhAHIAdABpAG4AZwAgAFMAdABhAGcA
aQBuAGcARQB4AGUAYwB1AHQAaQBvAG4AIABGAGkAbABlACAARQB4AHQAcgBhAGMAdAAAAyAAAAEA
Z0wAbwBnACAATQBhAG4AYQBnAGUAcgAgAFMAdABhAHIAdABpAG4AZwAgAFMAdABhAGcAaQBuAGcA
RQB4AGUAYwB1AHQAaQBvAG4AIABEAGEAdABhACAARQB4AHQAcgBhAGMAdABzAABjTABvAGcAIABN
AGEAbgBhAGcAZQByACAARQByAHIAbwByACAATABvAGcAIABmAG8AcgAgAFMAdABhAGcAaQBuAGcA
RQB4AGUAYwB1AHQAaQBvAG4ARAB5AG4AYQBtAGkAYwAAKUwAbwBnACAATQBhAG4AYQBnAGUAcgAg
AEMAbwBtAHAAbABlAHQAZQAAH0MAbwBuAG4AUwB0AHIAXwBTAHQAYQBnAGkAbgBnAAAdQwBvAG4A
bgBTAHQAcgBfAFMAbwB1AHIAYwBlAAAZUwB0AGEAZwBpAG4AZwBKAG8AYgBJAEQAABtTAG8AdQBy
AGMAZQBDAG0AZABUAGUAeAB0AAAhRQB4AHQAcgBhAGMAdABTAHQAYQByAHQAVABpAG0AZQAAHUUA
eAB0AHIAYQBjAHQARQBuAGQAVABpAG0AZQAAIVMAdABhAGcAaQBuAGcAQwBvAG4AdAByAG8AbABJ
AEQAABdNAGEAbgBhAGcAZQByAEcAVQBJAEQAACVCAHUAbABrAFUAcABsAG8AYQBkAEwAbwBhAGQA
UwBpAHoAZQAAGVMAdABhAGcAaQBuAGcAVABhAGIAbABlAAAlUwBvAHUAcgBjAGUAUQB1AGUAcgB5
AE0AYQBwAHAAaQBuAGcAAClUAHIAdQBuAGMAYQB0AGUAUwB0AGEAZwBpAG4AZwBUAGEAYgBsAGUA
AB1TAG8AdQByAGMAZQBUAHkAcABlAE4AYQBtAGUAAAtPAEwARQBEAEIAABFQAHIAbwB2AGkAZABl
AHIAACU7AEMAbwBuAG4AZQBjAHQAIABUAGkAbQBlAG8AdQB0AD0AMAAAZ0wAbwBnACAAUwB0AGEA
ZwBpAG4AZwBFAHgAZQBjAHUAdABpAG8AbgAgAEIAdQBsAGsAUwBRAEwAIABlAHYAYQBsAHUAYQB0
AGUAZAAgAFMAbwB1AHIAYwBlACAAUQB1AGUAcgB5AAAVcgBvAHcAcwBDAG8AcABpAGUAZAAAJVMA
dABhAGcAaQBuAGcAUABhAGMAawBhAGcAZQBOAGEAbQBlAAAbRABlAGwAaQBtAGkAdABlAHIAQwBo
AGEAcgAAJUYAbwBsAGQAZQByAEIAYQBzAGUATABvAGMAYQB0AGkAbwBuAAAVTQBlAHIAZwBlAFEA
dQBlAHIAeQAAE0gAYQBzAEgAZQBhAGQAZQByAAAnRgBpAGwAZQBUAGkAbQBlAFMAdABhAG0AcABG
AG8AcgBtAGEAdAAAF1UAbgBwAHIAbwBjAGUAcwBzAGUAZAAAV0wAbwBnACAAUwB0AGEAZwBpAG4A
ZwBFAHgAZQBjAHUAdABpAG8AbgAgAFMAdABhAHIAdABpAG4AZwAgAGYAaQBsAGUAIABwAHIAbwBj
AGUAcwBzAC4AAF9MAG8AZwAgAFMAdABhAGcAaQBuAGcARQB4AGUAYwB1AHQAaQBvAG4AIABDAG8A
bQBwAGwAZQB0AGUAZAAgAGYAaQBsAGUAcwAgAHAAcgBvAGMAZQBzAHMAZQBkAC4AAF1MAG8AZwAg
AFMAdABhAGcAaQBuAGcARQB4AGUAYwB1AHQAaQBvAG4AIABDAG8AbQBwAGwAZQB0AGUAZAAgAG4A
bwAgAGYAaQBsAGUAcwAgAGYAbwB1AG4AZAAuAAANLwBTAFEATAAgACIAABciACAALwBTAEUAUgBW
AEUAUgAgACIAAIC7IgAgAC8ATQBBAFgAQwBPAE4AQwBVAFIAUgBFAE4AVAAgACIAIAAtADEAIAAi
ACAALwBDAEgARQBDAEsAUABPAEkATgBUAEkATgBHACAATwBGAEYAIAAvAFMARQBUACAAIgBcAFAA
YQBjAGsAYQBnAGUALgBWAGEAcgBpAGEAYgBsAGUAcwBbAFMAdABhAGcAaQBuAGcAQwBvAG4AdABy
AG8AbABJAEQAXQAuAFYAYQBsAHUAZQAiADsAAV8gAC8AUwBFAFQAIAAiAFwAUABhAGMAawBhAGcA
ZQAuAFYAYQByAGkAYQBiAGwAZQBzAFsATQBhAG4AYQBnAGUAcgBHAFUASQBEAF0ALgBWAGEAbAB1
AGUAIgA7ACIAAGkiACAALwBTAEUAVAAgACIAXABQAGEAYwBrAGEAZwBlAC4AVgBhAHIAaQBhAGIA
bABlAHMAWwBVAHMAZQByADoAOgBTAHQAYQByAHQAVABpAG0AZQBdAC4AVgBhAGwAdQBlACIAOwAi
AAB3IgAgAC8AUwBFAFQAIAAiAFwAUABhAGMAawBhAGcAZQAuAFYAYQByAGkAYQBiAGwAZQBzAFsA
QwBvAG4AbgBTAHQAcgBfAEUAVABMAFIAZQBmAGUAcgBlAG4AYwBlAF0ALgBWAGEAbAB1AGUAIgA7
ACIAXAAiAAAHXAAiACIAAICdIgAgAC8AQwBIAEUAQwBLAFAATwBJAE4AVABJAE4ARwAgAE8ARgBG
ACAALwBTAEUAVAAgACIAXABQAGEAYwBrAGEAZwBlAC4AVgBhAHIAaQBhAGIAbABlAHMAWwBDAG8A
bgBuAFMAdAByAF8ARQBUAEwAUgBlAGYAZQByAGUAbgBjAGUAXQAuAFYAYQBsAHUAZQAiADsAIgBc
ACIAACFcACIAIgAgAC8AUgBFAFAATwBSAFQASQBOAEcAIABFAAAHYwBzAHYAAAd6AGkAcAAAB3QA
eAB0AAAHKgAuACoAAAUsACAAAAUnACcAAV1FAFgARQBDACAAZABiAG8ALgBzAHAARwBlAHQAUwB0
AGEAZwBpAG4AZwBQAGEAYwBrAGEAZwBlAHMARgBpAGwAZQAgAEAAUwB1AGkAdABlAE4AYQBtAGUA
PQAnAAEdJwAsACAAQABQAGEAYwBrAGEAZwBlAHMAPQAnAAEFJwAgAAFLUwBFAEwARQBDAFQAIABD
AE8AVQBOAFQAKAAqACkAIABBAFMAIAAnAFIAbwB3AHMAUwB0AGEAZwBlAGQAJwAgAEYAUgBPAE0A
IAABLSAAVwBIAEUAUgBFACAAUwB0AGEAZwBpAG4AZwBKAG8AYgBJAEQAIAA9ACAAABVSAG8AdwBz
AFMAdABhAGcAZQBkAABXUgBvAHcAQwBvAHUAbgB0AFMAdABhAGcAZQBkACAALQAgAEYAYQBpAGwA
ZQBkACAAdABvACAAcgBlAHQAdQByAG4AIAByAG8AdwAgAGMAbwB1AG4AdAABC0UAWABFAEMAIAAA
IyAAQABTAHQAYQBnAGkAbgBnAEoAbwBiAEkARAAgAD0AIAAAGVIAbwB3AHMASQBuAHMAZQByAHQA
ZQBkAAAXUgBvAHcAcwBEAGUAbABlAHQAZQBkAAAXUgBvAHcAcwBVAHAAZABhAHQAZQBkAABxTQBl
AHIAZwBlAEQAYQB0AGEAIABzAHQAbwByAGUAZAAgAHAAcgBvAGMAIABmAGEAaQBsAGUAZAAgAHQA
bwAgAHIAZQB0AHUAcgBuACAAcgBvAHcAIABjAG8AdQBuAHQAIABkAGUAdABhAGkAbABzAABVRQBY
AEUAQwAgAGQAYgBvAC4AcwBwAEcAZQB0AEoAbwBiAEkARAAgAEAAVAB5AHAAZQAgAD0AIAAnAFMA
dABhAGcAaQBuAGcASgBvAGIASQBEACcAAQtKAG8AYgBJAEQAAF9HAGUAdABTAHQAYQBnAGkAbgBn
AEoAbwBiAEkARAAgAGYAYQBpAGwAZQBkACAAdABvACAAcgBlAHQAdQByAG4AIABhACAAUwB0AGEA
ZwBpAG4AZwBKAG8AYgBJAEQAAIDFUAByAG8AdgBpAGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQA
LgBKAGUAdAAuAE8AbABlAEQAYgAuADQALgAwADsAIABEAGEAdABhACAAUwBvAHUAcgBjAGUAPQB7
ADAAfQA7AEUAeAB0AGUAbgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAiAFQAZQB4AHQA
OwBIAEQAUgA9AFkARQBTADsARgBNAFQAPQBEAGUAbABpAG0AaQB0AGUAZAAiAAAPUwBFAEwARQBD
AFQAIAAAMyAAQQBTACAAWwBTAHQAYQBnAGkAbgBnAEoAbwBiAEkARABdACAARgBSAE8ATQAgAFsA
AANdAAATUAByAG8AYwBlAHMAcwBlAGQAAAkuAHoAaQBwAAADWwAAJUMAbwBsAE4AYQBtAGUASABl
AGEAZABlAHIAPQBUAHIAdQBlAAAnQwBvAGwATgBhAG0AZQBIAGUAYQBkAGUAcgA9AEYAYQBsAHMA
ZQAAJ0YAbwByAG0AYQB0AD0AQwBTAFYARABlAGwAaQBtAGkAdABlAGQAACdGAG8AcgBtAGEAdAA9
AFQAYQBiAEQAZQBsAGkAbQBpAHQAZQBkAAAjRgBvAHIAbQBhAHQAPQBEAGUAbABpAG0AaQB0AGUA
ZAAoAAADKQAAB2MAbwBsAAADPQAACyAAVABlAHgAdAAAFVMAYwBoAGUAbQBhAC4AaQBuAGkAABNJ
AG4AUAByAG8AYwBlAHMAcwAAQ1oAaQBwACAAZgBpAGwAZQAgAGgAYQBzACAAbQBvAHIAZQAgAHQA
aABhAG4AIABvAG4AZQAgAGYAaQBsAGUAOgAgAAB5ZgBpAGwAZQAgAGgAYQBzACAAdABvACAAbQBh
AG4AeQAgAGYAdQBsAGwAcwB0AG8AcABzACAAaQBuACAAdABoAGUAIABuAGEAbQBlACAAZQB4AHAA
ZQBjAHQAZQBkACAAZgBvAHIAbQBhAHQAIAAqAC4AKgA6ACAAAANfAAA/VQBuAHoAaQBwAHAAZQBk
ACAAZgBpAGwAZQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAZgBvAHUAbgBkADoAIAAADUYAYQBpAGwA
ZQBkAABDWwBkAGIAbwBdAC4AWwBzAHAARwBlAHQAUwB0AGEAZwBpAG4AZwBQAGEAYwBrAGEAZwBl
AHMAUwBxAGwAXQAgACcAAYC5UwBFAEwARQBDAFQAIABjAC4AQwBPAEwAVQBNAE4AXwBOAEEATQBF
ACAAQQBTACAAYwBvAGwAdQBtAG4AXwBuAGEAbQBlACAARgBSAE8ATQAgAEkATgBGAE8AUgBNAEEA
VABJAE8ATgBfAFMAQwBIAEUATQBBAC4AQwBPAEwAVQBNAE4AUwAgAGMAIABXAEgARQBSAEUAIABj
AC4AVABBAEIATABFAF8ATgBBAE0ARQAgAD0AIAAnAAEtIABBAE4ARAAgACAAYwAuAFQAQQBCAEwA
RQBfAFMAQwBIAEUATQBBAD0AJwABbUYAaQBsAGUAIABoAGUAYQBkAGUAcgAgAGYAaQBlAGwAZAAg
AGkAcwAgAG4AbwB0ACAAZQB4AGkAcwB0AGUAZAAuACAARgBpAGwAZQAgAGgAZQBhAGQAZQByACAA
ZgBpAGUAbABkAHMAOgAgAABVIABkAG8AZQBzAG4AJwB0ACAAZQB4AGkAcwB0AGUAZAAgAGkAbgAg
AHMAbwB1AHIAYwBlACAAcQB1AGUAcgB5ACAAbQBhAHAAcABpAG4AZwA6ACAAARsuACAARgBpAGwA
ZQAgAG4AYQBtAGUAOgAgAAAjLAAgAFMAdABhAGcAaQBuAGcAIAB0AGEAYgBsAGUAOgAgAABPUwBv
AHUAcgBjAGUAcQB1AGUAcgB5AG0AYQBwAGkAbgBnACAAaQBzACAAdQBuAHYAYQBsAGkAZAAuACAA
TQBhAHAAcABpAG4AZwA6ACAAADUgAGkAbgAgAHMAbwB1AHIAYwBlACAAcQB1AGUAcgB5ACAAbQBh
AHAAcABpAG4AZwA6ACAAADkgAGQAbwBlAHMAIABuAG8AdAAgAGUAeABpAHMAdABlAGQAIABpAG4A
IAB0AGEAYgBsAGUAOgAgAABhVwByAG8AbgBnACAAaABlAGEAZABlAHIAIABvAHIAZABlAHIALgAg
AEYAaQBsAGUAIABoAGUAYQBkAGUAcgAgAGYAaQBlAGwAZABzACAAaQBuACAAZgBpAGwAZQA6ACAA
ABkgAGgAYQBzACAAbwByAGQAZQByADoAIAAAUyAAaQBzACAAbgBvAHQAIABtAGEAdABjAGgAZQBk
ACAAdABvACAAcwBvAHUAcgBjAGUAIABxAHUAZQByAHkAIABtAGEAcABwAGkAbgBnADoAIAAAXVsA
cwBwAEkAbgBzAGUAcgB0AFMAdABhAGcAaQBuAGcARQB4AGUAYwB1AHQAaQBvAG4ATABvAGcAXQAg
AEAAUwB0AGEAZwBpAG4AZwBKAG8AYgBJAEQAIAA9ACAAACUsACAAQABNAGEAbgBhAGcAZQByAEcA
VQBJAEQAIAA9ACAAJwABJScALAAgAEAAUwB1AGMAYwBlAHMAcwBGAGwAYQBnACAAPQAgAAEnLAAg
AEAAQwBvAG0AcABsAGUAdABlAGQARgBsAGEAZwAgAD0AIAAAKSwAIABAAE0AZQBzAHMAYQBnAGUA
UwBvAHUAcgBjAGUAIAA9ACAAJwABHycALAAgAEAATQBlAHMAcwBhAGcAZQAgAD0AIAAnAAEjJwAs
ACAAQABSAG8AdwBzAFMAdABhAGcAZQBkACAAPQAgAAElLAAgAEAAUgBvAHcAcwBJAG4AcwBlAHIA
dABlAGQAIAA9ACAAACMsACAAQABSAG8AdwBzAEQAZQBsAGUAdABlAGQAIAA9ACAAACMsACAAQABS
AG8AdwBzAFUAcABkAGEAdABlAGQAIAA9ACAAAHEsACAAQABTAHQAYQBnAGkAbgBnAFAAYQBjAGsA
YQBnAGUAUABhAHQAaABBAG4AZABOAGEAbQBlACAAPQAgAE4AVQBMAEwALAAgAEAAQQBjAHQAdQBh
AGwARgBpAGwAZQBOAGEAbQBlACAAPQAgACcAASMnACwAIABAAFMAdABhAHIAdABUAGkAbQBlACAA
PQAgACcAAQcnACwAIAABNUAARQB4AHQAcgBhAGMAdABTAHQAYQByAHQAVABpAG0AZQAgAD0AIABO
AFUATABMACwAIAAAK0AARQB4AHQAcgBhAGMAdABTAHQAYQByAHQAVABpAG0AZQAgAD0AIAAnAAEx
QABFAHgAdAByAGEAYwB0AEUAbgBkAFQAaQBtAGUAIAA9ACAATgBVAEwATAAsACAAACdAAEUAeAB0
AHIAYQBjAHQARQBuAGQAVABpAG0AZQAgAD0AIAAnAAEpQABTAHQAYQBnAGkAbgBnAEMAbwBuAHQA
cgBvAGwASQBEACAAPQAgAAAnQwBvAG4AbgBTAHQAcgBfAEQAZQBzAHQAaQBuAGEAdABpAG8AbgAA
K2IAVAByAHUAbgBjAGEAdABlAEUAeAB0AHIAYQBjAHQAVABhAGIAbABlAAAZRQB4AHQAcgBhAGMA
dABUAGEAYgBsAGUAABlFAHgAdAByAGEAYwB0AEoAbwBiAEkARAAAIUUAeAB0AHIAYQBjAHQAQwBv
AG4AdAByAG8AbABJAEQAAD9MAG8AZwAgAEUAeAB0AHIAYQBjAHQARQB4AGUAYwB1AHQAaQBvAG4A
LgBCAHUAbABrAFUAcABsAG8AYQBkAAAJTgBVAEwATAAAXVsAcwBwAEkAbgBzAGUAcgB0AEUAeAB0
AHIAYQBjAHQARQB4AGUAYwB1AHQAaQBvAG4ATABvAGcAXQAgAEAARQB4AHQAcgBhAGMAdABKAG8A
YgBJAEQAIAA9ACAAAB8sACAAQABTAHQAYQByAHQAVABpAG0AZQAgAD0AIAAAIywAQABNAGEAbgBh
AGcAZQByAEcAVQBJAEQAIAA9ACAAJwABKScALAAgAEAAUgBvAHcAcwBFAHgAdAByAGEAYwB0AGUA
ZAAgAD0AIAABLSwAIABAAEUAeAB0AHIAYQBjAHQAUwB0AGEAcgB0AFQAaQBtAGUAIAA9ACAAACks
ACAAQABFAHgAdAByAGEAYwB0AEUAbgBkAFQAaQBtAGUAIAA9ACAAADUsACAAQABOAGUAeAB0AEUA
eAB0AHIAYQBjAHQAUwB0AGEAcgB0AFQAaQBtAGUAIAA9ACAAAEEsACAAQABFAHgAdAByAGEAYwB0
AFAAYQBjAGsAYQBnAGUAUABhAHQAaABBAG4AZABOAGEAbQBlACAAPQAgACcAAS8nACwAIABAAEUA
eAB0AHIAYQBjAHQAQwBvAG4AdAByAG8AbABJAEQAIAA9ACAAAQdjAHUAcgAAAzsAAH9CAHUAbABr
ACAAYwBvAHAAeQAgAFMAbwB1AHIAYwBlAFEAdQBlAHIAeQBNAGEAcABwAGkAbgBnACAAaABhAHMA
IABhAG4AIABpAG4AdgBhAGwAaQBkACAAcABhAGkAcgAgACgAZQBtAHAAdAB5ACAAcwB0AHIAaQBu
AGcAKQAAgJNCAHUAbABrACAAYwBvAHAAeQAgAFMAbwB1AHIAYwBlAFEAdQBlAHIAeQBNAGEAcABw
AGkAbgBnACAAaABhAHMAIABhAG4AIABpAG4AdgBhAGwAaQBkACAAcABhAGkAcgAgACgAYwBvAHUA
bgB0ACAAZABvAGUAcwAgAG4AbwB0ACAAbQBhAHQAYwBoACkAOgAgAABNRQBYAEUAQwAgAHMAcABH
AGUAdABEAHQAZQB4AGUAYwBMAG8AYwBhAHQAaQBvAG4AIABAAFIAdQBuAEEAcwAzADIAQgBpAHQA
PQAnAAEdTABvAGMAYQB0AGkAbwBuAEQAdABlAHgAZQBjAAADIgAAAywAAB9UAFIAVQBOAEMAQQBU
AEUAIABUAEEAQgBMAEUAIAAAGU8ATABFAEQAQgBfAE8AUgBBAEMATABFAAAXTwBEAEIAQwBfAE8A
UgBBAEMATABFAAAJTwBEAEIAQwAAE08ATABFAEQAQgBfAFMAUQBMAAARTwBEAEIAQwBfAFMAUQBM
AAAXXwByAG8AdwBzAEMAbwBwAGkAZQBkAAADLgAAcVMAVABfADAANgAwAGEAYwBlADUAMwA0ADYA
YwA0ADQAYwBkAGEAYQAwADMAMwA1ADYAMQAyADcAYwAxADUAMABhADEAOAAuAFAAcgBvAHAAZQBy
AHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAANVUAcwBlAHIAOgA6AEMAbwBuAG4AUwB0AHIA
XwBFAFQATABSAGUAZgBlAHIAZQBuAGMAZQAAI1UAcwBlAHIAOgA6AEUAbgB2AGkAcgBvAG4AbQBl
AG4AdAAAL1UAcwBlAHIAOgA6AEYAaQBsAGUATgBhAG0AZQBTAGUAcABhAHIAYQB0AG8AcgAAMVUA
cwBlAHIAOgA6AFMAdABhAGcAaQBuAGcAUABhAGMAawBhAGcAZQBOAGEAbQBlAAArVQBzAGUAcgA6
ADoAQwBvAG4AbgBTAHQAcgBfAFMAdABhAGcAaQBuAGcAADFVAHMAZQByADoAOgBTAG8AdQByAGMA
ZQBRAHUAZQByAHkATQBhAHAAcABpAG4AZwAAJ1UAcwBlAHIAOgA6AEQAZQBsAGkAbQBpAHQAZQBy
AEMAaABhAHIAABdVAHMAZQByADoAOgBTAHUAaQB0AGUAADFVAHMAZQByADoAOgBGAG8AbABkAGUA
cgBCAGEAcwBlAEwAbwBjAGEAdABpAG8AbgAAJVUAcwBlAHIAOgA6AFMAdABhAGcAaQBuAGcAVABh
AGIAbABlAAAhVQBzAGUAcgA6ADoATQBlAHIAZwBlAFEAdQBlAHIAeQAAH1UAcwBlAHIAOgA6AEgA
YQBzAEgAZQBhAGQAZQByAAAxVQBzAGUAcgA6ADoAQgB1AGwAawBVAHAAbABvAGEAZABMAG8AYQBk
AFMAaQB6AGUAAB9VAHMAZQByADoAOgBTAHQAYQByAHQAVABpAG0AZQAAM1UAcwBlAHIAOgA6AEYA
aQBsAGUAVABpAG0AZQBTAHQAYQBtAHAARgBvAHIAbQBhAHQAAC1VAHMAZQByADoAOgBTAHQAYQBn
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WMAAALADAAAAAAAAAAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQCde9oUAAABAJ172hQ/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsAQQAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAAMAAwADAA
NABiADAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMAA2
ADAAYQBjAGUANQAzADQANgBjADQANABjAGQAYQBhADAAMwAzADUANgAxADIANwBjADEANQAwAGEA
MQA4AAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADUAMwAzADgALgAz
ADEANgA0ADUAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMAA2ADAA
YQBjAGUANQAzADQANgBjADQANABjAGQAYQBhADAAMwAzADUANgAxADIANwBjADEANQAwAGEAMQA4
AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIA
aQBnAGgAdAAgAEAAIAAgADIAMAAxADMAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBUAF8AMAA2ADAAYQBjAGUANQAzADQANgBjADQANABjAGQAYQBhADAAMwAzADUA
NgAxADIANwBjADEANQAwAGEAMQA4AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfADAANgAwAGEAYwBlADUAMwA0ADYAYwA0ADQAYwBkAGEAYQAwADMAMwA1ADYA
MQAyADcAYwAxADUAMABhADEAOAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4ANQAzADMAOAAuADMAMQA2ADQANQAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANQAzADMAOAAuADMAMQA2ADQANQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAwAAABAPAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                  <Breakpoint
                    Enabled="True"
                    File="ScriptMain.cs"
                    Line="200"
                    Column="17" />
                  <Breakpoint
                    Enabled="True"
                    File="ScriptMain.cs"
                    Line="104"
                    Column="13" />
                  <Breakpoint
                    Enabled="True"
                    File="ScriptMain.cs"
                    Line="109"
                    Column="17" />
                  <Breakpoint
                    Enabled="True"
                    File="ScriptMain.cs"
                    Line="213"
                    Column="21" />
                  <Breakpoint
                    Enabled="True"
                    File="ScriptHelper.cs"
                    Line="745"
                    Column="17" />
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Bulk File Processing\Get Variable Values"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{CA192A2C-FBA6-433C-AC14-088A1E29559B}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get Variable Values"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"EXEC [dbo].[spGetStagingExecutionBulkFileVariables] " +  (DT_WSTR, 10) @[User::StagingControlID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{83D20683-E373-44B2-9C9F-5984105B3FA4}"
                  SQLTask:SqlStatementSource="EXEC [dbo].[spGetStagingExecutionBulkFileVariables] 3"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="FolderBaseLocation"
                    SQLTask:DtsVariableName="User::FolderBaseLocation" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="ConnStr_Staging"
                    SQLTask:DtsVariableName="User::ConnStr_Staging" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="FileTimeStampFormat"
                    SQLTask:DtsVariableName="User::FileTimeStampFormat" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="HasFooter"
                    SQLTask:DtsVariableName="User::HasFooter" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="HasHeader"
                    SQLTask:DtsVariableName="User::HasHeader" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="DelimiterChar"
                    SQLTask:DtsVariableName="User::DelimiterChar" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="FileNameSeparator"
                    SQLTask:DtsVariableName="User::FileNameSeparator" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Bulk File Processing.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{F9529966-A7C3-4A93-A131-133B67918BA9}"
              DTS:From="Package\Sequence Container\Bulk File Processing\Get Variable Values"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container\Bulk File Processing\File Bulk Upload" />
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Get ExtractEndTime"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{ca21f6af-eec7-44f1-8dd5-ca70bd1d9331}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get ExtractEndTime"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">"SELECT CONVERT(CHAR(23), DATEADD(DAY,1, '" + @[User::StartTime] + "'), 121)"</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{83D20683-E373-44B2-9C9F-5984105B3FA4}"
              SQLTask:SqlStatementSource="SELECT CONVERT(CHAR(23), DATEADD(DAY,1, '1900-01-01 00:00:00'), 121)"
              SQLTask:ResultType="ResultSetType_SingleRow"
              SQLTask:TypeConversionMode="None" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::ExtractEndTime" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Get Standard Variable Values"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Get Standard Variable Values. Have to do it like this due to varchar(max) issues"
          DTS:DTSID="{B75D30FE-764E-4A51-970B-CC9786F5D505}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get Standard Variable Values"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">"EXEC spGetStagingExecutionStandardVariables " +  (DT_WSTR, 10) @[User::StagingControlID]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{83D20683-E373-44B2-9C9F-5984105B3FA4}"
              SQLTask:SqlStatementSource="EXEC spGetStagingExecutionStandardVariables 3"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::StandVariablesResult" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Log Information Exection guid and build version"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Log Information Exection guid and build version"
          DTS:DTSID="{B3C594D8-A6C1-4876-97D7-2DCB4E1FF0BE}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Log Information Exection guid and build version"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="SqlStatementSource">"EXEC [dbo].[spInsertStagingExecutionLog]
@StagingJobID =-1, 
@StartTime = '" + @[User::StartTime]  + "',
@ManagerGUID ='" + @[User::ManagerGUID] + "',
@SuccessFlag =1,
@CompletedFlag =0,
@MessageSource ='Log StagingExection Started',
@Message = 'ExectionInstanceGUID:" + @[System::ExecutionInstanceGUID] + ",BuildVersion:" + (DT_STR, 20, 1252)@[System::VersionBuild]  + "', @RowsStaged = 0, @RowsInserted = 0, @RowsDeleted = 0, @RowsUpdated = 0, 
@StagingPackagePathAndName =NULL,
@ActualFileName = NULL,
 
@StagingControlID=" + (DT_WSTR, 10)@[User::StagingControlID] + ", @ExtractStartTime = NULL, @ExtractEndTime = '" + @[User::ExtractEndTime]  + "'"</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{83D20683-E373-44B2-9C9F-5984105B3FA4}"
              SQLTask:SqlStatementSource="EXEC [dbo].[spInsertStagingExecutionLog]&#xA;@StagingJobID =-1, &#xA;@StartTime = '1900-01-01 00:00:00',&#xA;@ManagerGUID ='7D3FDB0F-14CC-4808-9D5E-003EE9AB8015',&#xA;@SuccessFlag =1,&#xA;@CompletedFlag =0,&#xA;@MessageSource ='Log StagingExection Started',&#xA;@Message = 'ExectionInstanceGUID:{D9F7D463-7E22-4001-ACD0-5E463771F65A},BuildVersion:988', @RowsStaged = 0, @RowsInserted = 0, @RowsDeleted = 0, @RowsUpdated = 0, &#xA;@StagingPackagePathAndName =NULL,&#xA;@ActualFileName = NULL,&#xA; &#xA;@StagingControlID=3, @ExtractStartTime = NULL, @ExtractEndTime = '1900-01-01'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{0331C578-C274-43D4-B41B-9F08B96A9415}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Populate Get Standard Variable Values from full result set into variables">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{49739412-8380-476F-B4E8-24CBF8039483}"
            DTS:ObjectName="{49739412-8380-476F-B4E8-24CBF8039483}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::StandVariablesResult" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables\Do Nothing - Dummy task otherwise the variables do not get populated"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Do Nothing - Dummy task otherwise the variables do not get populated"
              DTS:DTSID="{98BB0AFE-ED6D-4E08-BAAE-3D4C25B98101}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Do Nothing - Dummy task otherwise the variables do not get populated"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{83D20683-E373-44B2-9C9F-5984105B3FA4}"
                  SQLTask:SqlStatementSource="SELECT 1" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{C705A062-1FAD-424C-A4A3-80E514096F09}"
              DTS:ObjectName="{C705A062-1FAD-424C-A4A3-80E514096F09}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::StagingPackageName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{729CCC63-A976-4FBD-AD24-0A6A565C2DF0}"
              DTS:ObjectName="{729CCC63-A976-4FBD-AD24-0A6A565C2DF0}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::Suite" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{C0E5199F-45AC-4EA1-9193-C266F423CFC4}"
              DTS:ObjectName="{C0E5199F-45AC-4EA1-9193-C266F423CFC4}"
              DTS:ValueIndex="2"
              DTS:VariableName="User::ExtractStartTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{44FC9B79-6A2D-40B8-A388-98593FE9CE80}"
              DTS:ObjectName="{44FC9B79-6A2D-40B8-A388-98593FE9CE80}"
              DTS:ValueIndex="3"
              DTS:VariableName="User::StagingPackagePath" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{05E6BDF9-985A-4CAE-B9B0-DEEDAA9FA561}"
              DTS:ObjectName="{05E6BDF9-985A-4CAE-B9B0-DEEDAA9FA561}"
              DTS:ValueIndex="4"
              DTS:VariableName="User::StagingTable" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{33B95250-F20F-481B-B10E-35E792009C5B}"
              DTS:ObjectName="{33B95250-F20F-481B-B10E-35E792009C5B}"
              DTS:ValueIndex="5"
              DTS:VariableName="User::StagingPathAndName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{8D0FD4AA-9D2B-49F6-B461-E317C9569055}"
              DTS:ObjectName="{8D0FD4AA-9D2B-49F6-B461-E317C9569055}"
              DTS:ValueIndex="6"
              DTS:VariableName="User::Environment" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{7FFBBD29-DD86-4DE3-851F-B236F99C2905}"
              DTS:ObjectName="{7FFBBD29-DD86-4DE3-851F-B236F99C2905}"
              DTS:ValueIndex="7"
              DTS:VariableName="User::Server" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{3B9B1821-D933-45A8-A203-422697FE0AB3}"
              DTS:ObjectName="{3B9B1821-D933-45A8-A203-422697FE0AB3}"
              DTS:ValueIndex="8"
              DTS:VariableName="User::ConnStr_msdb" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{F4D2D43B-707F-4049-A34E-B0EAAD2C297E}"
              DTS:ObjectName="{F4D2D43B-707F-4049-A34E-B0EAAD2C297E}"
              DTS:ValueIndex="9"
              DTS:VariableName="User::ProcessType" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{8CF4E58C-A0F2-486F-A8B6-F07E8979FAB7}"
              DTS:ObjectName="{8CF4E58C-A0F2-486F-A8B6-F07E8979FAB7}"
              DTS:ValueIndex="10"
              DTS:VariableName="User::SourceQuery" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{04B5ED16-9563-4378-8493-660F7D55BFE2}"
              DTS:ObjectName="{04B5ED16-9563-4378-8493-660F7D55BFE2}"
              DTS:ValueIndex="11"
              DTS:VariableName="User::SourceQueryMapping" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{43A44CC2-95C9-4A5C-B3AC-80F887FC4F2C}"
              DTS:ObjectName="{43A44CC2-95C9-4A5C-B3AC-80F887FC4F2C}"
              DTS:ValueIndex="12"
              DTS:VariableName="User::MergeQuery" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{8110D0C6-D5A0-4FC6-8F3F-4B11A6421AA6}"
              DTS:ObjectName="{8110D0C6-D5A0-4FC6-8F3F-4B11A6421AA6}"
              DTS:ValueIndex="13"
              DTS:VariableName="User::BulkUploadLoadSize" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{EC3339A2-2B4F-4F5F-A069-932AF8BA517F}"
              DTS:ObjectName="{EC3339A2-2B4F-4F5F-A069-932AF8BA517F}"
              DTS:ValueIndex="14"
              DTS:VariableName="User::TruncateStagingTable" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Sequence Container"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{E229087D-DE64-489F-AA5B-7A41CAC37B87}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="Sequence Container">
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Sequence Container\Get ExtractRowCount and NextExtractStartTime  for this extract in extract table"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{73bd8722-2df8-4059-acae-050435be1a57}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get ExtractRowCount and NextExtractStartTime  for this extract in extract table"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="2">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"SELECT COUNT(*) AS StagingRowCount, CONVERT(CHAR(23), DATEADD(DAY,-1,'" + @[User::ExtractEndTime]  + "'), 121) AS NextExtractStartTime FROM [" + @[User::Suite] + "].[" + @[User::StagingTable]  +  "] WHERE ExtractJobID = " +  (DT_WSTR, 10)@[User::StagingJobID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{96DF69D6-222D-4B0C-BD4B-AC47568EA9C3}"
                  SQLTask:SqlStatementSource="SELECT COUNT(*) AS StagingRowCount, CONVERT(CHAR(23), DATEADD(DAY,-1,'1900-01-01'), 121) AS NextExtractStartTime FROM [MDS].[ExtOMFShipmenttoCustomerBSIK] WHERE ExtractJobID = -1002"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::StagingRowCount" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="1"
                    SQLTask:DtsVariableName="User::NextExtractStartTime" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Sequence Container\Get NextExtractStartTime"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{9639a62a-dff4-4643-9f45-5652f0d9891c}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get NextExtractStartTime"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"SELECT CONVERT(CHAR(23), DATEADD(DAY,-1,'" + @[User::ExtractEndTime]  + "'), 121)"</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{96DF69D6-222D-4B0C-BD4B-AC47568EA9C3}"
                  SQLTask:SqlStatementSource="SELECT CONVERT(CHAR(23), DATEADD(DAY,-1,'1900-01-01'), 121)"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::NextExtractStartTime" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Sequence Container\Get Variables Values Sql Bulk"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{716be1fc-cd88-4803-bda6-eadca1f12598}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get Variables Values Sql Bulk"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"EXEC [dbo].[spGetStagingExecutionBulkSqlVariables] " +  (DT_WSTR, 10) @[User::StagingControlID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{83D20683-E373-44B2-9C9F-5984105B3FA4}"
                  SQLTask:SqlStatementSource="EXEC [dbo].[spGetStagingExecutionBulkSqlVariables] 3"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="ConnStr_Source"
                    SQLTask:DtsVariableName="User::ConnStr_Source" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="ConnStr_Staging"
                    SQLTask:DtsVariableName="User::ConnStr_Staging" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="StagingJobID"
                    SQLTask:DtsVariableName="User::StagingJobID" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="SourceTypeName"
                    SQLTask:DtsVariableName="User::SourceTypeName" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Sequence Container\Log Package Execution"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{02dd2c30-b9e1-4aa4-8042-b60ee50f56b4}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Log Package Execution"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="3">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"EXEC [dbo].[spInsertStagingExecutionLog]
@StagingJobID = " + (DT_STR, 20, 1252)@[User::StagingJobID] + ",  
@StartTime = '" + @[User::StartTime]  + "',
@ManagerGUID ='" + @[User::ManagerGUID] + "',
@SuccessFlag =1,
@CompletedFlag =1,
@MessageSource ='Log StagingExection Completed',
@Message = 'ExectionInstanceGUID:" + @[System::ExecutionInstanceGUID] + ",BuildVersion:" + (DT_STR, 20, 1252)@[System::VersionBuild]  + "', 
@RowsStaged = " + (DT_WSTR, 10)@[User::StagingRowCount] + ", 
@RowsInserted = " + (DT_WSTR, 10)@[User::RowsInserted] + ", 
@RowsDeleted = " + (DT_WSTR, 10)@[User::RowsDeleted] + ", 
@RowsUpdated = " + (DT_WSTR, 10)@[User::RowsUpdated] + " , 
@StagingPackagePathAndName =NULL,
@ActualFileName = NULL,
@StagingControlID=" + (DT_WSTR, 10)@[User::StagingControlID] + ", 
@ExtractStartTime = NULL, 
@ExtractEndTime = NULL"</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{83D20683-E373-44B2-9C9F-5984105B3FA4}"
                  SQLTask:SqlStatementSource="EXEC [dbo].[spInsertStagingExecutionLog]&#xA;@StagingJobID = -1002,  &#xA;@StartTime = '1900-01-01 00:00:00',&#xA;@ManagerGUID ='7D3FDB0F-14CC-4808-9D5E-003EE9AB8015',&#xA;@SuccessFlag =1,&#xA;@CompletedFlag =1,&#xA;@MessageSource ='Log StagingExection Completed',&#xA;@Message = 'ExectionInstanceGUID:{D9F7D463-7E22-4001-ACD0-5E463771F65A},BuildVersion:988', &#xA;@RowsStaged = 0, &#xA;@RowsInserted = 0, &#xA;@RowsDeleted = 0, &#xA;@RowsUpdated = 0 , &#xA;@StagingPackagePathAndName =NULL,&#xA;@ActualFileName = NULL,&#xA;@StagingControlID=3, &#xA;@ExtractStartTime = NULL, &#xA;@ExtractEndTime = NULL" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Sequence Container\Run Merge Stored Proc"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{831b8664-2f5f-44f1-b33a-0acd17fae43d}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Run Merge Stored Proc"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:PropertyExpression
                DTS:Name="SqlStatementSource">"EXEC " + @[User::MergeQuery] + " @StagingJobID = " +  (DT_WSTR, 10) @[User::StagingJobID]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{96DF69D6-222D-4B0C-BD4B-AC47568EA9C3}"
                  SQLTask:SqlStatementSource="EXEC VendorMerge @StagingJobID = -1002"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="RowsDeleted"
                    SQLTask:DtsVariableName="User::RowsDeleted" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="RowsInserted"
                    SQLTask:DtsVariableName="User::RowsInserted" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="RowsUpdated"
                    SQLTask:DtsVariableName="User::RowsUpdated" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Sequence Container\Sequence Container\Sql Bulk Upload"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Sql Bulk Upload"
              DTS:DTSID="{0f1533ef-7e92-4a29-b4d1-b6c07ca4c14a}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Sql Bulk Upload"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_5a193d68be4542dba52142cc59f526b2"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp">
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptHelper.cs"
                    Encoding="UTF8"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
//This code is copied to:
//Packages_Core.StagingManagerDynamic
//Packages_Core.StagingExecutionDynamic
//and StagingHelper
//The problem is referencing the dll on all servers used. 
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;
using Oracle.DataAccess.Client;

namespace DWReferenceHelper
{
    public class ScriptHelper
    {

        #region Properties
        public int RowsInserted { get; set; }
        public int RowsDeleted { get; set; }
        public int RowsUpdated { get; set; }
        public int RowsStaged { get; set; }
        public string SuiteFolderLocation { get; set; }
        public string unProcessedFileFullName { get; set; }
        public string InProcessedFileFullName { get; set; }
        public Dictionary<int, ProcessInformation> ProcessControl = new Dictionary<int, ProcessInformation>();
        public int SSISPackagesCount = 0;

        public List<string> ORACLE = new List<string> { "OLEDB_ORACLE", "ODBC_ORACLE" };
        public List<string> SQL = new List<string> { "OLEDB", "ODBC", "OLEDB_SQL", "ODBC_SQL" };

        #endregion

        #region Staging Manager

        /// <summary>
        /// Staging Manager Process Files Task
        /// Checks if any files are to be loaded or sql extracts and run them
        /// </summary>
        /// <param name="values"></param>
        public void MainStagingManagerProcessFiles(Dictionary<string, object> values)
        {
            string Suite = values["Suite"].ToString();
            string StagingExecutionLocation = values["StagingExecutionLocation"].ToString();
            string Server = values["Server"].ToString();
            string FileNameSeparator = values["FileNameSeparator"].ToString();
            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string ExecutionInstanceGUID = values["ExecutionInstanceGUID"].ToString();
            string StartTime = values["StartTime"].ToString();

            //Process Files

            var ds = GetData(ConnStr_ETLReference, "[dbo].[spGetStagingManagerFolderLocation] @SuiteName = '" + Suite + "'");



            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                string FolderLocationUprocessed = Path.Combine(dr["BaseFolder"].ToString(),
                                                               dr["Environment"].ToString(),
                                                               dr["SuiteName"].ToString(),
                                                               dr["Folder"].ToString());
                var files = GetFiles(FolderLocationUprocessed);

                if (files != null && files.Count > 0)
                {
                    foreach (int stagingControlID in GetStagingControlIDs(ConnStr_ETLReference, files, Suite, FileNameSeparator))
                    {
                        ds = GetData(ConnStr_ETLReference, "SELECT RunAs32Bit FROM StagingControl WHERE StagingControlID = " + stagingControlID);
                        bool runAs32Bit = Convert.ToBoolean(ds.Tables[0].Rows[0]["RunAs32Bit"]);

                        string dtexec = GetDtexecLocation(runAs32Bit, ConnStr_ETLReference);


                        string ExecutionCommand = CreateStagingExecutionCommand(StagingExecutionLocation, Server, stagingControlID, ExecutionInstanceGUID, StartTime, ConnStr_ETLReference);

                        StagingLogMessage(ConnStr_ETLReference,
                            -1,
                            1,
                            0,
                            "Log Manager Starting StagingExecution File Extract",
                            dtexec + " " + ExecutionCommand,
                            0,
                            0,
                            0,
                            0,
                            "",
                            StartTime,
                            "",
                            "",
                            stagingControlID,
                            ExecutionInstanceGUID);

                        StartSSISPackage(ExecutionCommand, stagingControlID, runAs32Bit, ConnStr_ETLReference);
                    }
                }
            }
            //Process Data Extracts
            foreach (int stagingControlID in GetNextRunDateTimeStagingControlID(ConnStr_ETLReference, Suite))
            {
                ds = GetData(ConnStr_ETLReference, "SELECT RunAs32Bit FROM StagingControl WHERE StagingControlID = " + stagingControlID);
                bool runAs32Bit = Convert.ToBoolean(ds.Tables[0].Rows[0]["RunAs32Bit"]);

                string dtexec = GetDtexecLocation(runAs32Bit, ConnStr_ETLReference);

                string ExecutionCommand = CreateStagingExecutionCommand(StagingExecutionLocation, Server, stagingControlID, ExecutionInstanceGUID,
                    StartTime, ConnStr_ETLReference);

                StagingLogMessage(ConnStr_ETLReference,
                    -1,
                    1,
                    0,
                    "Log Manager Starting StagingExecution Data Extracts",
                    dtexec + " " + ExecutionCommand,
                    0,
                    0,
                    0,
                    0,
                    "",
                    StartTime,
                    "",
                    "",
                    stagingControlID,
                    ExecutionInstanceGUID);

                StartSSISPackage(ExecutionCommand, stagingControlID, false, ConnStr_ETLReference);
            }
            while (0 < SSISPackagesCount)
            {
                //Check every 5 secs to see if the packages have completed.
                Thread.Sleep(5000);
            }

            foreach (var value in ProcessControl.Values)
            {
                if (value.ExitCode != 0)
                {
                    StagingLogMessage(ConnStr_ETLReference,
                        -1,
                        0,
                        1,
                        "Log Manager Error Log for StagingExecutionDynamic",
                        value.OutputMessage,
                        0,
                        0,
                        0,
                        0,
                        "",
                        StartTime,
                        "",
                        "",
                        value.ControlID,
                        ExecutionInstanceGUID);
                }
            }

            StagingLogMessage(ConnStr_ETLReference,
                   -1,
                   1,
                   1,
                   "Log Manager Complete",
                   "",
                   0,
                   0,
                   0,
                   0,
                   "",
                   StartTime,
                   "",
                   "",
                   -1,
                   ExecutionInstanceGUID);
        }

        /// <summary>
        /// Staging Execution Sql BulkUpload
        /// Checks if any sql extracts need to occur and run them
        /// </summary>
        /// <param name="values"></param>
        public void MainStagingExecutionSqlBulkUpload(Dictionary<string, object> values)
        {
            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string ConnStr_Staging = values["ConnStr_Staging"].ToString();
            string ConnStr_Source = values["ConnStr_Source"].ToString();
            int StagingJobID = Convert.ToInt32(values["StagingJobID"]);
            string SourceCmdText = values["SourceCmdText"].ToString();
            string StartTime = values["StartTime"].ToString();
            string ExtractStartTime = values["ExtractStartTime"].ToString();
            string ExtractEndTime = values["ExtractEndTime"].ToString();
            int StagingControlID = Convert.ToInt32(values["StagingControlID"]);
            string ManagerGUID = values["ManagerGUID"].ToString();
            int BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            string StagingTable = values["StagingTable"].ToString();
            string SourceQueryMapping = values["SourceQueryMapping"].ToString();
            bool bTruncateStagingTable = Convert.ToBoolean(values["TruncateStagingTable"]);
            string SourceTypeName = values["SourceTypeName"].ToString();

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            checkConnection(ConnStr_Staging);
            dsb.ConnectionString = ConnStr_Staging;
            dsb.Remove("Provider");
            ConnStr_Staging = dsb.ConnectionString + ";Connect Timeout=0";

            checkConnection(ConnStr_Source, SourceTypeName);
            dsb.ConnectionString = ConnStr_Source;
            dsb.Remove("Provider");

            ConnStr_Source = dsb.ConnectionString;
            if (SQL.Contains(SourceTypeName))
            {
                ConnStr_Source += ";Connect Timeout=0";
            }

            StagingLogMessage(ConnStr_ETLReference,
                StagingJobID,
                1,
                0,
                "Log StagingExecution BulkSQL evaluated Source Query",
                SourceCmdText,
                0,
                0,
                0,
                0,
                "",
                StartTime,
                ExtractStartTime,
                ExtractEndTime,
                StagingControlID,
                ManagerGUID);

            TruncateTable(StagingTable, ConnStr_Staging, bTruncateStagingTable);

            int rowsCopied = PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Staging, BulkUploadLoadSize, StagingTable, SourceQueryMapping, SourceTypeName);
            values.Add("rowsCopied", rowsCopied);

        }

        public void MainStagingExecutionFileBulkUpload(Dictionary<string, object> values)
        {

            string ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            string Environment = values["Environment"].ToString();
            string FileNameSeparator = values["FileNameSeparator"].ToString();
            string StagingPackageName = values["StagingPackageName"].ToString();
            string ConnStr_Staging = values["ConnStr_Staging"].ToString();
            string SourceQueryMapping = values["SourceQueryMapping"].ToString();
            char DelimiterChar = Convert.ToChar(values["DelimiterChar"]);
            string Suite = values["Suite"].ToString();
            string FolderBaseLocation = values["FolderBaseLocation"].ToString();
            string StagingTable = values["StagingTable"].ToString();
            string MergeQuery = values["MergeQuery"].ToString();
            bool bHasHeader = Convert.ToBoolean(values["HasHeader"]);
            int BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            string StartTime = values["StartTime"].ToString();
            string FileTimeStampFormat = values["FileTimeStampFormat"].ToString();
            int StagingControlID = Convert.ToInt32(values["StagingControlID"]);
            string ManagerGUID = values["ManagerGUID"].ToString();
            bool bTruncateStagingTable = Convert.ToBoolean(values["TruncateStagingTable"]);

            SuiteFolderLocation = GetSuiteFolderLocation(FolderBaseLocation, Environment, Suite);

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            checkConnection(ConnStr_Staging);
            dsb.ConnectionString = ConnStr_Staging;
            dsb.Remove("Provider");
            ConnStr_Staging = dsb.ConnectionString + ";Connect Timeout=0";

            List<Mapping> Mappings = SplitMappings(SourceQueryMapping);

            var fileFullNames = GetFiles(Path.Combine(SuiteFolderLocation, "Unprocessed"));
            var OrderFiles = GetOrderFiles(fileFullNames, FileNameSeparator, StagingPackageName, FileTimeStampFormat);

            if (OrderFiles != null)
            {
                foreach (var file in OrderFiles)
                {

                    int StagingJobID = GetStagingJobID(ConnStr_ETLReference);
                    unProcessedFileFullName = file.Value;

                    StagingLogMessage(ConnStr_ETLReference,
                        StagingJobID,
                        1,
                        0,
                        "Log StagingExecution Starting file process.",
                        "",
                        0,
                        0,
                        0,
                        0,
                        unProcessedFileFullName,
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);


                    InProcessedFileFullName = moveFileToInProcess(unProcessedFileFullName, StagingJobID, SuiteFolderLocation);

                    CheckFileHeadersAndColumns(InProcessedFileFullName, SourceQueryMapping, StagingTable, ConnStr_Staging, DelimiterChar);

                    TruncateTable(StagingTable, ConnStr_Staging, bTruncateStagingTable);

                    ProcessFile(StagingJobID, InProcessedFileFullName, ConnStr_Staging, Mappings, BulkUploadLoadSize, StagingTable, SuiteFolderLocation, bHasHeader, DelimiterChar);

                    RowCountStaged(ConnStr_Staging, StagingTable, StagingJobID);

                    MergeData(ConnStr_Staging, MergeQuery, StagingJobID);

                    StagingLogMessage(ConnStr_ETLReference,
                        StagingJobID,
                        1,
                        1,
                        "Log StagingExecution Completed files processed.",
                        "",
                        RowsInserted,
                        RowsDeleted,
                        RowsUpdated,
                        RowsStaged,
                        unProcessedFileFullName,
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);
                }
            }
            else
            {
                StagingLogMessage(ConnStr_ETLReference,
                        -1,
                        1,
                        1,
                        "Log StagingExecution Completed no files found.",
                        "",
                        0,
                        0,
                        0,
                        0,
                        "",
                        StartTime,
                        "",
                        "",
                        StagingControlID,
                        ManagerGUID);
            }

        }

        public string GetPackageName(string fileFullName, string fileNameSeparator)
        {
            string fileName = Path.GetFileName(fileFullName);

            string packageName = fileName.Substring(0, fileName.LastIndexOf(fileNameSeparator));
            return packageName;
        }

        public string GetSuiteFolderLocation(string FolderBaseLocation, string Environment, string Suite)
        {
            return Path.Combine(FolderBaseLocation, Environment, Suite);
        }

        public string CreateStagingExecutionCommand(string StagingExecutionLocation, string Server, int StagingControlID, string ManagerGUID, string StartTime,
            string ConnStr_ETLReference)
        {
            string command = "/SQL \"" + StagingExecutionLocation
                             + "\" /SERVER \"" + Server
                             + "\"" + " /MAXCONCURRENT \" -1 \" /CHECKPOINTING OFF"
                             + " /SET \"\\Package.Variables[StagingControlID].Value\";" + StagingControlID
                             + " /SET \"\\Package.Variables[ManagerGUID].Value\";\"" + ManagerGUID + "\""
                             + " /SET \"\\Package.Variables[User::StartTime].Value\";\"" + StartTime + "\""
                             + " /SET \"\\Package.Variables[ConnStr_ETLReference].Value\";\"\\\"" + ConnStr_ETLReference + "\\\"\"";
            return command;
        }

        public void StartManagerPackageStaging(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            string command = "/SQL \"" + packageLocationlocation
                             + "\" /SERVER \"" + server + "\""
                             + " /CHECKPOINTING OFF"
                             + " /SET \"\\Package.Variables[ConnStr_ETLReference].Value\";\"\\\"" + ConnStr_ETLReference + "\\\"\""
                             + " /REPORTING E";

            StartSSISPackage(command, -1, false, ConnStr_ETLReference);
        }

        public string GetTimeStamp(string fileFullName, string fileNameSeparator)
        {
            string fileName = Path.GetFileName(fileFullName);
            int index = fileName.LastIndexOf(fileNameSeparator);
            string timeStamp = fileName.Substring((fileName.LastIndexOf(fileNameSeparator) + 1), (fileName.Length - 1 - index));
            return Path.GetFileNameWithoutExtension(timeStamp);
        }

        public List<string> GetFiles(string suiteFolderLocation)
        {
            if (Directory.Exists(suiteFolderLocation))
            {
                var files =
                    Directory.GetFiles(suiteFolderLocation, "*.*")
                        .Where(file => file.ToLower().EndsWith("csv")
                                       || file.ToLower().EndsWith("zip")
                                       || file.ToLower().EndsWith("txt"))
                        .ToList();
                return files;
            }
            return null;
        }

        public List<int> GetStagingControlIDs(string ConnStr_ETLReference, List<string> fileFullNames, String suite, string fileNameSeparator)
        {
            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");

            string packages = "";
            foreach (var fileFullName in fileFullNames)
            {
                string packageName = GetPackageName(fileFullName, fileNameSeparator);

                if (!String.IsNullOrEmpty(packages))
                {
                    packages += ", ";
                }
                packages += "''" + packageName + "''";
            }
            if (!String.IsNullOrEmpty(packages))
            {
                string sqlQuery = "EXEC dbo.spGetStagingPackagesFile @SuiteName='" + suite + "', @Packages='" + packages + "' ";

                var ds = GetData(ConnStr_ETLReference, sqlQuery);

                if (ds.Tables.Count > 0)
                {
                    DataTable dtPackages = ds.Tables[0];
                    var query = from r in dtPackages.AsEnumerable()
                                select r.Field<int>("StagingControlID");

                    return query.ToList();

                }
            }

            return null;
        }

        public SortedList<DateTime, String> GetOrderFiles(List<string> fileFullNames, string fileNameSeparator, string PackageName, string fileTimeStampFormat)
        {
            var files = new SortedList<DateTime, String>();
            foreach (var filefullName in fileFullNames)
            {
                if (PackageName == GetPackageName(filefullName, fileNameSeparator))
                {
                    string timeStamp = GetTimeStamp(filefullName, fileNameSeparator);

                    CultureInfo provider = CultureInfo.InvariantCulture;
                    DateTime dt = DateTime.ParseExact(timeStamp, fileTimeStampFormat, provider);

                    files.Add(dt, filefullName);
                }
            }
            if (files.Count > 0)
            {
                return files;
            }
            return null;
        }

        public void RowCountStaged(string ConnStr_Staging, string StagingExtractTable, int StagingJobID)
        {
            var ds = GetData(ConnStr_Staging, "SELECT COUNT(*) AS 'RowsStaged' FROM " + StagingExtractTable + " WHERE StagingJobID = " + StagingJobID);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                RowsStaged = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsStaged"]);
            }
            else
            {
                throw new Exception("RowCountStaged - Failed to return row count");
            }

        }

        public void MergeData(string ConnStr_Staging, string MergeQuery, int StagingJobID)
        {
            var ds = GetData(ConnStr_Staging, "EXEC " + MergeQuery + " @StagingJobID = " + StagingJobID);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                RowsInserted = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsInserted"]);
                RowsDeleted = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsDeleted"]);
                RowsUpdated = Convert.ToInt32(ds.Tables[0].Rows[0]["RowsUpdated"]);
            }
            else
            {
                throw new Exception("MergeData stored proc failed to return row count details");
            }
        }

        public int GetStagingJobID(string ConnStr_ETLReference)
        {
            var ds = GetData(ConnStr_ETLReference, "EXEC dbo.spGetJobID @Type = 'StagingJobID'");

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return Convert.ToInt32(ds.Tables[0].Rows[0]["JobID"]);
            }

            throw new Exception("GetStagingJobID failed to return a StagingJobID");
        }

        public void CleanUpFiles(string unProcessedFileFullName, string InProcessedFileFullName, string SuiteFolderLocation)
        {
            if (String.IsNullOrEmpty(SuiteFolderLocation) == false)
            {
                if (String.IsNullOrEmpty(InProcessedFileFullName) == false && File.Exists(InProcessedFileFullName))
                {
                    string archiveFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(InProcessedFileFullName));
                    if (File.Exists(archiveFileFullName))
                    {
                        File.Delete(archiveFileFullName);
                    }

                    File.Move(InProcessedFileFullName, archiveFileFullName);

                    if (Directory.Exists(Path.GetDirectoryName(InProcessedFileFullName)))
                    {
                        //Todo: Delete files
                        Directory.Delete(Path.GetDirectoryName(InProcessedFileFullName), true);
                    }
                }

                if (String.IsNullOrEmpty(unProcessedFileFullName) == false && File.Exists(unProcessedFileFullName))
                {
                    string archiveFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName));
                    if (File.Exists(archiveFileFullName))
                    {
                        //Todo: Delete files
                        File.Delete(archiveFileFullName);
                    }

                    File.Move(unProcessedFileFullName, Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName)));
                }
            }
        }

        public int PerformSQLBulkCopy(string ConnStr_Source, string SourceCmdText, string ConnStr_Destination,
            int BulkUploadLoadSize, string StagingTable, string SourceQueryMapping, string SourceTypeName)
        {
            List<Mapping> Mappings = SplitMappings(SourceQueryMapping);

            return PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Destination, BulkUploadLoadSize,
                StagingTable, Mappings, SourceTypeName);
        }


        public int PerformFileBulkCopy(string SourceCmdText, string ConnStr_Destination, string FileFullName,
            int BulkUploadLoadSize, string DestinationTable, List<Mapping> Mappings, bool HasHeader, char DelimiterChar)
        {

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_Destination;
            dsb.Remove("Provider");
            ConnStr_Destination = dsb.ConnectionString + ";Connect Timeout=0";

            CreateShemaIniFile(FileFullName, Mappings, HasHeader, DelimiterChar);

            var bulkCopy = new SqlBulkCopy(ConnStr_Destination, SqlBulkCopyOptions.KeepIdentity);

            bulkCopy.BatchSize = BulkUploadLoadSize;
            bulkCopy.BulkCopyTimeout = 0;
            bulkCopy.DestinationTableName = DestinationTable;

            BulkCopyMapping(bulkCopy, Mappings);

            var connString = string.Format(
                @"Provider=Microsoft.Jet.OleDb.4.0; Data Source={0};Extended Properties=""Text;HDR=YES;FMT=Delimited""",
                Path.GetDirectoryName(FileFullName)
            );

            using (var conn = new OleDbConnection(connString))
            {
                conn.Open();

                using (OleDbCommand cmd = new OleDbCommand(SourceCmdText, conn))
                {

                    using (OleDbDataReader reader = cmd.ExecuteReader())
                    {
                        bulkCopy.WriteToServer(reader);
                    }
                }
            }
            int result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);

            bulkCopy.Close();
            return result;
        }

        public void ProcessFile(int StagingJobID, string InProcessedFileFullName, string ConnStr_Staging, List<Mapping> Mappings, int BulkUploadLoadSize,
            string StagingExtractTable, string SuiteFolderLocation, bool HasHeader, char DelimiterChar)
        {
            string selectColumns = "";
            foreach (var mapping in Mappings)
            {
                selectColumns += mapping.OledSourceMap + ", ";
            }

            var query = "SELECT " + selectColumns + StagingJobID + " AS [StagingJobID] FROM [" +
                            Path.GetFileName(InProcessedFileFullName) + "]";

            PerformFileBulkCopy(query, ConnStr_Staging, InProcessedFileFullName, BulkUploadLoadSize, StagingExtractTable,
                Mappings, HasHeader, DelimiterChar);

            string archiveFileFullName = Path.Combine(SuiteFolderLocation, "Processed", Path.GetFileName(InProcessedFileFullName));

            if (File.Exists(archiveFileFullName))
            {
                //TODO: Fix deletion
                File.Delete(archiveFileFullName);
            }

            File.Move(InProcessedFileFullName, archiveFileFullName);

            if (Directory.Exists(Path.GetDirectoryName(InProcessedFileFullName)))
            {
                Directory.Delete(Path.GetDirectoryName(InProcessedFileFullName), true);
            }

            // Move zip file into Processed

            if (Path.GetExtension(unProcessedFileFullName).ToLower() == ".zip")
            {
                archiveFileFullName = Path.Combine(SuiteFolderLocation, "Processed", Path.GetFileName(unProcessedFileFullName));

                if (File.Exists(archiveFileFullName))
                {
                    File.Delete(archiveFileFullName);
                }
                File.Move(unProcessedFileFullName, archiveFileFullName);
            }
        }

        /// <summary>
        /// This is used to create the Schema.ini file used by the OleDbConnection. To forece column types
        /// </summary>
        /// <param name="InProcessedFileFullName"></param>
        public void CreateShemaIniFile(string FileFullName, List<Mapping> Mappings, bool HasHeader, char DelimiterChar)
        {
            StringBuilder schema = new StringBuilder();

            schema.AppendLine("[" + Path.GetFileName(FileFullName) + "]");

            if (HasHeader)
            {
                schema.AppendLine("ColNameHeader=True");
            }
            else
            {
                schema.AppendLine("ColNameHeader=False");
            }

            //Delimited Character
            switch (DelimiterChar)
            {
                case ',':
                    schema.AppendLine("Format=CSVDelimited");
                    break;
                case '\t':
                    schema.AppendLine("Format=TabDelimited");
                    break;
                default:
                    schema.AppendLine("Format=Delimited(" + DelimiterChar + ")");
                    break;
            }

            for (int i = 0; i < Mappings.Count; i++)
            {
                schema.AppendLine("col" + (i + 1).ToString() + "=" + Mappings[i].OledSourceMap + " Text");
            }

            string schemaFileName = Path.Combine(Path.GetDirectoryName(FileFullName), "Schema.ini");
            TextWriter tw = new StreamWriter(schemaFileName);
            tw.WriteLine(schema.ToString());
            tw.Close();

        }

        public string moveFileToInProcess(string unProcessedFileFullName, int StagingJobID, string SuiteFolderLocation)
        {
            string InProcessFileFullName = "";
            string InProcessDirectory = Path.Combine(SuiteFolderLocation, "InProcess", Guid.NewGuid().ToString());
            if (Path.GetExtension(unProcessedFileFullName).ToLower() == ".zip")
            {
                var zip = ZipFile.Open(unProcessedFileFullName, ZipArchiveMode.Read);

                string zippedFileName = "";
                if (zip.Entries.Count == 1)
                {
                    zippedFileName = zip.Entries[0].FullName;
                }
                else
                {
                    zip.Dispose();
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "Zip file has more than one file: ");
                }

                if (zippedFileName.Split('.').Count() > 2)
                {
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "file has to many fullstops in the name expected format *.*: ");
                }

                string newTempDir = Path.Combine(SuiteFolderLocation, Guid.NewGuid().ToString());
                Directory.CreateDirectory(newTempDir);
                zip.ExtractToDirectory(newTempDir);
                zip.Dispose();

                string extractedFilePathName = Path.Combine(newTempDir, zippedFileName);

                if (File.Exists(extractedFilePathName))
                {
                    InProcessFileFullName = Path.Combine(InProcessDirectory, StagingJobID.ToString().PadLeft(5, '0') + "_" + zippedFileName);
                    Directory.CreateDirectory(InProcessDirectory);
                    System.IO.File.Move(extractedFilePathName, InProcessFileFullName);
                    Directory.Delete(newTempDir, true);
                }
                else
                {
                    throw new Exception("Unzipped file cannot be found: " + extractedFilePathName);
                }
            }
            else
            {
                if (Path.GetFileName(unProcessedFileFullName).Split('.').Count() > 2)
                {
                    MoveToUnProcessedToFailedDir(unProcessedFileFullName, SuiteFolderLocation, "file has to many fullstops in the name expected format *.*: ");
                }

                InProcessFileFullName = Path.Combine(InProcessDirectory, Path.GetFileName(unProcessedFileFullName));
                Directory.CreateDirectory(InProcessDirectory);
                System.IO.File.Move(unProcessedFileFullName, InProcessFileFullName);
            }
            return InProcessFileFullName;
        }

        public string getFailedDir(string SuiteFolderLocation)
        {
            return Path.Combine(SuiteFolderLocation, "Failed");
        }
        public void MoveToUnProcessedToFailedDir(string unProcessedFileFullName, string SuiteFolderLocation, string ErrorMessage)
        {
            string FailedFileFullName = Path.Combine(getFailedDir(SuiteFolderLocation), Path.GetFileName(unProcessedFileFullName));

            //handle zip files
            if (File.Exists(unProcessedFileFullName))
            {
                if (File.Exists(FailedFileFullName))
                {
                    //Todo:Fix deletion
                    File.Delete(FailedFileFullName);
                }

                File.Move(unProcessedFileFullName, FailedFileFullName);
            }

            throw new Exception(ErrorMessage + unProcessedFileFullName);
        }

        public List<int> GetNextRunDateTimeStagingControlID(string ConnStr_ETLReference, string Suite)
        {
            var ds = GetData(ConnStr_ETLReference, "[dbo].[spGetStagingPackagesSql] '" + Suite + "'");

            if (ds.Tables.Count > 0)
            {
                DataTable dtPackages = ds.Tables[0];
                var query = from r in dtPackages.AsEnumerable()
                            select r.Field<int>("StagingControlID");
                return query.ToList();
            }

            return null;
        }

        public bool CheckFileHeadersAndColumns(string filename, string SourceQueryMapping, string StagingTable, string ConnStr_Staging, char Delimeter)
        {
            var schemaName = string.Empty;
            var tableName = StagingTable;

            if (StagingTable.Split('.').Count() > 1)
            {
                schemaName = StagingTable.Split('.')[0];
                tableName = StagingTable.Split('.')[1];
            }

            var query = "SELECT c.COLUMN_NAME AS column_name FROM INFORMATION_SCHEMA.COLUMNS c WHERE c.TABLE_NAME = '" + tableName + "' " + (schemaName != string.Empty ? " AND  c.TABLE_SCHEMA='" + schemaName + "'" : "");
            var columnsDs = GetData(ConnStr_Staging, query);
            List<string> listColumns = (from DataRow row in columnsDs.Tables[0].Rows select row[0].ToString()).ToList();

            var listHeaderFromFile = ReadFileHeader(filename, Delimeter);

            var Mappings = SplitMappings(SourceQueryMapping);

            // Check File Header fields should be valid fair with sourcequerymapping
            bool isHeaderValid = true;
            foreach (var header in listHeaderFromFile)
            {
                isHeaderValid = Mappings.FirstOrDefault(f => f.SourceMap == header) != null;
                if (!isHeaderValid)
                {
                    throw new Exception("File header field is not existed. File header fields: " + header + " doesn't existed in source query mapping: " + SourceQueryMapping + ". File name: " + filename + ", Staging table: " + StagingTable);
                }
            }

            // Check Columns from table should be valid fair with sourcequerymapping
            bool isColumnValid = true;

            foreach (var mapping in Mappings)
            {
                isColumnValid = listColumns.Contains(mapping.DestinationMap);
                if (!isColumnValid)
                {
                    throw new Exception("Sourcequerymaping is unvalid. Mapping: " + mapping.DestinationMap + " in source query mapping: " + SourceQueryMapping + " does not existed in table: " + StagingTable);
                }
            }

            // Check File Header fields should be in the same order and value as the sourcequerymapping
            if (listHeaderFromFile.Count > Mappings.Count)
            {
                isHeaderValid = false;
            }
            else
            {
                if (listHeaderFromFile.Where((t, i) => t != Mappings[i].SourceMap).Any())
                {
                    isHeaderValid = false;
                    throw new Exception("Wrong header order. File header fields in file: " + filename + " has order: " + GenerateListToString(listHeaderFromFile) + " is not matched to source query mapping: " + SourceQueryMapping);
                }
            }

            return isHeaderValid && isColumnValid;
        }

        public static List<string> ReadFileHeader(string filename, char delimiter)
        {
            string strHeader = string.Empty;
            var file = new StreamReader(filename);
            while ((strHeader = file.ReadLine()) != null)
            {
                break;
            }

            file.Close();
            var listHeader = new List<string>();
            if (!string.IsNullOrEmpty(strHeader))
            {
                string[] headers = strHeader.Split(delimiter);

                listHeader.AddRange(headers);
            }

            return listHeader;
        }

        public void StagingLogMessage(string ConnStr_ETLReference,
                      int StagingJobID,
                      int SuccessFlag,
                      int CompletedFlag,
                      string MessageSource,
                      string Message,
                      int RowsInserted,
                      int RowsDeleted,
                      int RowsUpdated,
                      int RowsStaged,
                      string ActualFileName,
                      string StartTime,
                      string ExtractStartTime,
                      string ExtractEndTime,
                      int StagingControlID,
                      string ManagerGUID)
        {
            string tempMessage = Message.Replace("'", "''");

            string sqlCmdLog = "[spInsertStagingExecutionLog] "
                               + "@StagingJobID = " + StagingJobID + ", "
                               + "@ManagerGUID = '" + ManagerGUID + "', "
                               + "@SuccessFlag = " + SuccessFlag + ", "
                               + "@CompletedFlag = " + CompletedFlag + ", "
                               + "@MessageSource = '" + MessageSource + "', "
                               + "@Message = '" + tempMessage + "', "
                               + "@RowsStaged = " + RowsStaged + ", "
                               + "@RowsInserted = " + RowsInserted + ", "
                               + "@RowsDeleted = " + RowsDeleted + ", "
                               + "@RowsUpdated = " + RowsUpdated + ", "
                               + "@StagingPackagePathAndName = NULL, "
                               + "@ActualFileName = '" + ActualFileName + "', "
                               + "@StartTime = '" + StartTime + "', ";

            if (String.IsNullOrEmpty(ExtractStartTime))
            {
                sqlCmdLog += "@ExtractStartTime = NULL, ";
            }
            else
            {
                sqlCmdLog += "@ExtractStartTime = '" + ExtractStartTime + "', ";
            }

            if (String.IsNullOrEmpty(ExtractStartTime))
            {
                sqlCmdLog += "@ExtractEndTime = NULL, ";
            }
            else
            {
                sqlCmdLog += "@ExtractEndTime = '" + ExtractEndTime + "', ";
            }

            sqlCmdLog += "@StagingControlID = " + StagingControlID;

            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");
            ConnStr_ETLReference = dsb.ConnectionString;

            var SrcConn = new SqlConnection(ConnStr_ETLReference);

            var sCommand = new SqlCommand(sqlCmdLog, SrcConn);
            SrcConn.Open();
            sCommand.ExecuteNonQuery();
            SrcConn.Close();
            SrcConn.Dispose();
        }
        #endregion

        #region Extract Manager

        public void MainExtractManagerBulkUpload(Dictionary<string, object> values)
        {
            var dsb = new DbConnectionStringBuilder();
            var ConnStr_ETLReference = values["ConnStr_ETLReference"].ToString();
            var ConnStr_Destination = values["ConnStr_Destination"].ToString();
            var ConnStr_Source = values["ConnStr_Source"].ToString();
            var SourceTypeName = values["SourceTypeName"].ToString();
            var SourceCmdText = values["SourceCmdText"].ToString();
            var bTruncateExtractTable = Convert.ToBoolean(values["bTruncateExtractTable"]);
            var ExtractTable = values["ExtractTable"].ToString();
            var BulkUploadLoadSize = Convert.ToInt32(values["BulkUploadLoadSize"]);
            var SourceQueryMapping = values["SourceQueryMapping"].ToString();
            var ExtractStartTime = values["ExtractStartTime"].ToString();
            var ExtractEndTime = values["ExtractEndTime"].ToString();
            var ExtractJobID = Convert.ToInt32(values["ExtractJobID"]);
            var ExtractControlID = Convert.ToInt32(values["ExtractControlID"]);
            var ManagerGUID = values["ManagerGUID"].ToString();


            checkConnection(ConnStr_Destination);
            dsb.ConnectionString = ConnStr_Destination;
            dsb.Remove("Provider");
            ConnStr_Destination = dsb.ConnectionString + ";Connect Timeout=0";

            checkConnection(ConnStr_Source, SourceTypeName);
            dsb.ConnectionString = ConnStr_Source;
            dsb.Remove("Provider");

            ConnStr_Source = dsb.ConnectionString;
            if (SQL.Contains(SourceTypeName))
            {
                ConnStr_Source += ";Connect Timeout=0";
            }

            //This is to handle if the source query uses any paramters. All evaluted paramters
            //must be part if the readlonly collection

            string tempSourceCmdText = SourceCmdText.Replace("'", "''");

            ExtractLogMessage(ConnStr_ETLReference,
               ExtractJobID,
               1,
               0,
               "Log ExtractExecution.BulkUpload",
               tempSourceCmdText,
               0,
               "",
               null,
               ExtractStartTime,
               ExtractEndTime,
               ExtractEndTime,
               ExtractControlID,
               ManagerGUID
               );

            TruncateTable(ExtractTable, ConnStr_Destination, bTruncateExtractTable);

            int rowsCopied = PerformSQLBulkCopy(ConnStr_Source, SourceCmdText, ConnStr_Destination, BulkUploadLoadSize, ExtractTable, SourceQueryMapping, SourceTypeName);
            values.Add("rowsCopied", rowsCopied);
        }

        private void ExtractLogMessage(string ConnStr_ETLReference,
                     int ExtractJobID,
                     int SuccessFlag,
                     int CompletedFlag,
                     string MessageSource,
                     string Message,
                     int RowsExtracted,
                     string ExtractPackagePathAndName,
                     string StartTime,
                     string ExtractStartTime,
                     string ExtractEndTime,
                     string NextExtractStartTime,
                     int ExtractControlID,
                     string ManagerGUID
          )
        {
            StartTime = StartTime == null ? "NULL" : "'" + StartTime + "'";
            ExtractStartTime = ExtractStartTime == null ? "NULL" : "'" + ExtractStartTime + "'";
            ExtractEndTime = ExtractEndTime == null ? "NULL" : "'" + ExtractEndTime + "'";
            NextExtractStartTime = NextExtractStartTime == null ? "NULL" : "'" + NextExtractStartTime + "'";

            string sqlCmdLog = "[spInsertExtractExecutionLog] "
                 + "@ExtractJobID = " + ExtractJobID + ", "
                 + "@StartTime = " + StartTime + ","
                 + "@ManagerGUID = '" + ManagerGUID + "', "
                 + "@SuccessFlag = " + SuccessFlag + ", "
                 + "@CompletedFlag = " + CompletedFlag + ", "
                 + "@MessageSource = '" + MessageSource + "', "
                 + "@Message = '" + Message + "', "
                 + "@RowsExtracted = " + RowsExtracted + ", "
                 + "@ExtractStartTime = " + ExtractStartTime + ", "
                 + "@ExtractEndTime = " + ExtractEndTime + ", "
                 + "@NextExtractStartTime = " + NextExtractStartTime + ", "
                 + "@ExtractPackagePathAndName = '" + ExtractPackagePathAndName + "', "
                 + "@ExtractControlID = " + ExtractControlID;

            //string sqlCmdLog = "[spInsertExtractExecutionLog] "
            //     + "@ExtractJobID = " + ExtractJobID + ", "
            //     + "@StartTime = NULL,"
            //     + "@ManagerGUID = '" + ManagerGUID + "', "
            //     + "@SuccessFlag = 1, "
            //     + "@CompletedFlag = 0, "
            //     + "@MessageSource = 'Log ExtractExecution.BulkUpload', "
            //     + "@Message = '" + tempSourceCmdText + "', "
            //     + "@RowsExtracted = 0, "
            //     + "@ExtractStartTime = '" + ExtractEndTime + "', "
            //     + "@ExtractEndTime = '" + ExtractEndTime + "', "
            //     + "@NextExtractStartTime = '" + ExtractEndTime + "', "
            //     + "@ExtractPackagePathAndName = '', "
            //     + "@ExtractControlID = " + ExtractControlID;

            var dsb = new DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr_ETLReference;
            dsb.Remove("Provider");
            ConnStr_ETLReference = dsb.ConnectionString;

            var SrcConn = new SqlConnection(ConnStr_ETLReference);

            var sCommand = new SqlCommand(sqlCmdLog, SrcConn);
            SrcConn.Open();
            sCommand.ExecuteNonQuery();
            SrcConn.Close();
            SrcConn.Dispose();
        }

        public void StartManagerPackageExtract(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }

        #endregion

        #region Delivery Manager
        public void StartManagerPackageDelivery(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }
        #endregion

        #region Summary Manager

        public void StartManagerPackageSummary(string server, string packageLocationlocation, string ConnStr_ETLReference)
        {
            throw new NotImplementedException();
        }
        #endregion

        #region Common

        public int PerformSQLBulkCopy(string ConnStr_Source, string SourceCmdText, string ConnStr_Destination,
         int BulkUploadLoadSize, string DestinatonTable, List<Mapping> Mappings, string SourceTypeName)
        {

            int result = 0;
            var bulkCopy = new SqlBulkCopy(ConnStr_Destination, SqlBulkCopyOptions.KeepIdentity);

            bulkCopy.BatchSize = BulkUploadLoadSize;
            bulkCopy.BulkCopyTimeout = 0;
            bulkCopy.DestinationTableName = DestinatonTable;

            BulkCopyMapping(bulkCopy, Mappings);

            if (SQL.Contains(SourceTypeName))
            {
                var SrcConn = new SqlConnection(ConnStr_Source);
                var sCommand = new SqlCommand(SourceCmdText, SrcConn);
                sCommand.CommandTimeout = 0;

                SrcConn.Open();
                var SqlReader = sCommand.ExecuteReader();
                bulkCopy.WriteToServer(SqlReader);

                SqlReader.Close();
                SrcConn.Close();
                SrcConn.Dispose();
                result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);
                bulkCopy.Close();
            }
            else if (ORACLE.Contains(SourceTypeName))
            {

                var SrcConn = new OracleConnection(ConnStr_Source);
                SrcConn.Open();

                var sCommand = new OracleCommand(SourceCmdText, SrcConn);
                sCommand.CommandTimeout = 0;
                sCommand.Parameters.Add("cur", OracleDbType.RefCursor);
                sCommand.Parameters["cur"].Direction = ParameterDirection.Output;
                sCommand.ExecuteNonQuery();

                var SqlReader = sCommand.ExecuteReader();
                bulkCopy.WriteToServer(SqlReader);

                SqlReader.Close();
                SrcConn.Close();
                SrcConn.Dispose();

                result = SqlBulkCopyExtension.RowsCopiedCount(bulkCopy);
                bulkCopy.Close();
            }

            return result;
        }

        public List<Mapping> SplitMappings(string SourceQueryMapping)
        {
            var lMapping = new List<Mapping>();
            if ((!String.IsNullOrEmpty(SourceQueryMapping)) && SourceQueryMapping.Contains(";"))
            {
                List<string> lSourceQueryMapping = new List<string>(SourceQueryMapping.Split(';'));

                foreach (var map in lSourceQueryMapping)
                {
                    List<string> cols = new List<string>(map.Split(','));
                    if (cols.Count == 2)
                    {
                        if (String.IsNullOrEmpty(cols[0]) || String.IsNullOrEmpty(cols[1]))
                        {
                            throw new System.Exception("Bulk copy SourceQueryMapping has an invalid pair (empty string)");
                        }
                        lMapping.Add(new Mapping()
                        {
                            SourceMap = cols[0].Trim(),
                            DestinationMap = cols[1].Trim()
                        });

                    }
                    else
                    {
                        throw new System.Exception("Bulk copy SourceQueryMapping has an invalid pair (count does not match): " + map);
                    }
                }
            }
            return lMapping;
        }

        public void checkConnection(string ConnStr, string SourceTypeName = "OLEDB")
        {
            var dsb = new DbConnectionStringBuilder();

            dsb.ConnectionString = ConnStr;
            dsb.Remove("Provider");
            if (SQL.Contains(SourceTypeName))
            {

                var con = new SqlConnection(dsb.ConnectionString);
                con.Open();
                con.Close();
            }
            else if (ORACLE.Contains(SourceTypeName))
            {
                var con = new OracleConnection(dsb.ConnectionString);
                con.Open();
                con.Close();
            }

        }

        public void BulkCopyMapping(SqlBulkCopy bulkCopy, List<Mapping> Mappings)
        {
            foreach (var mapping in Mappings)
            {
                var m = new SqlBulkCopyColumnMapping();

                bulkCopy.ColumnMappings.Add(new
                 SqlBulkCopyColumnMapping(mapping.OledSourceMap, mapping.DestinationMap));
            }
        }

        public string GetDtexecLocation(bool RunAs32Bit, string ConnStr_ETLReference)
        {
            var ds = GetData(ConnStr_ETLReference, "EXEC spGetDtexecLocation @RunAs32Bit='" + RunAs32Bit.ToString() + "'");

            string dtexec = ds.Tables[0].Rows[0]["LocationDtexec"].ToString();

            if (dtexec.Contains(" "))
            {
                dtexec = "\"" + dtexec + "\"";
            }
            return dtexec;
        }
        public void StartSSISPackage(string command, int ControlID, bool RunAs32Bit, string ConnStr_ETLReference)
        {
            string dtexec = GetDtexecLocation(RunAs32Bit, ConnStr_ETLReference);

            ProcessInformation p = new ProcessInformation() { ControlID = ControlID };
            ProcessControl.Add(ControlID, p);
            p.EnableRaisingEvents = true;
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;
            p.Exited += p_Exited;

            p.OutputDataReceived += new DataReceivedEventHandler
            (
                delegate(object sender, DataReceivedEventArgs e)
                {
                    ((ProcessInformation)sender).OutputMessage += e.Data + Environment.NewLine;
                }
            );

            p.StartInfo.FileName = dtexec;
            p.StartInfo.Arguments = command;
            p.StartInfo.CreateNoWindow = true;

            SSISPackagesCount++;

            p.Start();
            p.BeginOutputReadLine();
        }

        void p_Exited(object sender, EventArgs e)
        {
            SSISPackagesCount--;
        }

        public string GenerateListToString(List<string> list)
        {
            string str = list.Aggregate(string.Empty, (current, item) => current + (item + ","));
            if (str.Length > 1)
            {
                str = str.Substring(0, str.Length - 1);
            }

            return str;
        }

        public DataSet GetData(string connnectionString, string sqlQuery)
        {
            var dsb = new System.Data.Common.DbConnectionStringBuilder();

            dsb.ConnectionString = connnectionString;
            dsb.Remove("Provider");

            var ds = new DataSet();
            using (var conn = new SqlConnection(dsb.ConnectionString))
            {
                var adapter = new SqlDataAdapter(sqlQuery, conn);
                adapter.Fill(ds);
            }

            return ds;
        }

        public void TruncateTable(string Table, string ConnStr_Destination, bool bTruncateTable)
        {
            if (bTruncateTable)
            {
                var trcConn = new SqlConnection(ConnStr_Destination);

                var trcCommand = new SqlCommand("TRUNCATE TABLE " + Table, trcConn);
                trcCommand.CommandTimeout = 0;

                trcConn.Open();
                trcCommand.ExecuteNonQuery();
                trcConn.Close();
                trcConn.Dispose();
            }
        }
        #endregion

    }

    public class ProcessInformation : Process
    {
        public int ControlID { get; set; }
        public string OutputMessage { get; set; }
    }
    static class SqlBulkCopyExtension
    {
        public static int RowsCopiedCount(this SqlBulkCopy bulkCopy)
        {
            FieldInfo _rowsCopiedField = typeof(SqlBulkCopy).GetField("_rowsCopied", BindingFlags.NonPublic | BindingFlags.GetField | BindingFlags.Instance);
            return (int)_rowsCopiedField.GetValue(bulkCopy);
        }

    }
    public class Mapping
    {
        public string SourceMap { get; set; }
        public string OledSourceMap
        {
            get { return SourceMap.Replace(".", ""); }
        }
        public string DestinationMap { get; set; }
    }

}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Settings.get_Default():ST_060ace5346c44cdaa03356127c150a18.Properties.Sett" +
    "ings")]

namespace ST_060ace5346c44cdaa03356127c150a18.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Reflection;
using System.Collections.Generic;
using DWReferenceHelper;
#endregion

namespace ST_060ace5346c44cdaa03356127c150a18
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            string SourceCmdText = "";
            ScriptHelper sh = new ScriptHelper();
            Dictionary<string,object> values = new Dictionary<string, object>();
            try
            {
                #region Get Variables
                
                Variables vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ConnStr_ETLReference", ref vars);
                values.Add("ConnStr_ETLReference", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ConnStr_Staging", ref vars);
                values.Add("ConnStr_Staging", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ConnStr_Source", ref vars);
                values.Add("ConnStr_Source", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::StagingTable", ref vars);
                values.Add("StagingTable", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::SourceQuery", ref vars);
                values.Add("SourceQuery", vars[0].Value.ToString());
                string SourceQuery = values["SourceQuery"].ToString();
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::SourceQueryMapping", ref vars);
                values.Add("SourceQueryMapping", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::BulkUploadLoadSize", ref vars);
                values.Add("BulkUploadLoadSize", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::StagingControlID", ref vars);
                values.Add("StagingControlID", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::StagingJobID", ref vars);
                values.Add("StagingJobID", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ExtractStartTime", ref vars);
                values.Add("ExtractStartTime", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::ExtractEndTime", ref vars);
                values.Add("ExtractEndTime", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::StartTime", ref vars);
                values.Add("StartTime", vars[0].Value.ToString());
                vars.Unlock();

                Dts.VariableDispenser.LockOneForRead("User::ManagerGUID", ref vars);
                values.Add("ManagerGUID", vars[0].Value.ToString());
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("User::TruncateStagingTable", ref vars);
                values.Add("TruncateStagingTable", vars[0].Value);
                vars.Unlock();

                Dts.VariableDispenser.LockOneForRead("User::SourceTypeName", ref vars);
                values.Add("SourceTypeName", vars[0].Value.ToString());
                vars.Unlock();

                #endregion
                
                //This is to handle if the source query uses any paramters. All evaluted paramters
                //must be part if the readlonly collection
                Variables varsSourceQueryEvaluated = null;
                Dts.VariableDispenser.LockOneForRead("User::SourceQueryEvaluated", ref varsSourceQueryEvaluated);
                var SourceQueryEvaluated = varsSourceQueryEvaluated[0];
                SourceQueryEvaluated.EvaluateAsExpression = false;
                SourceQueryEvaluated.Expression = SourceQuery;
                SourceQueryEvaluated.EvaluateAsExpression = true;
                SourceCmdText = SourceQueryEvaluated.Value.ToString();
                values.Add("SourceCmdText", SourceCmdText);

                sh.MainStagingExecutionSqlBulkUpload(values);

                vars = null;
                Dts.VariableDispenser.LockOneForWrite("StagingRowCount", ref vars);
                vars[0].Value = Convert.ToInt32(values["rowsCopied"]);
                vars.Unlock();

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (System.Exception ex)
            {
                Variables vars = null;
                Dts.VariableDispenser.LockOneForRead("System::TaskName", ref vars);
                string TaskName = vars[0].Value.ToString();
                vars.Unlock();

                Dts.Events.FireError(1, TaskName, SourceCmdText + Environment.NewLine + ex.ToString(), "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_5a193d68be4542dba52142cc59f526b2.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{388C6745-019E-4432-9EAA-E733BA085E5F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_060ace5346c44cdaa03356127c150a18</RootNamespace>
    <AssemblyName>ST_5a193d68be4542dba52142cc59f526b2</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
   <Reference Include="Oracle.DataAccess, Version=4.112.3.0, Culture=neutral, PublicKeyToken=89b483f429c47342, processorArchitecture=AMD64" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.IO.Compression" />
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="ScriptHelper.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_060ace5346c44cdaa03356127c150a18</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_060ace5346c44cdaa03356127c150a18</msb:DisplayName>
		<msb:ProjectId>{FE3479CE-B21E-4A92-BB57-7CBD3C16E4E4}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_5a193d68be4542dba52142cc59f526b2.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="ScriptHelper.cs"/>
		<msb:Breakpoint Include="7db792d416f84d17aae401cff272b822">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>109</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="4b4b79c397dd46fd8155de641ca43689">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>202</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="8c87a3169bae4f23b15fa9c092cdcd4c">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>182</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="aff97883859a4b7c873489c05324356c">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>191</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_060ace5346c44cdaa03356127c150a18")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_060ace5346c44cdaa03356127c150a18")]
[assembly: AssemblyCopyright("Copyright @  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_060ace5346c44cdaa03356127c150a18.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_060ace5346c44cdaa03356127c150a18.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_060ace5346c44cdaa03356127c150a18.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_5a193d68be4542dba52142cc59f526b2.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAHmO7VMAAAAAAAAAAOAAAiELAQsAAI4AAAAIAAAAAAAAbqwA
AAAgAAAAwAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAAAAAQAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAABisAABTAAAAAMAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAOAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAdIwAAAAgAAAAjgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAwAAAAAYAAACQAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAOAAAAACAAAAlgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABQ
rAAAAAAAAEgAAAACAAUACE0AABBfAAABAAAAAAAAAFBMAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CewUAAAQqIgIDfQUAAAQqHgJ7BgAABCoiAgN9BgAABCoe
AnsHAAAEKiICA30HAAAEKh4CewgAAAQqIgIDfQgAAAQqHgJ7CQAABCoiAgN9CQAABCoeAnsKAAAE
KiICA30KAAAEKh4CewsAAAQqIgIDfQsAAAQqABswEQDFAwAAAQAAEQNyAQAAcG8PAAAKbxAAAAoK
A3INAABwbw8AAApvEAAACgsDcj8AAHBvDwAACm8QAAAKDANyTQAAcG8PAAAKbxAAAAoNA3JxAABw
bw8AAApvEAAAChMEA3KbAABwbw8AAApvEAAAChMFA3LHAABwbw8AAApvEAAAChMGAhEEctsAAHAG
ck0BAHAoEQAACig2AAAGEwcRB28SAAAKFm8TAAAKbxQAAApvFQAAChMUOFsBAAARFG8WAAAKdCMA
AAETCBEIclEBAHBvFwAACm8QAAAKEQhyZwEAcG8XAAAKbxAAAAoRCHJ/AQBwbxcAAApvEAAAChEI
cpMBAHBvFwAACm8QAAAKKBgAAAoTCQIRCSgXAAAGEwoRCjnxAAAAEQpvGQAAChY+5AAAAAIRBBEK
BgkoGAAABm8aAAAKExU4sAAAABIVKBsAAAoTCwIRBHKhAQBwEQuMJgAAASgcAAAKKDYAAAYTBxEH
bxIAAAoWbxMAAApvFAAAChZvHQAACnIhAgBwbxcAAAooHgAAChMMAhEMEQQoMgAABhMNAgcIEQsR
BREGEQQoFAAABhMOAhEEFRcWcjcCAHARDXKdAgBwEQ4oEQAAChYWFhZyoQIAcBEGcqECAHByoQIA
cBELEQUoKAAABgIRDhELEQwRBCgzAAAGEhUoHwAACjpE////3g4SFf4WBAAAG28gAAAK3BEUbyEA
AAo6mf7//94VERR1KAAAARMWERYsBxEWbyAAAArcAhEEBiglAAAGbxoAAAoTFzivAAAAEhcoGwAA
ChMPAhEEcqEBAHARD4wmAAABKBwAAAooNgAABhMHEQdvEgAAChZvEwAACm8UAAAKFm8dAAAKciEC
AHBvFwAACigeAAAKExACERARBCgyAAAGExECBwgRDxEFEQYRBCgUAAAGExICEQQVFxZyowIAcBER
cp0CAHAREigRAAAKFhYWFnKhAgBwEQZyoQIAcHKhAgBwEQ8RBSgoAAAGAhESEQ8WEQQoMwAABhIX
KB8AAAo6Rf///94YEhf+FgQAABtvIAAACtwgiBMAACgiAAAKFgJ7AgAABDLtAnsBAAAEbyMAAApv
JAAAChMYK0cSGCglAAAKExMRE28mAAAKLDUCEQQVFhdyCwMAcBETb0EAAAYWFhYWcqECAHARBnKh
AgBwcqECAHARE28/AAAGEQUoKAAABhIYKCcAAAotsN4OEhj+FgcAABtvIAAACtwCEQQVFxdybwMA
cHKhAgBwFhYWFnKhAgBwEQZyoQIAcHKhAgBwFREFKCgAAAYqAAAAQWQAAAIAAAA8AQAAwwAAAP8B
AAAOAAAAAAAAAAIAAACtAAAAbgEAABsCAAAVAAAAAAAAAAIAAABAAgAAwgAAAAIDAAAOAAAAAAAA
AAIAAAA1AwAAVAAAAIkDAAAOAAAAAAAAABMwEQDbAQAAAgAAEQNycQAAcG8PAAAKbxAAAAoKA3KZ
AwBwbw8AAApvEAAACgsDcrkDAHBvDwAACm8QAAAKDANy1wMAcG8PAAAKKCgAAAoNA3LxAwBwbw8A
AApvEAAAChMEA3LHAABwbw8AAApvEAAAChMFA3INBABwbw8AAApvEAAAChMGA3IvBABwbw8AAApv
EAAAChMHA3JNBABwbw8AAAooKAAAChMIA3JvBABwbw8AAApvEAAAChMJA3KHBABwbw8AAAooKAAA
ChMKA3KtBABwbw8AAApvEAAAChMLA3LHBABwbw8AAApvEAAAChMMA3LtBABwbw8AAAooHgAAChMN
A3IXBQBwbw8AAApvEAAAChMOcykAAAoTDwIHcjUFAHAoMAAABhEPB28qAAAKEQ9yQQUAcG8rAAAK
JhEPbywAAApyUwUAcCgtAAAKCwIIEQ4oMAAABhEPCG8qAAAKEQ9yQQUAcG8rAAAKJhEPbywAAAoM
AnsEAAAEEQ5vLgAACiwMCHJTBQBwKC0AAAoMAgYJFxZyeQUAcBEEFhYWFnKhAgBwEQURBhEHEQgR
CSgoAAAGAhELBxENKDcAAAYCCBEEBxEKEQsRDBEOKB4AAAYTEANy4QUAcBEQjCYAAAFvLwAACioA
GzARAB8DAAADAAARA3JxAABwbw8AAApvEAAACgoDcmcBAHBvDwAACm8QAAAKCwNyTQAAcG8PAAAK
bxAAAAoMA3L3BQBwbw8AAApvEAAACg0DcpkDAHBvDwAACm8QAAAKEwQDcscEAHBvDwAACm8QAAAK
EwUDch0GAHBvDwAACigwAAAKEwYDcgEAAHBvDwAACm8QAAAKEwcDcjkGAHBvDwAACm8QAAAKEwgD
cq0EAHBvDwAACm8QAAAKEwkDcl8GAHBvDwAACm8QAAAKEwoDcnUGAHBvDwAACigeAAAKEwsDcocE
AHBvDwAACigoAAAKEwwDcscAAHBvDwAACm8QAAAKEw0DcokGAHBvDwAACm8QAAAKEw4Dck0EAHBv
DwAACigoAAAKEw8Dcm8EAHBvDwAACm8QAAAKExADcu0EAHBvDwAACigeAAAKExECAhEIBxEHKBMA
AAYoCgAABnMpAAAKExICEQRyNQUAcCgwAAAGERIRBG8qAAAKERJyQQUAcG8rAAAKJhESbywAAApy
UwUAcCgtAAAKEwQCEQUoLwAABhMTAgIoCQAABnKxBgBwKDEAAAooFwAABhMUAhEUCAkRDigZAAAG
ExURFTksAQAAERVvMgAAChMYOAQBAAARGG8zAAAKExYCBigcAAAGExcCEhYoNAAACigMAAAGAgYR
FxcWcskGAHByoQIAcBYWFhYCKAsAAAYRDXKhAgBwcqECAHARDxEQKCgAAAYCAgIoCwAABhEXAigJ
AAAGKCIAAAYoDgAABgICKA0AAAYRBREJEQQRBigmAAAGJgIRCREEEREoNwAABgIRFwIoDQAABhEE
ERMRDBEJAigJAAAGEQsRBiggAAAGAhEEEQkRFygaAAAGAhEEEQoRFygbAAAGAgYRFxcXciEHAHBy
oQIAcAIoAQAABgIoAwAABgIoBQAABgIoBwAABgIoCwAABhENcqECAHByoQIAcBEPERAoKAAABhEY
byEAAAo68P7//945ERgsBxEYbyAAAArcAgYVFxdygQcAcHKhAgBwFhYWFnKhAgBwEQ1yoQIAcHKh
AgBwEQ8RECgoAAAGKgBBHAAAAgAAAM4BAAAXAQAA5QIAAAwAAAAAAAAAEzAEABgAAAAEAAARAyg1
AAAKCgYWBgRvNgAACm83AAAKCwcqJgMEBSg4AAAKKgAAEzADAG0AAAAFAAARHw2NAQAAAQsHFnLf
BwBwogcXA6IHGHLtBwBwogcZBKIHGnIFCABwogcbBYwmAAABogcccsIIAHCiBx0OBKIHHnIiCQBw
ogcfCQ4FogcfCnKMCQBwogcfCw4GogcfDHIECgBwogcoOQAACgoGKgAAABMwBQBFAAAABgAAER2N
HQAAAQsHFnLfBwBwogcXBKIHGHLtBwBwogcZA6IHGnIMCgBwogcbBaIHHHKrCgBwogcoOgAACgoC
BhUWBSgzAAAGKgAAABMwBAAwAAAABwAAEQMoNQAACgoGBG82AAAKCwYGBG82AAAKF1gGbzsAAAoX
WQdZbzcAAAoMCCg8AAAKKt4Cbz0AAApyzQoAcG8+AAAKLSMCbz0AAApy1QoAcG8+AAAKLRECbz0A
AApy3QoAcG8+AAAKKhcqEzADAD8AAAAIAAARAyg/AAAKLDUDcuUKAHAoQAAACn4MAAAELREU/gY5
AAAGc0EAAAqADAAABH4MAAAEKAEAACsoAgAAKwoGKhQqMgJyTQQAcCgDAAArKhswBAAZAQAACQAA
EXMpAAAKCgYDbyoAAAoGckEFAHBvKwAACiZyoQIAcAsEb0UAAAoTCCs4EggoRgAACgwCCA4EKBIA
AAYNByhHAAAKLQwHcu0KAHAoLQAACgsHcvMKAHAJcvMKAHAoSAAACgsSCChJAAAKLb/eDhII/hYM
AAAbbyAAAArcByhHAAAKOpIAAAAbjR0AAAETCREJFnL5CgBwohEJFwWiEQkYclcLAHCiEQkZB6IR
CRpydQsAcKIRCSg6AAAKEwQCAxEEKDYAAAYTBREFbxIAAApvSgAAChYxQhEFbxIAAAoWbxMAAAoT
BhEGKEsAAAp+DQAABC0RFP4GOgAABnNMAAAKgA0AAAR+DQAABCgEAAArEwcRBygFAAArKhQqAAAA
ARAAAAIAJwBFbAAOAAAAABswBABxAAAACgAAEXNOAAAKCgNvRQAAChMFKzsSBShGAAAKCwUCBwQo
EgAABihPAAAKLCMCBwQoFgAABgwoUAAACg0IDgQJKFEAAAoTBAYRBAdvUgAAChIFKEkAAAotvN4O
EgX+FgwAABtvIAAACtwGb1MAAAoWMQIGKhQqAAAAARAAAAIADgBIVgAOAAAAABMwBQCRAAAACwAA
EQIDGo0BAAABCwcWcnsLAHCiBxcEogcYcscLAHCiBxkFjCYAAAGiByg5AAAKKDYAAAYKBm8SAAAK
b0oAAAoWMUYGbxIAAAoWbxMAAApvFAAACm9KAAAKFjEtAgZvEgAAChZvEwAACm8UAAAKFm8dAAAK
cvULAHBvFwAACigoAAAKKAgAAAYqcgsMAHBzVAAACnoAAAATMAUA7wAAAAsAABECAxqNAQAAAQsH
FnJjDABwogcXBKIHGHJvDABwogcZBYwmAAABogcoOQAACig2AAAGCgZvEgAACm9KAAAKFj6hAAAA
Bm8SAAAKFm8TAAAKbxQAAApvSgAAChY+hQAAAAIGbxIAAAoWbxMAAApvFAAAChZvHQAACnKTDABw
bxcAAAooKAAACigCAAAGAgZvEgAAChZvEwAACm8UAAAKFm8dAAAKcq0MAHBvFwAACigoAAAKKAQA
AAYCBm8SAAAKFm8TAAAKbxQAAAoWbx0AAApyxQwAcG8XAAAKKCgAAAooBgAABipy3QwAcHNUAAAK
egATMAMAZgAAAAwAABECA3JPDQBwKDYAAAYKBm8SAAAKb0oAAAoWMUAGbxIAAAoWbxMAAApvFAAA
Cm9KAAAKFjEnBm8SAAAKFm8TAAAKbxQAAAoWbx0AAApypQ0AcG8XAAAKKCgAAAoqcrENAHBzVAAA
CnoAABMwAwCmAAAABAAAEQUoRwAACjqaAAAABChHAAAKLUkEKFUAAAosQQIFKCMAAAYEKDUAAAoo
MQAACgoGKFUAAAosBgYoVgAACgQGKFcAAAoEKFgAAAooPwAACiwMBChYAAAKFyhZAAAKAyhHAAAK
LUEDKFUAAAosOQIFKCMAAAYDKDUAAAooMQAACgsHKFUAAAosBgcoVgAACgMCBSgjAAAGAyg1AAAK
KDEAAAooVwAACioAABMwCAAaAAAADQAAEQIOBigvAAAGCgIDBAUOBA4FBg4HKC4AAAYqAAAbMAUA
0QAAAA4AABFzKQAACgoGBG8qAAAKBnJBBQBwbysAAAomBm8sAAAKclMFAHAoLQAAChACAgUOBg4H
DggoIQAABgQXc1oAAAoLBw4Eb1sAAAoHFm9cAAAKBw4Fb10AAAoCBw4GKDEAAAZyEQ4AcAUoWAAA
CiheAAAKDAhzXwAACg0Jb2AAAAoDCXNhAAAKEwQRBG9iAAAKEwUHEQVvYwAACt4MEQUsBxEFbyAA
AArc3gwRBCwHEQRvIAAACtzeCgksBglvIAAACtwHKEQAAAYTBgdvZAAAChEGKgAAAAEoAAACAJAA
CpoADAAAAAACAIcAIagADAAAAAACAHgAPrYACgAAAAAbMAkALAEAAA8AABFyoQIAcAoOBG9lAAAK
EwQrGhIEKGYAAAoLBgdvRwAABnLtCgBwKBEAAAoKEgQoZwAACi3d3g4SBP4WDwAAG28gAAAK3ByN
AQAAARMFEQUWctgOAHCiEQUXBqIRBRgDjCYAAAGiEQUZcugOAHCiEQUaBCg1AAAKohEFG3IcDwBw
ohEFKDkAAAoMAggFBA4FDgYOBA4IDgkoHwAABiYOB3IgDwBwBCg1AAAKKDgAAAoNCShVAAAKLAYJ
KFYAAAoECShXAAAKBChYAAAKKD8AAAosDAQoWAAAChcoWQAACgIoCwAABihoAAAKbz0AAApyNA8A
cChPAAAKLDIOB3IgDwBwAigLAAAGKDUAAAooOAAACg0JKFUAAAosBgkoVgAACgIoCwAABgkoVwAA
CioBEAAAAgAPACc2AA4AAAAAEzAFABUBAAAQAAARc2kAAAoKBnI+DwBwAyg1AAAKchwPAHAoEQAA
Cm9qAAAKJgUsDgZyQg8AcG9qAAAKJisMBnJoDwBwb2oAAAomDgQTBBEEHwkuFBEEHywzHAZykA8A
cG9qAAAKJisrBnK4DwBwb2oAAAomKx0GcuAPAHAOBIxBAAABcgQQAHAoawAACm9qAAAKJhYLK1UG
G40dAAABEwURBRZyCBAAcKIRBRcHF1gTBhIGKGwAAAqiEQUYchAQAHCiEQUZBAdvbQAACm9HAAAG
ohEFGnIUEABwohEFKDoAAApvagAACiYHF1gLBwRvbgAACjKiAyhYAAAKciAQAHAoMQAACgwIc28A
AAoNCQZvEAAACm9wAAAKCW9xAAAKKgAAABMwBACMAQAAEQAAEXKhAgBwCgVyNhAAcChyAAAKEwYS
Bv4WRAAAAW8QAAAKKDgAAAoLAyhoAAAKbz0AAApyNA8AcChPAAAKOf8AAAADFihzAAAKDHKhAgBw
DQhvdAAACm91AAAKFzMUCG90AAAKFm92AAAKb3cAAAoNKxMIb3gAAAoCAwVyShAAcCgkAAAGCReN
QQAAARMHEQcWHy6dEQdveQAACigGAAArGDENAgMFco4QAHAoJAAABgUocgAAChMIEgj+FkQAAAFv
EAAACigxAAAKEwQRBCh7AAAKJggRBCh8AAAKCG94AAAKEQQJKDEAAAoTBREFKFUAAAosOgcPAihs
AAAKGx8wb30AAApyCBEAcAkoEQAACigxAAAKCgcoewAACiYRBQYoVwAAChEEFyhZAAAKK11yDBEA
cBEFKC0AAApzVAAACnoDKDUAAAoXjUEAAAETCREJFh8unREJb3kAAAooBgAAKxgxDQIDBXKOEABw
KCQAAAYHAyg1AAAKKDEAAAoKByh7AAAKJgMGKFcAAAoGKjIDckwRAHAoMQAACioAAAATMAIAPQAA
ABIAABECBCgjAAAGAyg1AAAKKDEAAAoKAyhVAAAKLBUGKFUAAAosBgYoVgAACgMGKFcAAAoFAygt
AAAKc1QAAAp6MgJyTQQAcCgDAAArKgAAEzAFAGUAAAATAAARAgNyWhEAcARyTQEAcCgRAAAKKDYA
AAYKBm8SAAAKb0oAAAoWMT0GbxIAAAoWbxMAAAoLByhLAAAKfg4AAAQtERT+BjsAAAZzTAAACoAO
AAAEfg4AAAQoBAAAKwwIKAUAACsqFCoeAih+AAAKKh4CKH4AAAoqNgIWb38AAApvEAAACipKA29F
AAAGAnseAAAEKE8AAAoqYgMCexwAAAQEb20AAApvRQAABiiAAAAKKgAbMAYA4wIAABQAABEUEwtz
VAAABhMMfoEAAAoKBQsFF41BAAABEw0RDRYfLp0RDW95AAAKKAYAACsXMTIFF41BAAABEw4RDhYf
Lp0RDm95AAAKFpoKBReNQQAAARMPEQ8WHy6dEQ9veQAACheaC3KeEQBwB3J1CwBwBn6BAAAKKIAA
AAotB3KhAgBwKxByWRIAcAZyTQEAcCgRAAAKKEgAAAoMAg4ECCg2AAAGDQlvEgAAChZvEwAACm8U
AAAKKAcAACt+DwAABC0RFP4GPAAABnODAAAKgA8AAAR+DwAABCgIAAArKAIAACsTBAMOBSgnAAAG
EwURDAIEKC8AAAZ9HAAABBcTBhEFb0UAAAoTEDihAAAAFBMHc1YAAAYTCBEIEQx9HQAABBEIEhAo
RgAACn0eAAAEEQx7HAAABBEHLQ8RCP4GVwAABnOFAAAKEwcRBygJAAArFP4BFv4BEwYRBi1THo0d
AAABExERERZyhxIAcKIRERcRCHseAAAEohERGHL1EgBwohERGQSiEREacksTAHCiEREbA6IRERxy
ZxMAcKIRER0FohERKDoAAApzVAAACnoSEChJAAAKOlP////eDhIQ/hYMAAAbbyAAAArcFxMJEQx7
HAAABG9lAAAKExIrYhISKGYAAAoTChEEEQpvSAAABm8uAAAKEwkRCS1FHI0dAAABExMRExZyixMA
cKIRExcRCm9IAAAGohETGHLbEwBwohETGQSiERMachEUAHCiERMbBaIREyg6AAAKc1QAAAp6EhIo
ZwAACi2V3g4SEv4WDwAAG28gAAAK3BEFbxkAAAoRDHscAAAEb24AAAoxBRYTBitsEQURCy0PEQz+
BlUAAAZzhwAAChMLEQsoCgAAKygLAAArLEkWEwYcjR0AAAETFBEUFnJLFABwohEUFwOiERQYcq0U
AHCiERQZAhEFKDUAAAaiERQacscUAHCiERQbBKIRFCg6AAAKc1QAAAp6EQYsAxEJKhYqAAEcAAAC
AAQBtLgBDgAAAAACANcBb0YCDgAAAAATMAQASQAAABUAABF+gQAACgoCc4oAAAoLB2+LAAAKJQom
B2+MAAAKc40AAAoMBihHAAAKLR0GF41BAAABEwQRBBYDnREEb3kAAAoNCAlvjgAACggqAAAAEzAE
AMMBAAAWAAARDgZyTQEAcHLzCgBwb48AAAoKHxmNAQAAARMFEQUWchsVAHCiEQUXBIwmAAABohEF
GHJ5FQBwohEFGQ4QohEFGnKfFQBwohEFGwWMJgAAAaIRBRxyxRUAcKIRBR0OBIwmAAABohEFHnLt
FQBwohEFHwkOBaIRBR8KchcWAHCiEQUfCwaiEQUfDHI3FgBwohEFHw0OCowmAAABohEFHw5yWxYA
cKIRBR8PDgeMJgAAAaIRBR8QcoEWAHCiEQUfEQ4IjCYAAAGiEQUfEnKlFgBwohEFHxMOCYwmAAAB
ohEFHxRyyRYAcKIRBR8VDguiEQUfFnI7FwBwohEFHxcODKIRBR8Ycl8XAHCiEQUoOQAACgsODShH
AAAKLA4HcmcXAHAoLQAACgsrEwdynRcAcA4Ncl8XAHAoSAAACgsODShHAAAKLA4HcskXAHAoLQAA
CgsrEwdy+xcAcA4Ocl8XAHAoSAAACgsHciMYAHAOD4wmAAABKGsAAAoLcykAAAoMCANvKgAACghy
QQUAcG8rAAAKJghvLAAAChABA3OQAAAKDQcJc5EAAAoTBAlvYAAAChEEb5IAAAomCW+TAAAKCW+U
AAAKKgATMA8A1QEAABcAABFzKQAACgoDcnEAAHBvDwAACm8QAAAKCwNyTRgAcG8PAAAKbxAAAAoM
A3K5AwBwbw8AAApvEAAACg0DchcFAHBvDwAACm8QAAAKEwQDcvEDAHBvDwAACm8QAAAKEwUDcnUY
AHBvDwAACigeAAAKEwYDcqEYAHBvDwAACm8QAAAKEwcDcocEAHBvDwAACigoAAAKEwgDcscEAHBv
DwAACm8QAAAKEwkDcg0EAHBvDwAACm8QAAAKEwoDci8EAHBvDwAACm8QAAAKEwsDcrsYAHBvDwAA
CigoAAAKEwwDctUYAHBvDwAACigoAAAKEw0Dcm8EAHBvDwAACm8QAAAKEw4CCHI1BQBwKDAAAAYG
CG8qAAAKBnJBBQBwbysAAAomBm8sAAAKclMFAHAoLQAACgwCCREEKDAAAAYGCW8qAAAKBnJBBQBw
bysAAAomBm8sAAAKDQJ7BAAABBEEby4AAAosDAlyUwUAcCgtAAAKDREFck0BAHBy8woAcG+PAAAK
Ew8CBxEMFxZy9xgAcBEPFnKhAgBwFBEKEQsRCxENEQ4oKgAABgIRBwgRBig3AAAGAgkRBQgRCBEH
EQkRBCgeAAAGExADcuEFAHAREIwmAAABby8AAAoqAAAAEzADAL4BAAAYAAARDgksE3JNAQBwDgly
TQEAcCgRAAAKKwVyNxkAcBAJDgosE3JNAQBwDgpyTQEAcCgRAAAKKwVyNxkAcBAKDgssE3JNAQBw
DgtyTQEAcCgRAAAKKwVyNxkAcBALDgwsE3JNAQBwDgxyTQEAcCgRAAAKKwVyNxkAcBAMHxqNAQAA
ARMEEQQWckEZAHCiEQQXBIwmAAABohEEGHKfGQBwohEEGQ4JohEEGnK/GQBwohEEGw4OohEEHHKf
FQBwohEEHQWMJgAAAaIRBB5yxRUAcKIRBB8JDgSMJgAAAaIRBB8Kcu0VAHCiEQQfCw4FohEEHwxy
FxYAcKIRBB8NDgaiEQQfDnLjGQBwohEEHw8OB4wmAAABohEEHxByDRoAcKIRBB8RDgqiEQQfEnI7
GgBwohEEHxMOC6IRBB8UcmUaAHCiEQQfFQ4MohEEHxZymxoAcKIRBB8XDgiiEQQfGHLdGgBwohEE
HxkODYwmAAABohEEKDkAAAoKcykAAAoLBwNvKgAACgdyQQUAcG8rAAAKJgdvLAAAChABA3OQAAAK
DAYIc5EAAAoNCG9gAAAKCW+SAAAKJghvkwAACghvlAAACioac5UAAAp6GnOVAAAKehpzlQAACnoA
EzADACUBAAAZAAARFgoFF3NaAAAKCwcOBG9bAAAKBxZvXAAACgcOBW9dAAAKAgcOBigxAAAGAnsE
AAAEDgdvLgAACixRA3OQAAAKDAQIc5EAAAoNCRZvlgAACghvYAAACglvlwAAChMEBxEEb2MAAAoR
BG+YAAAKCG+TAAAKCG+UAAAKByhEAAAGCgdvZAAACjiZAAAAAnsDAAAEDgdvLgAACjmHAAAAA3OZ
AAAKEwURBW9gAAAKBBEFc5oAAAoTBhEGFm+WAAAKEQZvmwAACnINGwBwH3lvnAAACiYRBm+bAAAK
cg0bAHBvnQAAChhvngAAChEGb5IAAAomEQZvnwAAChMHBxEHb2MAAAoRB2+YAAAKEQVvkwAAChEF
b5QAAAoHKEQAAAYKB29kAAAKBioAAAAbMAQABAEAABoAABFzoAAACgoDKEcAAAo68QAAAANyFRsA
cG+hAAAKOeEAAAADF41BAAABEwURBRYfO50RBW95AAAKc6IAAAoLB29FAAAKEwY4nAAAABIGKEYA
AAoMCBeNQQAAARMHEQcWHyydEQdveQAACnOiAAAKDQlvGQAAChgzXgkWb6MAAAooRwAACi0OCRdv
owAACihHAAAKLAtyGRsAcHNUAAAKegZzSgAABhMEEQQJFm+jAAAKb6QAAApvRgAABhEECRdvowAA
Cm+kAAAKb0kAAAYRBG+lAAAKKxFymRsAcAgoLQAACnNUAAAKehIGKEkAAAo6WP///94OEgb+FgwA
ABtvIAAACtwGKgEQAAACAEUAr/QADgAAAAATMAIAZwAAABsAABFzKQAACgoGA28qAAAKBnJBBQBw
bysAAAomAnsEAAAEBG8uAAAKLBkGbywAAApzkAAACgsHb2AAAAoHb5MAAAoqAnsDAAAEBG8uAAAK
LBgGbywAAApzmQAACgwIb2AAAAoIb5MAAAoqABswAwBOAAAAHAAAEQRvZQAACgsrKxIBKGYAAAoK
c6YAAAomA2+nAAAKBm9HAAAGBm9IAAAGc6gAAApvqQAACiYSAShnAAAKLczeDhIB/hYPAAAbbyAA
AArcKgAAARAAAAIABwA4PwAOAAAAABMwBQBlAAAAHQAAEQIEci4cAHAPASiqAAAKck0BAHAoEQAA
Cig2AAAGCgZvEgAAChZvEwAACm8UAAAKFm8dAAAKcnwcAHBvFwAACm8QAAAKCwdynQIAcG+hAAAK
LBFymhwAcAdymhwAcCgRAAAKCwcqigJ0AwAAAiVvQQAABgNvqwAACiisAAAKKBEAAApvQgAABioT
MAMAxgAAAB4AABECBQ4EKDIAAAYKc0MAAAYMCARvQAAABggLAnsBAAAEBAdvrQAACgcXb64AAAoH
b68AAAoWb7AAAAoHb68AAAoXb7EAAAoHb68AAAoXb7IAAAoHAv4GNAAABnOzAAAKb7QAAAoHfhAA
AAQtERT+Bj0AAAZztQAACoAQAAAEfhAAAARvtgAACgdvrwAACgZvtwAACgdvrwAACgNvuAAACgdv
rwAAChdvuQAACgIlewIAAAQXWH0CAAAEB2+6AAAKJgdvuwAACio+AiV7AgAABBdZfQIAAAQqNgID
cp4cAHAoEQAACioTMAQARAAAABIAABEDfoEAAAp+EQAABC0RFP4GPgAABnO8AAAKgBEAAAR+EQAA
BCgMAAArCgZvOwAAChcxEAYWBm87AAAKF1lvNwAACgoGKhswAgBJAAAAHwAAEXMpAAAKCgYDbyoA
AAoGckEFAHBvKwAACiZzvgAACgsGbywAAApzkAAACgwECHO/AAAKDQkHb8AAAAom3goILAYIbyAA
AArcByoAAAABEAAAAgArABI9AAoAAAAAEzACAD0AAAAgAAARBSw5BHOQAAAKCnKiHABwAygtAAAK
BnORAAAKCwcWb5YAAAoGb2AAAAoHb5IAAAomBm+TAAAKBm+UAAAKKgAAABMwAwBuAAAAIQAAEQJz
wQAACn0BAAAEAnONAAAKCgZywhwAcG/CAAAKBnLcHABwb8IAAAoGfQMAAAQCc40AAAoLB3I1BQBw
b8IAAAoHcvQcAHBvwgAACgdy/hwAcG/CAAAKB3ISHQBwb8IAAAoHfQQAAAQCKH4AAAoqHgJ7EgAA
BCoiAgN9EgAABCoeAnsTAAAEKiICA30TAAAEKh4CKMMAAAoqEzADACcAAAAiAAAR0AoAAAEoxAAA
CnIkHQBwICQEAABvxQAACgoGAm/GAAAKpSYAAAEqHgJ7FAAABCoiAgN9FAAABCpaAihFAAAGcjwd
AHByoQIAcG+PAAAKKh4CexUAAAQqIgIDfRUAAAQqHgIofgAACioeAih+AAAKKhMwAgAtAAAAIwAA
EX4WAAAELSByQB0AcNAGAAACKMQAAApvyAAACnPJAAAKCgaAFgAABH4WAAAEKhp+FwAABCoeAoAX
AAAEKhp+GAAABCouc1AAAAaAGAAABCoeAijLAAAKKgAbMAYABwUAACQAABFyoQIAcApzOAAABgtz
zQAACgwUDQIozgAACm/PAAAKcrIdAHASA2/QAAAKCHJxAABwCRaMJgAAAW/RAAAKb9IAAApvEAAA
Cm8vAAAKCW/TAAAKFA0CKM4AAApvzwAACnLoHQBwEgNv0AAACghymQMAcAkWjCYAAAFv0QAACm/S
AAAKbxAAAApvLwAACglv0wAAChQNAijOAAAKb88AAApyFB4AcBIDb9AAAAoIcrkDAHAJFowmAAAB
b9EAAApv0gAACm8QAAAKby8AAAoJb9MAAAoUDQIozgAACm/PAAAKcj4eAHASA2/QAAAKCHKtBABw
CRaMJgAAAW/RAAAKb9IAAApvEAAACm8vAAAKCW/TAAAKFA0CKM4AAApvzwAACnJkHgBwEgNv0AAA
CghyiB4AcAkWjCYAAAFv0QAACm/SAAAKbxAAAApvLwAACghyiB4AcG8PAAAKbxAAAAoTBAlv0wAA
ChQNAijOAAAKb88AAApyoB4AcBIDb9AAAAoIcscEAHAJFowmAAABb9EAAApv0gAACm8QAAAKby8A
AAoJb9MAAAoUDQIozgAACm/PAAAKctIeAHASA2/QAAAKCHKHBABwCRaMJgAAAW/RAAAKb9IAAApv
EAAACm8vAAAKCW/TAAAKFA0CKM4AAApvzwAACnIEHwBwEgNv0AAACghyTQQAcAkWjCYAAAFv0QAA
Cm/SAAAKbxAAAApvLwAACglv0wAAChQNAijOAAAKb88AAApyMh8AcBIDb9AAAAoIctcDAHAJFowm
AAABb9EAAApv0gAACm8QAAAKby8AAAoJb9MAAAoUDQIozgAACm/PAAAKclgfAHASA2/QAAAKCHIN
BABwCRaMJgAAAW/RAAAKb9IAAApvEAAACm8vAAAKCW/TAAAKFA0CKM4AAApvzwAACnKGHwBwEgNv
0AAACghyLwQAcAkWjCYAAAFv0QAACm/SAAAKbxAAAApvLwAACglv0wAAChQNAijOAAAKb88AAApy
sB8AcBIDb9AAAAoIcscAAHAJFowmAAABb9EAAApv0gAACm8QAAAKby8AAAoJb9MAAAoCKM4AAApv
zwAACnLQHwBwEgNv0AAACghybwQAcAkWjCYAAAFv0QAACm/SAAAKbxAAAApvLwAACglv0wAAChQN
AijOAAAKb88AAApy9B8AcBIDb9AAAAoIcu0EAHAJFowmAAABb9EAAApv0gAACm8vAAAKCW/TAAAK
AijOAAAKb88AAApyKiAAcBIDb9AAAAoIchcFAHAJFowmAAABb9EAAApv0gAACm8QAAAKby8AAAoJ
b9MAAAoUEwUCKM4AAApvzwAACnJUIABwEgVv0AAAChEFFowmAAABb9EAAAoTBhEGFm/UAAAKEQYR
BG/VAAAKEQYXb9QAAAoRBm/SAAAKbxAAAAoKCHLxAwBwBm8vAAAKBwhvEAAABhQNAijOAAAKb88A
AApyiiAAcBIDb9YAAAoJFowmAAABb9EAAAoIcuEFAHBvDwAACigoAAAKjCYAAAFv1wAACglv0wAA
CgIozgAAChZv2AAACt52EwcUEwgCKM4AAApvzwAACnKqIABwEghv0AAAChEIFowmAAABb9EAAApv
0gAACm8QAAAKEwkRCG/TAAAKAijOAAAKb9kAAAoXEQkGKKwAAAoRB28QAAAKKBEAAApyoQIAcBZv
2gAACiYCKM4AAAoXb9gAAAreACoAQRwAAAAAAAASAAAAfgQAAJAEAAB2AAAAOAAAAR4CKNsAAAoq
tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nvcmxp
YiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1
YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAA
AABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAKwWAAAjfgAA
GBcAAJwdAAAjU3RyaW5ncwAAAAC0NAAAzCAAACNVUwCAVQAAEAAAACNHVUlEAAAAkFUAAIAJAAAj
QmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+iUzABYAAAEAAAB2AAAACwAAAB4AAABXAAAArAAAANsA
AAADAAAAQQAAACQAAAAFAAAADwAAABsAAAAUAAAAAQAAAAoAAAABAAAAAwAAAAwAAAAAAAoAAQAA
AAAABgAQAQkBCgAqARcBCgBHATIBDgCnAX4BBgDDAQkBBgADA+gCBgAxA+gCCgAxBOgCBgA+BAkB
EgAvBhkGBgBuBgkBEgCWBg0GBgCCCXEJBgCzCZ4JBgC2DZwNBgDhDc8NBgD4Dc8NBgAVDs8NBgA0
Ds8NBgBNDs8NBgBmDs8NBgCBDs8NBgCcDs8NBgC1Ds8NBgDuDs4OBgAOD84OBgAsD84OBgBjD84O
BgCQDwkBEgCeDw0GEgC9Dw0GEgDHDw0GEgDiDw0GBgAQEP0PEgA2EA0GBgBIED4QHwBfEAAABgBq
EAkBBgBwEAkBBgCLEAkBBgCwEJ8QGwC9EAAAqwBfEAAAEgAAEe0QBgBfEegCBgBtEegCBgDjEQkB
BgAiEj4QFgBLEj8SBgBWEugCGgDTEg0GGgD5Eg0GGgANEw0GGgA0Ew0GBgB+EwkBBgCZEwkBBgCj
Ez4QEgDFExkGEgAsFBoUEgA8FO0QEgBOFBoUEgBbFBoUEgB5FA0GBgCyFKYUBgDLFAkBBgDQFD4Q
BgDdFD4QBgDyFAkBHgA2FSAVIgA+FSAVIgBJFSAVBgB3FVgVIgCMFSAVBgDBFT4QHgDfFSAVBgBB
F/0PBgBhFwkBBgBsFz4QBgB5Fz4QEgCeFxkGEgCsFxkGEgC3F+0QCgDnF9EXBgDxFwkBEgAcGBkG
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
AQBwCgAAAgCDCgAAAwCPCgAAAQCVCgAAAgCuCgAAAwC1CgAABADGCgAABQDSCgAABgDcCgAAAQDx
CgAAAgD4CgAAAwDcCgAAAQBRCgAAAgBeCgAAAQAQCwAAAQDcCgAAAgAkCwAAAwAyCwAABABeCgAA
AQAkCwAAAgBeCgAAAwA4CwAABABECwAAAQBYCwAAAgBoCwAAAwB8CwAAAQBYCwAAAgCJCwAAAwB8
CwAAAQDcCgAAAQDpBwAAAgABCAAAAwDVBwAAAQCUCwAAAgCjCwAAAwCxCwAABADFCwAABQDYCwAA
BgDlCwAABwD4CwAAAQCjCwAAAgCxCwAAAwAHDAAABADFCwAABQAUDAAABgAlDAAABwAuDAAACAA4
DAAAAQB8CwAAAgABCAAAAwBYCwAABAAlDAAABQDFCwAABgBoCwAABwDVBwAACAAuDAAACQA4DAAA
AQAHDAAAAgAlDAAAAwAuDAAABAA4DAAAAQDpBwAAAgB8CwAAAwDVBwAAAQDVBwAAAQDpBwAAAgDV
BwAAAwBGDAAAAQDcCgAAAgCPCgAAAQBTDAAAAgDlCwAAAwDYCwAABABYCwAABQBcDAAAAQBTDAAA
AgBmDAAAAQDcCgAAAgB8CwAAAwBwDAAABAB8DAAABQCKDAAABgCYDAAABwClBwAACACyBwAACQC+
BwAACgDKBwAACwCgDAAADADSCgAADQCvDAAADgDADAAADwC1CgAAEADGCgAAAQBKCgAAAQDcCgAA
AgDPDAAAAwBwDAAABAB8DAAABQCKDAAABgCYDAAABwDcDAAACADqDAAACQDSCgAACgCvDAAACwDA
DAAADAAEDQAADQAZDQAADgDGCgAAAQDxCgAAAgD4CgAAAwDcCgAAAQDxCgAAAgD4CgAAAwDcCgAA
AQDxCgAAAgD4CgAAAwDcCgAAAQCUCwAAAgCjCwAAAwCxCwAABADFCwAABQAqDQAABgAlDAAABwD4
CwAAAQDlCwAAAQA6DRAQAgD4CwAAAQBCDQAAAgAlDAAAAQBLDQAAAgDcCgAAAQBWDQAAAgCTCAAA
AwBLDQAABADcCgAAAQBeDQAAAgBlDQAAAQBnDQAAAQBsDQAAAgB+DQAAAQCHDQAAAgCxCwAAAwCN
DQAAAQDeEQAAAQCMEgAAAQCMEgAAAQACFwAAAQBeDQAAAgBlDQAAAQD4GgAAAgAAGwAAAQBECgAA
AQBECgAAAQBCDQAAAQBECgAAAQBECgAAAQBECgAAAQCQFgAAAgCSFgAAAQDfFnkAtAYgAIEAtAYg
AIkAtAYgAJEAtAYgAJkAtAYgAKEAtAYgAKkAtAYgALEAtAYgALkAtAYgAMEAtAYgAMkAtAYXANEA
tAZ5AdkAtAZ5AeEAtAZ5AQwAfg/eAQkAhw8cAOkAlw/lAWEAsg/sAfEAfg/xAfkA2Q/3AQkBHBD9
AREBKhADAhkBfg8HAiEBTRAMAhQAVRATABwAHBAgAiQAKhAxAukAlw82AgEBfg88AjkBeBBDAiQA
ghBIAkEBlxB5AREBghBIAkkBtxBMAiwAzRBZAjQAHBBuAjwAKhCDAhEA2BATADwAghBIAjkB5RDB
AmEBtAZ5AWEBGhEgAGEBLxHGAmEBNhEcAOkAlw/LAhQASxHRAgwAVBHXAjkBWBH1AiEBTRDLAkQA
HBACA0wAKhAxAlQAfBGDAiEBhhFqA+kAkhGSAOkAnhFvAyEBTRDlAekAlw96A+kAlw+GA+kAqBET
ACEBsxFqA+kAERIcAOkAGRLGAoEBLBKYA4EBEwSmA1wAtAa1A4kBZBK7A4kBahLZA5kB5RIEBBQA
HBAgAmQAKhAxAukA6xKYA+kAlw8MAmQAghBIAgkBVRATAKEBJxMZBGwAtAa1A7EBVhMwBEQAtAZ5
AekAXRNuBHEAaRObAUkAjhN0BEQAVBHXAkQAVRATAMEBtAYgAMkBLBKYA8kBqBOgBMkBrxOlBCEB
tBNqA4EBqBOrBFEAtAa6BFEA2BMXAFEA5hMXAFEA+hMgAOkAExTCBNkBtAYgAOEBSRR5AekBtAbI
BOkBaxTQBFEAhRTWBFEAkxR5AXQAHBAgAnwAKhAxAnwAghBIAiEBmRRqAwECtAZ5AQECwBQQBekA
lw8XBTEBhw8cAHQAfg8eBXQAVRATABECtAYgABkC6BQgABkCkxR5ASEC9xQzBSkCSRQ5BTECnBVD
BYQAVRATAIQAfg8eBUkCqBUcADEClxB5AekAtRVXBYkBuxVeBYEBzxVqBVkC8RVxBekABBZ5BQkA
tAZ5ARkBfg/PBekALRduBOkAOxd9AYkBTRfUBYwAtAa1A4kBVhPyBZQAtAa1A4kBUhcdBpwAtAa1
A4kBZBJABokBaBdbBnECtAYgAHkChBccAHkCkxR5ARQAtAZ5ARQAjReqBukAlhdCAIECtAYgAIkC
tAbFBpECwRcTAOEBkxR5AZkClxB5AaECtAZ5AZECCRgXAIkCaxQCB7ECkxR5AbkCtAYgAMECtAYR
B8ECmxgZB8kCVBEfB8kCfg8pB+EC5hgwB8ECaxQ3B3QAtAZ5AekASxHGAhQAtAaqBhQAfg8eBekA
BRkcAHQAVBFVB/kCtAZ5AVEARhmHB/kCtAY7AQEDVBGNBwkDhw8cABED0BkcACED2Rm1BywAVBHX
AhEA5Rm5BxEADhq+BykDHBq5BykDMBq5BykDSxq5BzEDtAa1AxEAchrEBxkDtAa1AxEAfRrLBykD
lBogACkDoRogACkDrxq5BxEAwhpIAhEAyBp5AaQAtAa1A4kBLRvtB2EAtAZ5ATkDtAbFBkEDUhsM
CCwAtAZ5ARQAVBFVBxEAtAZ5AUkDbhs2CEkDlxs/CFkDoBtJCGkDtAZ5AUkDzxtUCGkAtAZaCHkD
tAZnCBkAtAZ5AYkDtAZ5AQwAtAZ5ASEARRx7CJEDnhyBCJkDvhyHCKEDfg+QCKkDfBEDAqED1hx5
AakD3Ry5B6kD9hwgAJkDBR2HCKkDFR2XCJEDHx0XAJEDQh2cCLEDTR2iCCEAtAZ5AQgAaADCAQgA
bADHAQ4ALQLMASAAcwDHAS4AYwBhCS4AWwBYCS4AawDHAS4ACwDICC4AEwASCS4AGwA7CS4AIwA7
CS4AKwA7CS4AMwASCS4AOwBBCS4AQwA7CUAAcwDHAWAAcwDHAYAAcwDHAYMAawDHAaAAcwDHAaEA
cwDHAcAAcwDHAcEAcwDHAcMAOwbHAeAAcwDHAeEAcwDHAQABcwDHAQEBcwDHAQMBYwbHASABcwDH
ASEBcwDHAUABcwDHAUEBcwDHAUMBcwDHAWABcwDHAWEBcwDHAWMBcwDHAYABcwDHAYEBcwDHAaAB
cwDHAaEBcwDHAakBUwZuCMABcwDHAcEBcwDHAckBUwZuCOEBcwDHAQECcwDHASECcwDHAUECcwDH
AWECcwDHAYECcwDHAaECcwDHAQEDcwDHASAHcwDHAUAHcwDHAWAHcwDHAYAHcwDHAaAHcwDHAcAH
cwDHAeAHcwDHAQAIcwDHASAIcwDHAUAIcwDHAYAIawDHAaAIcwDHAcAIcwDHAQAJcwDHASAJcwDH
AYgC3wIqA3UDgAOMA5ID6gNSBH4ElASbBLEE3QT/BCQFfwWUBZgFZwa1Bs0G3QbzBj0HWwd7B5YH
ogfSBxIIIAgpCE4IYgirCAIAAQADAAgABQAKAAYADQAHAA8AAAClB4ABAACyB4ABAAC+B4ABAADK
B4ABAADVB4QBAADpB4QBAAABCIQBAACTCIABAACdCIQBAABKCYQBAABUCYQBAABiCYQBAACCCaYB
AAD7CasBAAAfCrkBAgABAAMAAQACAAMAAgADAAUAAQAEAAUAAQAGAAcAAgAFAAcAAgAHAAkAAQAI
AAkAAgAJAAsAAQAKAAsAAgALAA0AAQAMAA0AAQAOAA8AAgANAA8AAQBAABEAAgA/ABEAAgBBABMA
AQBCABMAAQBGABUAAgBFABUAAgBHABcAAQBJABkAAgBIABkAAgBMABsAAgBNAB0AAQBOAB0AAgBP
AB8A1wEUAhoCKgJRAmUCegL6AhMDIQOtAxIEJgTwBPcETgXoBRQGNwbkBwSAAAABAAAA3BS0UQAA
AAAAAD8PAAAEAAAAAAAAAAAAAAABAAABAAAAAAQAAAAAAAAAAAAAAAEACQEAAAAACwAAAAAAAAAA
AAAACgBfAQAAAAAEAAAAAAAAAAAAAAABAA0GAAAAAAQAAAAAAAAAAAAAAAEAMxIAAAAABAAAAAAA
AAAAAAAAAQC1EgAAAAAEAAAAAAAAAAAAAAABAP8UAAAAAAQAAAAAAAAAAAAAAAEAIBUAAAAAAgBw
AAEAAAAAAAAACAc3GAAAAAALAAAAAAAAAAAAAAAKAE0cAAAAAAAAAAABAAAAVx0AAAkACAAKAAIA
CwACAIUA1QOHANUDiQAOBJsASwSHAA4E9QDVAwUB4gUJAQ0GDQEyBhEB1QMTAdUDewEHCAAAADxN
b2R1bGU+AFNUXzVhMTkzZDY4YmU0NTQyZGJhNTIxNDJjYzU5ZjUyNmIyLmRsbABTY3JpcHRIZWxw
ZXIARFdSZWZlcmVuY2VIZWxwZXIAUHJvY2Vzc0luZm9ybWF0aW9uAFNxbEJ1bGtDb3B5RXh0ZW5z
aW9uAE1hcHBpbmcAUmVzb3VyY2VzAFNUXzA2MGFjZTUzNDZjNDRjZGFhMDMzNTYxMjdjMTUwYTE4
LlByb3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF8wNjBhY2U1MzQ2YzQ0Y2RhYTAzMzU2
MTI3YzE1MGExOABTY3JpcHRSZXN1bHRzAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkRp
YWdub3N0aWNzAFByb2Nlc3MAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5n
c0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AZ2V0
X1Jvd3NJbnNlcnRlZABzZXRfUm93c0luc2VydGVkAGdldF9Sb3dzRGVsZXRlZABzZXRfUm93c0Rl
bGV0ZWQAZ2V0X1Jvd3NVcGRhdGVkAHNldF9Sb3dzVXBkYXRlZABnZXRfUm93c1N0YWdlZABzZXRf
Um93c1N0YWdlZABnZXRfU3VpdGVGb2xkZXJMb2NhdGlvbgBzZXRfU3VpdGVGb2xkZXJMb2NhdGlv
bgBnZXRfdW5Qcm9jZXNzZWRGaWxlRnVsbE5hbWUAc2V0X3VuUHJvY2Vzc2VkRmlsZUZ1bGxOYW1l
AGdldF9JblByb2Nlc3NlZEZpbGVGdWxsTmFtZQBzZXRfSW5Qcm9jZXNzZWRGaWxlRnVsbE5hbWUA
U3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMARGljdGlvbmFyeWAyAFByb2Nlc3NDb250cm9sAFNT
SVNQYWNrYWdlc0NvdW50AExpc3RgMQBPUkFDTEUAU1FMAE1haW5TdGFnaW5nTWFuYWdlclByb2Nl
c3NGaWxlcwBNYWluU3RhZ2luZ0V4ZWN1dGlvblNxbEJ1bGtVcGxvYWQATWFpblN0YWdpbmdFeGVj
dXRpb25GaWxlQnVsa1VwbG9hZABHZXRQYWNrYWdlTmFtZQBHZXRTdWl0ZUZvbGRlckxvY2F0aW9u
AENyZWF0ZVN0YWdpbmdFeGVjdXRpb25Db21tYW5kAFN0YXJ0TWFuYWdlclBhY2thZ2VTdGFnaW5n
AEdldFRpbWVTdGFtcABHZXRGaWxlcwBHZXRTdGFnaW5nQ29udHJvbElEcwBTb3J0ZWRMaXN0YDIA
RGF0ZVRpbWUAR2V0T3JkZXJGaWxlcwBSb3dDb3VudFN0YWdlZABNZXJnZURhdGEAR2V0U3RhZ2lu
Z0pvYklEAENsZWFuVXBGaWxlcwBQZXJmb3JtU1FMQnVsa0NvcHkAUGVyZm9ybUZpbGVCdWxrQ29w
eQBQcm9jZXNzRmlsZQBDcmVhdGVTaGVtYUluaUZpbGUAbW92ZUZpbGVUb0luUHJvY2VzcwBnZXRG
YWlsZWREaXIATW92ZVRvVW5Qcm9jZXNzZWRUb0ZhaWxlZERpcgBHZXROZXh0UnVuRGF0ZVRpbWVT
dGFnaW5nQ29udHJvbElEAENoZWNrRmlsZUhlYWRlcnNBbmRDb2x1bW5zAFJlYWRGaWxlSGVhZGVy
AFN0YWdpbmdMb2dNZXNzYWdlAE1haW5FeHRyYWN0TWFuYWdlckJ1bGtVcGxvYWQARXh0cmFjdExv
Z01lc3NhZ2UAU3RhcnRNYW5hZ2VyUGFja2FnZUV4dHJhY3QAU3RhcnRNYW5hZ2VyUGFja2FnZURl
bGl2ZXJ5AFN0YXJ0TWFuYWdlclBhY2thZ2VTdW1tYXJ5AFNwbGl0TWFwcGluZ3MAY2hlY2tDb25u
ZWN0aW9uAFN5c3RlbS5EYXRhAFN5c3RlbS5EYXRhLlNxbENsaWVudABTcWxCdWxrQ29weQBCdWxr
Q29weU1hcHBpbmcAR2V0RHRleGVjTG9jYXRpb24AU3RhcnRTU0lTUGFja2FnZQBFdmVudEFyZ3MA
cF9FeGl0ZWQAR2VuZXJhdGVMaXN0VG9TdHJpbmcARGF0YVNldABHZXREYXRhAFRydW5jYXRlVGFi
bGUALmN0b3IAPFJvd3NJbnNlcnRlZD5rX19CYWNraW5nRmllbGQAPFJvd3NEZWxldGVkPmtfX0Jh
Y2tpbmdGaWVsZAA8Um93c1VwZGF0ZWQ+a19fQmFja2luZ0ZpZWxkADxSb3dzU3RhZ2VkPmtfX0Jh
Y2tpbmdGaWVsZAA8U3VpdGVGb2xkZXJMb2NhdGlvbj5rX19CYWNraW5nRmllbGQAPHVuUHJvY2Vz
c2VkRmlsZUZ1bGxOYW1lPmtfX0JhY2tpbmdGaWVsZAA8SW5Qcm9jZXNzZWRGaWxlRnVsbE5hbWU+
a19fQmFja2luZ0ZpZWxkAFJvd3NJbnNlcnRlZABSb3dzRGVsZXRlZABSb3dzVXBkYXRlZABSb3dz
U3RhZ2VkAFN1aXRlRm9sZGVyTG9jYXRpb24AdW5Qcm9jZXNzZWRGaWxlRnVsbE5hbWUASW5Qcm9j
ZXNzZWRGaWxlRnVsbE5hbWUAZ2V0X0NvbnRyb2xJRABzZXRfQ29udHJvbElEAGdldF9PdXRwdXRN
ZXNzYWdlAHNldF9PdXRwdXRNZXNzYWdlADxDb250cm9sSUQ+a19fQmFja2luZ0ZpZWxkADxPdXRw
dXRNZXNzYWdlPmtfX0JhY2tpbmdGaWVsZABDb250cm9sSUQAT3V0cHV0TWVzc2FnZQBSb3dzQ29w
aWVkQ291bnQAZ2V0X1NvdXJjZU1hcABzZXRfU291cmNlTWFwAGdldF9PbGVkU291cmNlTWFwAGdl
dF9EZXN0aW5hdGlvbk1hcABzZXRfRGVzdGluYXRpb25NYXAAPFNvdXJjZU1hcD5rX19CYWNraW5n
RmllbGQAPERlc3RpbmF0aW9uTWFwPmtfX0JhY2tpbmdGaWVsZABTb3VyY2VNYXAAT2xlZFNvdXJj
ZU1hcABEZXN0aW5hdGlvbk1hcABTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNv
dXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUA
Z2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1
bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AE1haW4AdmFsdWVfXwBTdWNjZXNzAEZhaWx1
cmUAdmFsdWUAdmFsdWVzAGZpbGVGdWxsTmFtZQBmaWxlTmFtZVNlcGFyYXRvcgBGb2xkZXJCYXNl
TG9jYXRpb24ARW52aXJvbm1lbnQAU3VpdGUAU3RhZ2luZ0V4ZWN1dGlvbkxvY2F0aW9uAFNlcnZl
cgBTdGFnaW5nQ29udHJvbElEAE1hbmFnZXJHVUlEAFN0YXJ0VGltZQBDb25uU3RyX0VUTFJlZmVy
ZW5jZQBzZXJ2ZXIAcGFja2FnZUxvY2F0aW9ubG9jYXRpb24Ac3VpdGVGb2xkZXJMb2NhdGlvbgBm
aWxlRnVsbE5hbWVzAHN1aXRlAFBhY2thZ2VOYW1lAGZpbGVUaW1lU3RhbXBGb3JtYXQAQ29ublN0
cl9TdGFnaW5nAFN0YWdpbmdFeHRyYWN0VGFibGUAU3RhZ2luZ0pvYklEAE1lcmdlUXVlcnkAQ29u
blN0cl9Tb3VyY2UAU291cmNlQ21kVGV4dABDb25uU3RyX0Rlc3RpbmF0aW9uAEJ1bGtVcGxvYWRM
b2FkU2l6ZQBTdGFnaW5nVGFibGUAU291cmNlUXVlcnlNYXBwaW5nAFNvdXJjZVR5cGVOYW1lAEZp
bGVGdWxsTmFtZQBEZXN0aW5hdGlvblRhYmxlAE1hcHBpbmdzAEhhc0hlYWRlcgBEZWxpbWl0ZXJD
aGFyAEVycm9yTWVzc2FnZQBmaWxlbmFtZQBEZWxpbWV0ZXIAZGVsaW1pdGVyAFN1Y2Nlc3NGbGFn
AENvbXBsZXRlZEZsYWcATWVzc2FnZVNvdXJjZQBNZXNzYWdlAEFjdHVhbEZpbGVOYW1lAEV4dHJh
Y3RTdGFydFRpbWUARXh0cmFjdEVuZFRpbWUARXh0cmFjdEpvYklEAFJvd3NFeHRyYWN0ZWQARXh0
cmFjdFBhY2thZ2VQYXRoQW5kTmFtZQBOZXh0RXh0cmFjdFN0YXJ0VGltZQBFeHRyYWN0Q29udHJv
bElEAERlc3RpbmF0b25UYWJsZQBDb25uU3RyAGJ1bGtDb3B5AFJ1bkFzMzJCaXQAY29tbWFuZABz
ZW5kZXIAZQBsaXN0AGNvbm5uZWN0aW9uU3RyaW5nAHNxbFF1ZXJ5AFRhYmxlAGJUcnVuY2F0ZVRh
YmxlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5
c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlv
bkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55
QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJp
YnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUA
QXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMA
Q29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJp
YnV0ZQBFeHRlbnNpb25BdHRyaWJ1dGUAU1RfNWExOTNkNjhiZTQ1NDJkYmE1MjE0MmNjNTlmNTI2
YjIAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUAZ2V0X0l0ZW0AVG9TdHJpbmcAU3RyaW5nAENv
bmNhdABEYXRhVGFibGVDb2xsZWN0aW9uAGdldF9UYWJsZXMARGF0YVRhYmxlAERhdGFSb3dDb2xs
ZWN0aW9uAGdldF9Sb3dzAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAFN5c3RlbS5Db2xsZWN0
aW9ucwBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAGdldF9DdXJyZW50AERhdGFSb3cAU3lzdGVt
LklPAFBhdGgAQ29tYmluZQBnZXRfQ291bnQARW51bWVyYXRvcgBJbnQzMgBDb252ZXJ0AFRvQm9v
bGVhbgBNb3ZlTmV4dABJRGlzcG9zYWJsZQBEaXNwb3NlAFN5c3RlbS5UaHJlYWRpbmcAVGhyZWFk
AFNsZWVwAFZhbHVlQ29sbGVjdGlvbgBnZXRfVmFsdWVzAGdldF9FeGl0Q29kZQBUb0ludDMyAFN5
c3RlbS5EYXRhLkNvbW1vbgBEYkNvbm5lY3Rpb25TdHJpbmdCdWlsZGVyAHNldF9Db25uZWN0aW9u
U3RyaW5nAFJlbW92ZQBnZXRfQ29ubmVjdGlvblN0cmluZwBDb250YWlucwBBZGQAVG9DaGFyAElF
bnVtZXJhdG9yYDEAS2V5VmFsdWVQYWlyYDIAZ2V0X1ZhbHVlAEdldEZpbGVOYW1lAExhc3RJbmRl
eE9mAFN1YnN0cmluZwBnZXRfTGVuZ3RoAEdldEZpbGVOYW1lV2l0aG91dEV4dGVuc2lvbgA8R2V0
RmlsZXM+Yl9fMABmaWxlAEZ1bmNgMgBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVn
YXRlMQBUb0xvd2VyAEVuZHNXaXRoAERpcmVjdG9yeQBFeGlzdHMAU3lzdGVtLkNvcmUAU3lzdGVt
LkxpbnEARW51bWVyYWJsZQBJRW51bWVyYWJsZWAxAFdoZXJlAFRvTGlzdAA8R2V0U3RhZ2luZ0Nv
bnRyb2xJRHM+Yl9fMgByAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGUzAFN5
c3RlbS5EYXRhLkRhdGFTZXRFeHRlbnNpb25zAERhdGFSb3dFeHRlbnNpb25zAEZpZWxkAElzTnVs
bE9yRW1wdHkARGF0YVRhYmxlRXh0ZW5zaW9ucwBFbnVtZXJhYmxlUm93Q29sbGVjdGlvbmAxAEFz
RW51bWVyYWJsZQBFbnVtZXJhYmxlUm93Q29sbGVjdGlvbkV4dGVuc2lvbnMAU2VsZWN0AG9wX0Vx
dWFsaXR5AGdldF9JbnZhcmlhbnRDdWx0dXJlAElGb3JtYXRQcm92aWRlcgBQYXJzZUV4YWN0AEV4
Y2VwdGlvbgBGaWxlAERlbGV0ZQBNb3ZlAEdldERpcmVjdG9yeU5hbWUAU3FsQnVsa0NvcHlPcHRp
b25zAHNldF9CYXRjaFNpemUAc2V0X0J1bGtDb3B5VGltZW91dABzZXRfRGVzdGluYXRpb25UYWJs
ZU5hbWUARm9ybWF0AFN5c3RlbS5EYXRhLk9sZURiAE9sZURiQ29ubmVjdGlvbgBEYkNvbm5lY3Rp
b24AT3BlbgBPbGVEYkNvbW1hbmQAT2xlRGJEYXRhUmVhZGVyAEV4ZWN1dGVSZWFkZXIASURhdGFS
ZWFkZXIAV3JpdGVUb1NlcnZlcgBDbG9zZQBHZXRFeHRlbnNpb24AU3lzdGVtLlRleHQAU3RyaW5n
QnVpbGRlcgBBcHBlbmRMaW5lAENoYXIAU3RyZWFtV3JpdGVyAFRleHRXcml0ZXIAV3JpdGVMaW5l
AEd1aWQATmV3R3VpZABTeXN0ZW0uSU8uQ29tcHJlc3Npb24uRmlsZVN5c3RlbQBTeXN0ZW0uSU8u
Q29tcHJlc3Npb24AWmlwRmlsZQBaaXBBcmNoaXZlAFppcEFyY2hpdmVNb2RlAFN5c3RlbS5Db2xs
ZWN0aW9ucy5PYmplY3RNb2RlbABSZWFkT25seUNvbGxlY3Rpb25gMQBaaXBBcmNoaXZlRW50cnkA
Z2V0X0VudHJpZXMAZ2V0X0Z1bGxOYW1lAFNwbGl0AENvdW50AERpcmVjdG9yeUluZm8AQ3JlYXRl
RGlyZWN0b3J5AFppcEZpbGVFeHRlbnNpb25zAEV4dHJhY3RUb0RpcmVjdG9yeQBQYWRMZWZ0ADxH
ZXROZXh0UnVuRGF0ZVRpbWVTdGFnaW5nQ29udHJvbElEPmJfXzQAQ1MkPD45X19DYWNoZWRBbm9u
eW1vdXNNZXRob2REZWxlZ2F0ZTUAPD5jX19EaXNwbGF5Q2xhc3NiADxDaGVja0ZpbGVIZWFkZXJz
QW5kQ29sdW1ucz5iX184AHQAaQA8PmNfX0Rpc3BsYXlDbGFzc2UAQ1MkPD44X19sb2NhbHNjAGhl
YWRlcgA8Q2hlY2tGaWxlSGVhZGVyc0FuZENvbHVtbnM+Yl9fNwBmADxDaGVja0ZpbGVIZWFkZXJz
QW5kQ29sdW1ucz5iX182AHJvdwBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRl
OQBvcF9JbmVxdWFsaXR5AEVtcHR5AElFbnVtZXJhYmxlAENhc3QARmlyc3RPckRlZmF1bHQARnVu
Y2AzAEFueQBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBSZWFkTGluZQBBZGRSYW5nZQBSZXBsYWNl
AFNxbENvbm5lY3Rpb24AU3FsQ29tbWFuZABEYkNvbW1hbmQARXhlY3V0ZU5vblF1ZXJ5AFN5c3Rl
bS5Db21wb25lbnRNb2RlbABDb21wb25lbnQATm90SW1wbGVtZW50ZWRFeGNlcHRpb24Ac2V0X0Nv
bW1hbmRUaW1lb3V0AFNxbERhdGFSZWFkZXIARGJEYXRhUmVhZGVyAE9yYWNsZS5EYXRhQWNjZXNz
AE9yYWNsZS5EYXRhQWNjZXNzLkNsaWVudABPcmFjbGVDb25uZWN0aW9uAE9yYWNsZUNvbW1hbmQA
T3JhY2xlUGFyYW1ldGVyQ29sbGVjdGlvbgBnZXRfUGFyYW1ldGVycwBPcmFjbGVQYXJhbWV0ZXIA
T3JhY2xlRGJUeXBlAERiUGFyYW1ldGVyAFBhcmFtZXRlckRpcmVjdGlvbgBzZXRfRGlyZWN0aW9u
AE9yYWNsZURhdGFSZWFkZXIAVHJpbQBTcWxCdWxrQ29weUNvbHVtbk1hcHBpbmcAU3FsQnVsa0Nv
cHlDb2x1bW5NYXBwaW5nQ29sbGVjdGlvbgBnZXRfQ29sdW1uTWFwcGluZ3MAQm9vbGVhbgBEYXRh
UmVjZWl2ZWRFdmVudEFyZ3MAPFN0YXJ0U1NJU1BhY2thZ2U+Yl9fMTIARGF0YVJlY2VpdmVkRXZl
bnRIYW5kbGVyAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGUxMwBnZXRfRGF0
YQBnZXRfTmV3TGluZQBzZXRfRW5hYmxlUmFpc2luZ0V2ZW50cwBQcm9jZXNzU3RhcnRJbmZvAGdl
dF9TdGFydEluZm8Ac2V0X1VzZVNoZWxsRXhlY3V0ZQBzZXRfUmVkaXJlY3RTdGFuZGFyZE91dHB1
dABzZXRfUmVkaXJlY3RTdGFuZGFyZEVycm9yAEV2ZW50SGFuZGxlcgBhZGRfRXhpdGVkAGFkZF9P
dXRwdXREYXRhUmVjZWl2ZWQAc2V0X0ZpbGVOYW1lAHNldF9Bcmd1bWVudHMAc2V0X0NyZWF0ZU5v
V2luZG93AFN0YXJ0AEJlZ2luT3V0cHV0UmVhZExpbmUAPEdlbmVyYXRlTGlzdFRvU3RyaW5nPmJf
XzE0AGN1cnJlbnQAaXRlbQBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRlMTUA
QWdncmVnYXRlAFNxbERhdGFBZGFwdGVyAERhdGFBZGFwdGVyAEZpbGwAVHlwZQBSdW50aW1lVHlw
ZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWVsZEluZm8AQmluZGluZ0ZsYWdzAEdldEZpZWxk
AEdldFZhbHVlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAQXNzZW1ibHkAZ2V0X0Fzc2Vt
Ymx5AEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQAuY2N0b3IA
U1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAFNjcmlwdE9iamVjdE1vZGVsAGdldF9E
dHMATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRz
LlJ1bnRpbWUAVmFyaWFibGVEaXNwZW5zZXIAZ2V0X1ZhcmlhYmxlRGlzcGVuc2VyAFZhcmlhYmxl
cwBMb2NrT25lRm9yUmVhZABWYXJpYWJsZQBVbmxvY2sAc2V0X0V2YWx1YXRlQXNFeHByZXNzaW9u
AHNldF9FeHByZXNzaW9uAExvY2tPbmVGb3JXcml0ZQBzZXRfVmFsdWUAc2V0X1Rhc2tSZXN1bHQA
RXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAEZpcmVFcnJvcgBTVF8wNjBhY2U1MzQ2YzQ0
Y2RhYTAzMzU2MTI3YzE1MGExOC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMAAAAAC1MA
dQBpAHQAZQAAMVMAdABhAGcAaQBuAGcARQB4AGUAYwB1AHQAaQBvAG4ATABvAGMAYQB0AGkAbwBu
AAANUwBlAHIAdgBlAHIAACNGAGkAbABlAE4AYQBtAGUAUwBlAHAAYQByAGEAdABvAHIAAClDAG8A
bgBuAFMAdAByAF8ARQBUAEwAUgBlAGYAZQByAGUAbgBjAGUAACtFAHgAZQBjAHUAdABpAG8AbgBJ
AG4AcwB0AGEAbgBjAGUARwBVAEkARAAAE1MAdABhAHIAdABUAGkAbQBlAABxWwBkAGIAbwBdAC4A
WwBzAHAARwBlAHQAUwB0AGEAZwBpAG4AZwBNAGEAbgBhAGcAZQByAEYAbwBsAGQAZQByAEwAbwBj
AGEAdABpAG8AbgBdACAAQABTAHUAaQB0AGUATgBhAG0AZQAgAD0AIAAnAAEDJwABFUIAYQBzAGUA
RgBvAGwAZABlAHIAABdFAG4AdgBpAHIAbwBuAG0AZQBuAHQAABNTAHUAaQB0AGUATgBhAG0AZQAA
DUYAbwBsAGQAZQByAAB/UwBFAEwARQBDAFQAIABSAHUAbgBBAHMAMwAyAEIAaQB0ACAARgBSAE8A
TQAgAFMAdABhAGcAaQBuAGcAQwBvAG4AdAByAG8AbAAgAFcASABFAFIARQAgAFMAdABhAGcAaQBu
AGcAQwBvAG4AdAByAG8AbABJAEQAIAA9ACAAABVSAHUAbgBBAHMAMwAyAEIAaQB0AABlTABvAGcA
IABNAGEAbgBhAGcAZQByACAAUwB0AGEAcgB0AGkAbgBnACAAUwB0AGEAZwBpAG4AZwBFAHgAZQBj
AHUAdABpAG8AbgAgAEYAaQBsAGUAIABFAHgAdAByAGEAYwB0AAADIAAAAQBnTABvAGcAIABNAGEA
bgBhAGcAZQByACAAUwB0AGEAcgB0AGkAbgBnACAAUwB0AGEAZwBpAG4AZwBFAHgAZQBjAHUAdABp
AG8AbgAgAEQAYQB0AGEAIABFAHgAdAByAGEAYwB0AHMAAGNMAG8AZwAgAE0AYQBuAGEAZwBlAHIA
IABFAHIAcgBvAHIAIABMAG8AZwAgAGYAbwByACAAUwB0AGEAZwBpAG4AZwBFAHgAZQBjAHUAdABp
AG8AbgBEAHkAbgBhAG0AaQBjAAApTABvAGcAIABNAGEAbgBhAGcAZQByACAAQwBvAG0AcABsAGUA
dABlAAAfQwBvAG4AbgBTAHQAcgBfAFMAdABhAGcAaQBuAGcAAB1DAG8AbgBuAFMAdAByAF8AUwBv
AHUAcgBjAGUAABlTAHQAYQBnAGkAbgBnAEoAbwBiAEkARAAAG1MAbwB1AHIAYwBlAEMAbQBkAFQA
ZQB4AHQAACFFAHgAdAByAGEAYwB0AFMAdABhAHIAdABUAGkAbQBlAAAdRQB4AHQAcgBhAGMAdABF
AG4AZABUAGkAbQBlAAAhUwB0AGEAZwBpAG4AZwBDAG8AbgB0AHIAbwBsAEkARAAAF00AYQBuAGEA
ZwBlAHIARwBVAEkARAAAJUIAdQBsAGsAVQBwAGwAbwBhAGQATABvAGEAZABTAGkAegBlAAAZUwB0
AGEAZwBpAG4AZwBUAGEAYgBsAGUAACVTAG8AdQByAGMAZQBRAHUAZQByAHkATQBhAHAAcABpAG4A
ZwAAKVQAcgB1AG4AYwBhAHQAZQBTAHQAYQBnAGkAbgBnAFQAYQBiAGwAZQAAHVMAbwB1AHIAYwBl
AFQAeQBwAGUATgBhAG0AZQAAC08ATABFAEQAQgAAEVAAcgBvAHYAaQBkAGUAcgAAJTsAQwBvAG4A
bgBlAGMAdAAgAFQAaQBtAGUAbwB1AHQAPQAwAABnTABvAGcAIABTAHQAYQBnAGkAbgBnAEUAeABl
AGMAdQB0AGkAbwBuACAAQgB1AGwAawBTAFEATAAgAGUAdgBhAGwAdQBhAHQAZQBkACAAUwBvAHUA
cgBjAGUAIABRAHUAZQByAHkAABVyAG8AdwBzAEMAbwBwAGkAZQBkAAAlUwB0AGEAZwBpAG4AZwBQ
AGEAYwBrAGEAZwBlAE4AYQBtAGUAABtEAGUAbABpAG0AaQB0AGUAcgBDAGgAYQByAAAlRgBvAGwA
ZABlAHIAQgBhAHMAZQBMAG8AYwBhAHQAaQBvAG4AABVNAGUAcgBnAGUAUQB1AGUAcgB5AAATSABh
AHMASABlAGEAZABlAHIAACdGAGkAbABlAFQAaQBtAGUAUwB0AGEAbQBwAEYAbwByAG0AYQB0AAAX
VQBuAHAAcgBvAGMAZQBzAHMAZQBkAABXTABvAGcAIABTAHQAYQBnAGkAbgBnAEUAeABlAGMAdQB0
AGkAbwBuACAAUwB0AGEAcgB0AGkAbgBnACAAZgBpAGwAZQAgAHAAcgBvAGMAZQBzAHMALgAAX0wA
bwBnACAAUwB0AGEAZwBpAG4AZwBFAHgAZQBjAHUAdABpAG8AbgAgAEMAbwBtAHAAbABlAHQAZQBk
ACAAZgBpAGwAZQBzACAAcAByAG8AYwBlAHMAcwBlAGQALgAAXUwAbwBnACAAUwB0AGEAZwBpAG4A
ZwBFAHgAZQBjAHUAdABpAG8AbgAgAEMAbwBtAHAAbABlAHQAZQBkACAAbgBvACAAZgBpAGwAZQBz
ACAAZgBvAHUAbgBkAC4AAA0vAFMAUQBMACAAIgAAFyIAIAAvAFMARQBSAFYARQBSACAAIgAAgLsi
ACAALwBNAEEAWABDAE8ATgBDAFUAUgBSAEUATgBUACAAIgAgAC0AMQAgACIAIAAvAEMASABFAEMA
SwBQAE8ASQBOAFQASQBOAEcAIABPAEYARgAgAC8AUwBFAFQAIAAiAFwAUABhAGMAawBhAGcAZQAu
AFYAYQByAGkAYQBiAGwAZQBzAFsAUwB0AGEAZwBpAG4AZwBDAG8AbgB0AHIAbwBsAEkARABdAC4A
VgBhAGwAdQBlACIAOwABXyAALwBTAEUAVAAgACIAXABQAGEAYwBrAGEAZwBlAC4AVgBhAHIAaQBh
AGIAbABlAHMAWwBNAGEAbgBhAGcAZQByAEcAVQBJAEQAXQAuAFYAYQBsAHUAZQAiADsAIgAAaSIA
IAAvAFMARQBUACAAIgBcAFAAYQBjAGsAYQBnAGUALgBWAGEAcgBpAGEAYgBsAGUAcwBbAFUAcwBl
AHIAOgA6AFMAdABhAHIAdABUAGkAbQBlAF0ALgBWAGEAbAB1AGUAIgA7ACIAAHciACAALwBTAEUA
VAAgACIAXABQAGEAYwBrAGEAZwBlAC4AVgBhAHIAaQBhAGIAbABlAHMAWwBDAG8AbgBuAFMAdABy
AF8ARQBUAEwAUgBlAGYAZQByAGUAbgBjAGUAXQAuAFYAYQBsAHUAZQAiADsAIgBcACIAAAdcACIA
IgAAgJ0iACAALwBDAEgARQBDAEsAUABPAEkATgBUAEkATgBHACAATwBGAEYAIAAvAFMARQBUACAA
IgBcAFAAYQBjAGsAYQBnAGUALgBWAGEAcgBpAGEAYgBsAGUAcwBbAEMAbwBuAG4AUwB0AHIAXwBF
AFQATABSAGUAZgBlAHIAZQBuAGMAZQBdAC4AVgBhAGwAdQBlACIAOwAiAFwAIgAAIVwAIgAiACAA
LwBSAEUAUABPAFIAVABJAE4ARwAgAEUAAAdjAHMAdgAAB3oAaQBwAAAHdAB4AHQAAAcqAC4AKgAA
BSwAIAAABScAJwABXUUAWABFAEMAIABkAGIAbwAuAHMAcABHAGUAdABTAHQAYQBnAGkAbgBnAFAA
YQBjAGsAYQBnAGUAcwBGAGkAbABlACAAQABTAHUAaQB0AGUATgBhAG0AZQA9ACcAAR0nACwAIABA
AFAAYQBjAGsAYQBnAGUAcwA9ACcAAQUnACAAAUtTAEUATABFAEMAVAAgAEMATwBVAE4AVAAoACoA
KQAgAEEAUwAgACcAUgBvAHcAcwBTAHQAYQBnAGUAZAAnACAARgBSAE8ATQAgAAEtIABXAEgARQBS
AEUAIABTAHQAYQBnAGkAbgBnAEoAbwBiAEkARAAgAD0AIAAAFVIAbwB3AHMAUwB0AGEAZwBlAGQA
AFdSAG8AdwBDAG8AdQBuAHQAUwB0AGEAZwBlAGQAIAAtACAARgBhAGkAbABlAGQAIAB0AG8AIABy
AGUAdAB1AHIAbgAgAHIAbwB3ACAAYwBvAHUAbgB0AAELRQBYAEUAQwAgAAAjIABAAFMAdABhAGcA
aQBuAGcASgBvAGIASQBEACAAPQAgAAAZUgBvAHcAcwBJAG4AcwBlAHIAdABlAGQAABdSAG8AdwBz
AEQAZQBsAGUAdABlAGQAABdSAG8AdwBzAFUAcABkAGEAdABlAGQAAHFNAGUAcgBnAGUARABhAHQA
YQAgAHMAdABvAHIAZQBkACAAcAByAG8AYwAgAGYAYQBpAGwAZQBkACAAdABvACAAcgBlAHQAdQBy
AG4AIAByAG8AdwAgAGMAbwB1AG4AdAAgAGQAZQB0AGEAaQBsAHMAAFVFAFgARQBDACAAZABiAG8A
LgBzAHAARwBlAHQASgBvAGIASQBEACAAQABUAHkAcABlACAAPQAgACcAUwB0AGEAZwBpAG4AZwBK
AG8AYgBJAEQAJwABC0oAbwBiAEkARAAAX0cAZQB0AFMAdABhAGcAaQBuAGcASgBvAGIASQBEACAA
ZgBhAGkAbABlAGQAIAB0AG8AIAByAGUAdAB1AHIAbgAgAGEAIABTAHQAYQBnAGkAbgBnAEoAbwBi
AEkARAAAgMVQAHIAbwB2AGkAZABlAHIAPQBNAGkAYwByAG8AcwBvAGYAdAAuAEoAZQB0AC4ATwBs
AGUARABiAC4ANAAuADAAOwAgAEQAYQB0AGEAIABTAG8AdQByAGMAZQA9AHsAMAB9ADsARQB4AHQA
ZQBuAGQAZQBkACAAUAByAG8AcABlAHIAdABpAGUAcwA9ACIAVABlAHgAdAA7AEgARABSAD0AWQBF
AFMAOwBGAE0AVAA9AEQAZQBsAGkAbQBpAHQAZQBkACIAAA9TAEUATABFAEMAVAAgAAAzIABBAFMA
IABbAFMAdABhAGcAaQBuAGcASgBvAGIASQBEAF0AIABGAFIATwBNACAAWwAAA10AABNQAHIAbwBj
AGUAcwBzAGUAZAAACS4AegBpAHAAAANbAAAlQwBvAGwATgBhAG0AZQBIAGUAYQBkAGUAcgA9AFQA
cgB1AGUAACdDAG8AbABOAGEAbQBlAEgAZQBhAGQAZQByAD0ARgBhAGwAcwBlAAAnRgBvAHIAbQBh
AHQAPQBDAFMAVgBEAGUAbABpAG0AaQB0AGUAZAAAJ0YAbwByAG0AYQB0AD0AVABhAGIARABlAGwA
aQBtAGkAdABlAGQAACNGAG8AcgBtAGEAdAA9AEQAZQBsAGkAbQBpAHQAZQBkACgAAAMpAAAHYwBv
AGwAAAM9AAALIABUAGUAeAB0AAAVUwBjAGgAZQBtAGEALgBpAG4AaQAAE0kAbgBQAHIAbwBjAGUA
cwBzAABDWgBpAHAAIABmAGkAbABlACAAaABhAHMAIABtAG8AcgBlACAAdABoAGEAbgAgAG8AbgBl
ACAAZgBpAGwAZQA6ACAAAHlmAGkAbABlACAAaABhAHMAIAB0AG8AIABtAGEAbgB5ACAAZgB1AGwA
bABzAHQAbwBwAHMAIABpAG4AIAB0AGgAZQAgAG4AYQBtAGUAIABlAHgAcABlAGMAdABlAGQAIABm
AG8AcgBtAGEAdAAgACoALgAqADoAIAAAA18AAD9VAG4AegBpAHAAcABlAGQAIABmAGkAbABlACAA
YwBhAG4AbgBvAHQAIABiAGUAIABmAG8AdQBuAGQAOgAgAAANRgBhAGkAbABlAGQAAENbAGQAYgBv
AF0ALgBbAHMAcABHAGUAdABTAHQAYQBnAGkAbgBnAFAAYQBjAGsAYQBnAGUAcwBTAHEAbABdACAA
JwABgLlTAEUATABFAEMAVAAgAGMALgBDAE8ATABVAE0ATgBfAE4AQQBNAEUAIABBAFMAIABjAG8A
bAB1AG0AbgBfAG4AYQBtAGUAIABGAFIATwBNACAASQBOAEYATwBSAE0AQQBUAEkATwBOAF8AUwBD
AEgARQBNAEEALgBDAE8ATABVAE0ATgBTACAAYwAgAFcASABFAFIARQAgAGMALgBUAEEAQgBMAEUA
XwBOAEEATQBFACAAPQAgACcAAS0gAEEATgBEACAAIABjAC4AVABBAEIATABFAF8AUwBDAEgARQBN
AEEAPQAnAAFtRgBpAGwAZQAgAGgAZQBhAGQAZQByACAAZgBpAGUAbABkACAAaQBzACAAbgBvAHQA
IABlAHgAaQBzAHQAZQBkAC4AIABGAGkAbABlACAAaABlAGEAZABlAHIAIABmAGkAZQBsAGQAcwA6
ACAAAFUgAGQAbwBlAHMAbgAnAHQAIABlAHgAaQBzAHQAZQBkACAAaQBuACAAcwBvAHUAcgBjAGUA
IABxAHUAZQByAHkAIABtAGEAcABwAGkAbgBnADoAIAABGy4AIABGAGkAbABlACAAbgBhAG0AZQA6
ACAAACMsACAAUwB0AGEAZwBpAG4AZwAgAHQAYQBiAGwAZQA6ACAAAE9TAG8AdQByAGMAZQBxAHUA
ZQByAHkAbQBhAHAAaQBuAGcAIABpAHMAIAB1AG4AdgBhAGwAaQBkAC4AIABNAGEAcABwAGkAbgBn
ADoAIAAANSAAaQBuACAAcwBvAHUAcgBjAGUAIABxAHUAZQByAHkAIABtAGEAcABwAGkAbgBnADoA
IAAAOSAAZABvAGUAcwAgAG4AbwB0ACAAZQB4AGkAcwB0AGUAZAAgAGkAbgAgAHQAYQBiAGwAZQA6
ACAAAGFXAHIAbwBuAGcAIABoAGUAYQBkAGUAcgAgAG8AcgBkAGUAcgAuACAARgBpAGwAZQAgAGgA
ZQBhAGQAZQByACAAZgBpAGUAbABkAHMAIABpAG4AIABmAGkAbABlADoAIAAAGSAAaABhAHMAIABv
AHIAZABlAHIAOgAgAABTIABpAHMAIABuAG8AdAAgAG0AYQB0AGMAaABlAGQAIAB0AG8AIABzAG8A
dQByAGMAZQAgAHEAdQBlAHIAeQAgAG0AYQBwAHAAaQBuAGcAOgAgAABdWwBzAHAASQBuAHMAZQBy
AHQAUwB0AGEAZwBpAG4AZwBFAHgAZQBjAHUAdABpAG8AbgBMAG8AZwBdACAAQABTAHQAYQBnAGkA
bgBnAEoAbwBiAEkARAAgAD0AIAAAJSwAIABAAE0AYQBuAGEAZwBlAHIARwBVAEkARAAgAD0AIAAn
AAElJwAsACAAQABTAHUAYwBjAGUAcwBzAEYAbABhAGcAIAA9ACAAAScsACAAQABDAG8AbQBwAGwA
ZQB0AGUAZABGAGwAYQBnACAAPQAgAAApLAAgAEAATQBlAHMAcwBhAGcAZQBTAG8AdQByAGMAZQAg
AD0AIAAnAAEfJwAsACAAQABNAGUAcwBzAGEAZwBlACAAPQAgACcAASMnACwAIABAAFIAbwB3AHMA
UwB0AGEAZwBlAGQAIAA9ACAAASUsACAAQABSAG8AdwBzAEkAbgBzAGUAcgB0AGUAZAAgAD0AIAAA
IywAIABAAFIAbwB3AHMARABlAGwAZQB0AGUAZAAgAD0AIAAAIywAIABAAFIAbwB3AHMAVQBwAGQA
YQB0AGUAZAAgAD0AIAAAcSwAIABAAFMAdABhAGcAaQBuAGcAUABhAGMAawBhAGcAZQBQAGEAdABo
AEEAbgBkAE4AYQBtAGUAIAA9ACAATgBVAEwATAAsACAAQABBAGMAdAB1AGEAbABGAGkAbABlAE4A
YQBtAGUAIAA9ACAAJwABIycALAAgAEAAUwB0AGEAcgB0AFQAaQBtAGUAIAA9ACAAJwABBycALAAg
AAE1QABFAHgAdAByAGEAYwB0AFMAdABhAHIAdABUAGkAbQBlACAAPQAgAE4AVQBMAEwALAAgAAAr
QABFAHgAdAByAGEAYwB0AFMAdABhAHIAdABUAGkAbQBlACAAPQAgACcAATFAAEUAeAB0AHIAYQBj
AHQARQBuAGQAVABpAG0AZQAgAD0AIABOAFUATABMACwAIAAAJ0AARQB4AHQAcgBhAGMAdABFAG4A
ZABUAGkAbQBlACAAPQAgACcAASlAAFMAdABhAGcAaQBuAGcAQwBvAG4AdAByAG8AbABJAEQAIAA9
ACAAACdDAG8AbgBuAFMAdAByAF8ARABlAHMAdABpAG4AYQB0AGkAbwBuAAArYgBUAHIAdQBuAGMA
YQB0AGUARQB4AHQAcgBhAGMAdABUAGEAYgBsAGUAABlFAHgAdAByAGEAYwB0AFQAYQBiAGwAZQAA
GUUAeAB0AHIAYQBjAHQASgBvAGIASQBEAAAhRQB4AHQAcgBhAGMAdABDAG8AbgB0AHIAbwBsAEkA
RAAAP0wAbwBnACAARQB4AHQAcgBhAGMAdABFAHgAZQBjAHUAdABpAG8AbgAuAEIAdQBsAGsAVQBw
AGwAbwBhAGQAAAlOAFUATABMAABdWwBzAHAASQBuAHMAZQByAHQARQB4AHQAcgBhAGMAdABFAHgA
ZQBjAHUAdABpAG8AbgBMAG8AZwBdACAAQABFAHgAdAByAGEAYwB0AEoAbwBiAEkARAAgAD0AIAAA
HywAIABAAFMAdABhAHIAdABUAGkAbQBlACAAPQAgAAAjLABAAE0AYQBuAGEAZwBlAHIARwBVAEkA
RAAgAD0AIAAnAAEpJwAsACAAQABSAG8AdwBzAEUAeAB0AHIAYQBjAHQAZQBkACAAPQAgAAEtLAAg
AEAARQB4AHQAcgBhAGMAdABTAHQAYQByAHQAVABpAG0AZQAgAD0AIAAAKSwAIABAAEUAeAB0AHIA
YQBjAHQARQBuAGQAVABpAG0AZQAgAD0AIAAANSwAIABAAE4AZQB4AHQARQB4AHQAcgBhAGMAdABT
AHQAYQByAHQAVABpAG0AZQAgAD0AIAAAQSwAIABAAEUAeAB0AHIAYQBjAHQAUABhAGMAawBhAGcA
ZQBQAGEAdABoAEEAbgBkAE4AYQBtAGUAIAA9ACAAJwABLycALAAgAEAARQB4AHQAcgBhAGMAdABD
AG8AbgB0AHIAbwBsAEkARAAgAD0AIAABB2MAdQByAAADOwAAf0IAdQBsAGsAIABjAG8AcAB5ACAA
UwBvAHUAcgBjAGUAUQB1AGUAcgB5AE0AYQBwAHAAaQBuAGcAIABoAGEAcwAgAGEAbgAgAGkAbgB2
AGEAbABpAGQAIABwAGEAaQByACAAKABlAG0AcAB0AHkAIABzAHQAcgBpAG4AZwApAACAk0IAdQBs
AGsAIABjAG8AcAB5ACAAUwBvAHUAcgBjAGUAUQB1AGUAcgB5AE0AYQBwAHAAaQBuAGcAIABoAGEA
cwAgAGEAbgAgAGkAbgB2AGEAbABpAGQAIABwAGEAaQByACAAKABjAG8AdQBuAHQAIABkAG8AZQBz
ACAAbgBvAHQAIABtAGEAdABjAGgAKQA6ACAAAE1FAFgARQBDACAAcwBwAEcAZQB0AEQAdABlAHgA
ZQBjAEwAbwBjAGEAdABpAG8AbgAgAEAAUgB1AG4AQQBzADMAMgBCAGkAdAA9ACcAAR1MAG8AYwBh
AHQAaQBvAG4ARAB0AGUAeABlAGMAAAMiAAADLAAAH1QAUgBVAE4AQwBBAFQARQAgAFQAQQBCAEwA
RQAgAAAZTwBMAEUARABCAF8ATwBSAEEAQwBMAEUAABdPAEQAQgBDAF8ATwBSAEEAQwBMAEUAAAlP
AEQAQgBDAAATTwBMAEUARABCAF8AUwBRAEwAABFPAEQAQgBDAF8AUwBRAEwAABdfAHIAbwB3AHMA
QwBvAHAAaQBlAGQAAAMuAABxUwBUAF8AMAA2ADAAYQBjAGUANQAzADQANgBjADQANABjAGQAYQBh
ADAAMwAzADUANgAxADIANwBjADEANQAwAGEAMQA4AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIA
ZQBzAG8AdQByAGMAZQBzAAA1VQBzAGUAcgA6ADoAQwBvAG4AbgBTAHQAcgBfAEUAVABMAFIAZQBm
AGUAcgBlAG4AYwBlAAArVQBzAGUAcgA6ADoAQwBvAG4AbgBTAHQAcgBfAFMAdABhAGcAaQBuAGcA
AClVAHMAZQByADoAOgBDAG8AbgBuAFMAdAByAF8AUwBvAHUAcgBjAGUAACVVAHMAZQByADoAOgBT
AHQAYQBnAGkAbgBnAFQAYQBiAGwAZQAAI1UAcwBlAHIAOgA6AFMAbwB1AHIAYwBlAFEAdQBlAHIA
eQAAF1MAbwB1AHIAYwBlAFEAdQBlAHIAeQAAMVUAcwBlAHIAOgA6AFMAbwB1AHIAYwBlAFEAdQBl
AHIAeQBNAGEAcABwAGkAbgBnAAAxVQBzAGUAcgA6ADoAQgB1AGwAawBVAHAAbABvAGEAZABMAG8A
YQBkAFMAaQB6AGUAAC1VAHMAZQByADoAOgBTAHQAYQBnAGkAbgBnAEMAbwBuAHQAcgBvAGwASQBE
AAAlVQBzAGUAcgA6ADoAUwB0AGEAZwBpAG4AZwBKAG8AYgBJAEQAAC1VAHMAZQByADoAOgBFAHgA
dAByAGEAYwB0AFMAdABhAHIAdABUAGkAbQBlAAApVQBzAGUAcgA6ADoARQB4AHQAcgBhAGMAdABF
AG4AZABUAGkAbQBlAAAfVQBzAGUAcgA6ADoAUwB0AGEAcgB0AFQAaQBtAGUAACNVAHMAZQByADoA
OgBNAGEAbgBhAGcAZQByAEcAVQBJAEQAADVVAHMAZQByADoAOgBUAHIAdQBuAGMAYQB0AGUAUwB0
AGEAZwBpAG4AZwBUAGEAYgBsAGUAAClVAHMAZQByADoAOgBTAG8AdQByAGMAZQBUAHkAcABlAE4A
YQBtAGUAADVVAHMAZQByADoAOgBTAG8AdQByAGMAZQBRAHUAZQByAHkARQB2AGEAbAB1AGEAdABl
AGQAAB9TAHQAYQBnAGkAbgBnAFIAbwB3AEMAbwB1AG4AdAAAIVMAeQBzAHQAZQBtADoAOgBUAGEA
cwBrAE4AYQBtAGUAAOcWw8sH7xpNqAECRe7cOJEACLd6XFYZNOCJCImEXc2AgMyRAyAACAQgAQEI
AyAADgQgAQEOCAYVEhkCCBIMAgYIBgYVEh0BDgkgAQEVEhkCDhwFIAIODg4GIAMODg4OCSAGDg4O
CA4ODgYgAwEODg4IIAEVEh0BDg4PIAQVEh0BCA4VEh0BDg4OESAEFRIhAhElDhUSHQEODg4OBiAD
AQ4OCAQgAQgOCiAHCA4ODggODg4QIAgIDg4OCA4VEh0BEhQCAxEgCQEIDg4VEh0BEhQIDg4CAwwg
BAEOFRIdARIUAgMGIAMODggOBCABDg4JIAIVEh0BCA4OCCAFAg4ODg4DCQACFRIdAQ4OAxMgEAEO
CAgIDg4ICAgIDg4ODggOESAOAQ4ICAgODggODg4ODggODyAHCA4ODggOFRIdARIUDgkgARUSHQES
FA4FIAIBDg4LIAIBEikVEh0BEhQFIAIOAg4HIAQBDggCDgYgAgEcEi0IIAEOFRIdAQ4GIAISMQ4O
BiADAQ4OAgMgAAECBg4DKAAIAygADgUAAQgSKQMGEjUDBhI5BAAAEjUEAAASOQUAAQESOQQIABI1
BAgAEjkDBhIcBAAAEhwECAASHAMGESQEAAAAAAQBAAAACk8ATABFAEQAQgAGFRIZAg4cBiABEwET
AAYAAw4ODg4EIAASeQUgARJ9CAUgABKAgQUgABKAiQMgABwEIAEcDgcABA4ODg4OBRUSHQEOBRUS
HQEICSAAFRGAlQETAAYVEYCVAQgEIAATAAUAAg4cHAYgARKAjQgEAAECHAMgAAIEAAEBCAcVEhkC
CBIMCyAAFRKAqQITABMBCBUSgKkCCBIMCyAAFRGArQITABMBCBURgK0CCBIMBCAAEwE4BxkODg4O
Dg4OEjESgI0OFRIdAQ4IAg4OCAIODhIMEoCJFRGAlQEIEoChFRGAlQEIFRGArQIIEgwEAAEIHAQg
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WMAAALADAAAAAAAAAAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQC0UdwUAAABALRR3BQ/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsAQQAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAAMAAwADAA
NABiADAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMAA2
ADAAYQBjAGUANQAzADQANgBjADQANABjAGQAYQBhADAAMwAzADUANgAxADIANwBjADEANQAwAGEA
MQA4AAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADUAMwA0ADAALgAy
ADAAOQAxADYAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8ANQBhADEA
OQAzAGQANgA4AGIAZQA0ADUANAAyAGQAYgBhADUAMgAxADQAMgBjAGMANQA5AGYANQAyADYAYgAy
AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIA
aQBnAGgAdAAgAEAAIAAgADIAMAAxADMAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBUAF8ANQBhADEAOQAzAGQANgA4AGIAZQA0ADUANAAyAGQAYgBhADUAMgAxADQA
MgBjAGMANQA5AGYANQAyADYAYgAyAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfADAANgAwAGEAYwBlADUAMwA0ADYAYwA0ADQAYwBkAGEAYQAwADMAMwA1ADYA
MQAyADcAYwAxADUAMABhADEAOAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4ANQAzADQAMAAuADIAMAA5ADEANgAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANQAzADQAMAAuADIAMAA5ADEANgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAwAAABwPAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                  <Breakpoint
                    Enabled="True"
                    File="ScriptMain.cs"
                    Line="109"
                    Column="17" />
                  <Breakpoint
                    Enabled="True"
                    File="ScriptMain.cs"
                    Line="202"
                    Column="17" />
                  <Breakpoint
                    Enabled="True"
                    File="ScriptMain.cs"
                    Line="191"
                    Column="17" />
                  <Breakpoint
                    Enabled="True"
                    File="ScriptMain.cs"
                    Line="182"
                    Column="17" />
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{6B0CB41F-1F90-4CE1-88A2-43AFD4C1FA35}"
              DTS:From="Package\Sequence Container\Sequence Container\Get Variables Values Sql Bulk"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Sequence Container\Sequence Container\Sql Bulk Upload" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:Description="@CheckExtractRowCount == True"
              DTS:DTSID="{199A919D-6E80-4AA3-B88C-63F14E880BA1}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckExtractRowCount == True"
              DTS:From="Package\Sequence Container\Sequence Container\Run Merge Stored Proc"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Sequence Container\Sequence Container\Get ExtractRowCount and NextExtractStartTime  for this extract in extract table" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 3]"
              DTS:CreationName=""
              DTS:DTSID="{B1EC1C2F-75C9-4C09-B6EB-C03D8432BF6E}"
              DTS:From="Package\Sequence Container\Sequence Container\Get NextExtractStartTime"
              DTS:ObjectName="Constraint 3"
              DTS:To="Package\Sequence Container\Sequence Container\Log Package Execution" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 4]"
              DTS:CreationName=""
              DTS:DTSID="{61424A0E-ACDD-4DE4-A60F-013A45613802}"
              DTS:From="Package\Sequence Container\Sequence Container\Get ExtractRowCount and NextExtractStartTime  for this extract in extract table"
              DTS:ObjectName="Constraint 4"
              DTS:To="Package\Sequence Container\Sequence Container\Log Package Execution" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 7]"
              DTS:CreationName=""
              DTS:Description="@CheckExtractRowCount == False"
              DTS:DTSID="{CA6B4039-9AC5-4B19-9D39-8037D721FC96}"
              DTS:EvalOp="3"
              DTS:Expression="@CheckExtractRowCount == False"
              DTS:From="Package\Sequence Container\Sequence Container\Run Merge Stored Proc"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 7"
              DTS:To="Package\Sequence Container\Sequence Container\Get NextExtractStartTime" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 8]"
              DTS:CreationName=""
              DTS:DTSID="{47064DA1-366B-49D7-9B13-550FCCB5BF52}"
              DTS:From="Package\Sequence Container\Sequence Container\Sql Bulk Upload"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 8"
              DTS:To="Package\Sequence Container\Sequence Container\Run Merge Stored Proc" />
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:Description="ProcessType == &quot;BULKSQL&quot;"
          DTS:DTSID="{AA92DE9C-289F-4C41-98EC-00AC4475AA21}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::ProcessType] == &quot;BULKSQL&quot;"
          DTS:From="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Sequence Container\Sequence Container" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:Description="ProcessType == &quot;BULKFILE&quot;"
          DTS:DTSID="{D719E16B-C8E3-4924-A8A9-D1B1ECC41BF5}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::ProcessType] == &quot;BULKFILE&quot;"
          DTS:From="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Sequence Container\Bulk File Processing" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{BBF0307B-098C-48B9-A74B-C9215CE67672}"
          DTS:From="Package\Sequence Container\Get ExtractEndTime"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Sequence Container\Log Information Exection guid and build version" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{B608E764-3DA7-4ACA-8BED-28FE4869D6AB}"
          DTS:From="Package\Sequence Container\Log Information Exection guid and build version"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Sequence Container\Get Standard Variable Values" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 6]"
          DTS:CreationName=""
          DTS:DTSID="{074CB462-FEE9-4F50-8505-C6262DAFEE7F}"
          DTS:From="Package\Sequence Container\Get Standard Variable Values"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 6"
          DTS:To="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{80BC55C8-1ADA-4F22-B0A7-377D4569EBE8}"
      DTS:From="Package\Sequence Container"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Insert Error Record into StagingExecutionLog"
      DTS:Value="1" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{17C4F6B1-28C7-49B3-B456-ADA0F9DB79E2}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{A6A2F037-DA56-49F3-A348-78E0FF3A240F}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\Append Error to Error Message"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{D582EDBB-13A2-4922-A5E5-3D72574098B3}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Append Error to Error Message">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_b96b9a606a9d4ae59db2a1c4a61786db"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_b96b9a606a9d4ae59db2a1c4a61786db.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{ea461d57-b3ca-4cdd-bda6-a9aaa927630e}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_b96b9a606a9d4ae59db2a1c4a61786db</RootNamespace>
    <AssemblyName>ST_b96b9a606a9d4ae59db2a1c4a61786db</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe"
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Settings.get_Default():ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Sett" +
    "ings")]

namespace ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_b96b9a606a9d4ae59db2a1c4a61786db
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            string ErrMessage = "";
            string ErrSource = "";
            string SystemErrMessage = "";
            string SystemSource = "";
            try
            {
                Variables vars = null;
                Dts.VariableDispenser.LockOneForRead("System::SourceName", ref vars);
                SystemSource = vars[0].Value.ToString();
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("System::ErrorDescription", ref vars);
                SystemErrMessage = vars[0].Value.ToString();
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("ErrorMessage", ref vars);
                ErrMessage = vars[0].Value.ToString();
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForRead("ErrorSource", ref vars);
                ErrSource = vars[0].Value.ToString();
                vars.Unlock();

                if (ErrMessage == "")
                {
                    ErrMessage = SystemErrMessage;
                }
                else
                {
                    ErrMessage = ErrMessage + ";" + SystemErrMessage;
                }
                if (ErrSource == "")
                {
                    ErrSource = SystemSource;
                }
                else
                {
                    ErrSource = ErrSource + ";" + SystemSource;
                }

                ErrMessage = ErrMessage.Replace("'", "''");
                ErrSource = ErrSource.Replace("'", "''");

                vars = null;
                Dts.VariableDispenser.LockOneForWrite("ErrorSource", ref vars);
                vars[0].Value = ErrSource;
                vars.Unlock();

                vars = null;
                Dts.VariableDispenser.LockOneForWrite("ErrorMessage", ref vars);
                vars[0].Value = ErrMessage;
                vars.Unlock();

                Dts.TaskResult = (int)ScriptResults.Success;

            }
            catch (Exception ex)
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_b96b9a606a9d4ae59db2a1c4a61786db</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_b96b9a606a9d4ae59db2a1c4a61786db</msb:DisplayName>
		<msb:ProjectId>{73D23F85-7536-4439-8662-D4D476CEB1B4}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_b96b9a606a9d4ae59db2a1c4a61786db.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_b96b9a606a9d4ae59db2a1c4a61786db")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_b96b9a606a9d4ae59db2a1c4a61786db")]
[assembly: AssemblyCopyright("Copyright @  2013")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_b96b9a606a9d4ae59db2a1c4a61786db.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_b96b9a606a9d4ae59db2a1c4a61786db.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDANteOlMAAAAAAAAAAOAAAiELAQsAABIAAAAIAAAAAAAADjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMAwAABLAAAAAEAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAFBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADw
MAAAAAAAAEgAAAACAAUAiCMAADgNAAABAAAAAAAAANAiAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABswAwDgAQAAAgAAEXJzAABwCnJzAABwC3JzAABwDHJzAABwDRQTBAIo
FgAACm8XAAAKcnUAAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoNEQRvHAAAChQTBAIo
FgAACm8XAAAKcpsAAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoMEQRvHAAAChQTBAIo
FgAACm8XAAAKcs0AAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoKEQRvHAAAChQTBAIo
FgAACm8XAAAKcucAAHASBG8YAAAKEQQWjB4AAAFvGQAACm8aAAAKbxsAAAoLEQRvHAAACgZycwAA
cCgdAAAKLAQICisNBnL/AABwCCgeAAAKCgdycwAAcCgdAAAKLAQJCysNB3L/AABwCSgeAAAKCwZy
AwEAcHIHAQBwbx8AAAoKB3IDAQBwcgcBAHBvHwAACgsUEwQCKBYAAApvFwAACnLnAABwEgRvIAAA
ChEEFoweAAABbxkAAAoHbyEAAAoRBG8cAAAKFBMEAigWAAAKbxcAAApyzQAAcBIEbyAAAAoRBBaM
HgAAAW8ZAAAKBm8hAAAKEQRvHAAACgIoFgAAChZvIgAACt4PJgIoFgAAChdvIgAACt4AKkEcAAAA
AAAAGAAAALgBAADQAQAADwAAACEAAAEeAigjAAAKKgAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3Rl
bS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1
bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVz
b3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAA
AAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAAAQAACN+AABsBAAAKAYAACNTdHJpbmdzAAAAAJQK
AAAQAQAAI1VTAKQLAAAQAAAAI0dVSUQAAAC0CwAAhAEAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMA
AAD6JTMAFgAAAQAAACEAAAAFAAAABgAAAAkAAAABAAAAIwAAAAIAAAAPAAAAAgAAAAIAAAADAAAA
BAAAAAEAAAAEAAAAAQAAAAEAAAAAAAoAAQAAAAAABgDBALoACgDdAMgADgA9ARQBBgBZAboABgBv
AV4BBgCgAYsBBgBXAj0CBgCCAnACBgCZAnACBgC2AnACBgDVAnACBgDuAnACBgAHA3ACBgAiA3AC
BgA9A3ACBgBWA3ACBgCPA28DBgCvA28DBgDgA80DBgD9A7oABgACBLoABgAmBHACCgBSBDwECgBr
BDwEBgCABG8DDgCiBBQBDgDEBBQBEgAdBf0EEgBFBf0EBgBeBboAEgBkBf0EBgCQBboABgDbBboA
AAAAAAEAAAAAAAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUAAQAQAHQAfwANAAQACAAD
AQAAowAAABEABAAKABEAfwETABEArAEXABEA9gE5AAYGHwJHAFaAJwJKAFaALwJKAFAgAAAAAIMY
vAEbAAEAWCAAAAAAkwjCAR8AAQCRIAAAAACTCNYBJAABAJggAAAAAJMI4gEpAAEAoCAAAAAAlggG
Aj0AAgCzIAAAAACGGLwBGwACAKcgAAAAAJEYmwSJAAIAvCAAAAAAhgAaAhsAAgDEIgAAAACGGLwB
GwACAAAAAQA3AjkAvAFYAEEAvAFYAEkAvAFYAFEAvAFYAFkAvAFYAGEAvAFYAGkAvAFYAHEAvAFY
AHkAvAFYAIEAvAFYAIkAvAFdAJEAvAEbAJkAvAEbAAkAvAEbAKEAFARiAKEALwRpACkAvAFuALkA
vAF6AMkAvAEbABEAvAEbANEAvAEbABkA1gSNANkALwWSAOEATwWXAOkAbQWfAPkAdgWlAAkAgAWp
AOkAiQUbAAEBlwWtAAEBowWzAAEBqgW6AOEAsgWXAPkAwgXAANkAzAVdABkAvAEbAAgAFABOAAgA
GABTACkAkwCAAC4AGwA/AS4AIwA/AS4AYwBlAS4ACwDOAC4AEwAWAS4AMwAWAS4AKwA/AS4AOwBF
AS4AQwA/AS4AWwBcAUMAawBTAEkAkwCAAGEAmwBTAIMAqwBTAHUAxQACAAEAAwADAAAAbwEvAAAA
7gE0AAAAEgJCAAIAAgADAAIAAwAFAAEABAAFAAIABQAHAASAAAABAAAAVBQFfAAAAAAAAH8AAAAE
AAAAAAAAAAAAAAABALEAAAAAAAQAAAAAAAAAAAAAAAEAugAAAAAACwAAAAAAAAAAAAAACgD1AAAA
AAALAAAAAAAAAAAAAAAKAN4EAAAAAAAAAAABAAAA5QUAAAUABAAAAAA8TW9kdWxlPgBTVF9iOTZi
OWE2MDZhOWQ0YWU1OWRiMmExYzRhNjE3ODZkYi5kbGwAUmVzb3VyY2VzAFNUX2I5NmI5YTYwNmE5
ZDRhZTU5ZGIyYTFjNGE2MTc4NmRiLlByb3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF9i
OTZiOWE2MDZhOWQ0YWU1OWRiMmExYzRhNjE3ODZkYgBTY3JpcHRSZXN1bHRzAG1zY29ybGliAFN5
c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UA
TWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRh
c2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJl
c291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24A
Q3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0
X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQA
RGVmYXVsdABNYWluAHZhbHVlX18AU3VjY2VzcwBGYWlsdXJlAHZhbHVlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFz
c2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJs
eUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5
UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRl
bWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0
cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0
aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBTeXN0ZW0uRGlhZ25v
c3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxl
AEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50
TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBp
bGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRy
aWJ1dGUAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFn
ZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJsZURpc3BlbnNlcgBn
ZXRfVmFyaWFibGVEaXNwZW5zZXIAVmFyaWFibGVzAExvY2tPbmVGb3JSZWFkAEludDMyAFZhcmlh
YmxlAGdldF9JdGVtAGdldF9WYWx1ZQBUb1N0cmluZwBVbmxvY2sAU3RyaW5nAG9wX0VxdWFsaXR5
AENvbmNhdABSZXBsYWNlAExvY2tPbmVGb3JXcml0ZQBzZXRfVmFsdWUAc2V0X1Rhc2tSZXN1bHQA
RXhjZXB0aW9uAFNUX2I5NmI5YTYwNmE5ZDRhZTU5ZGIyYTFjNGE2MTc4NmRiLlByb3BlcnRpZXMu
UmVzb3VyY2VzLnJlc291cmNlcwAAcVMAVABfAGIAOQA2AGIAOQBhADYAMAA2AGEAOQBkADQAYQBl
ADUAOQBkAGIAMgBhADEAYwA0AGEANgAxADcAOAA2AGQAYgAuAFAAcgBvAHAAZQByAHQAaQBlAHMA
LgBSAGUAcwBvAHUAcgBjAGUAcwAAAQAlUwB5AHMAdABlAG0AOgA6AFMAbwB1AHIAYwBlAE4AYQBt
AGUAADFTAHkAcwB0AGUAbQA6ADoARQByAHIAbwByAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAGUUA
cgByAG8AcgBNAGUAcwBzAGEAZwBlAAAXRQByAHIAbwByAFMAbwB1AHIAYwBlAAADOwAAAycAAQUn
ACcAAQAAACLLUdgYI8VJk9bDVaVupmUACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAA
EhUEAAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAIGCAMGERQEAAAAAAQBAAAABCAB
AQ4EIAEBCAYAARJREVUEIAASWQYgAgEOElkEBwESFQUgAQERYQgBAAIAAAAAAAMAAAEEIAASbQQg
ABJxByACAQ4QEnUFIAESfRwDIAAcAyAADgUAAgIODgYAAw4ODg4FIAIODg4EIAEBHAgHBQ4ODg4S
dUcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUQ
Lk5FVCBGcmFtZXdvcmsgNCgBACNTVF9iOTZiOWE2MDZhOWQ0YWU1OWRiMmExYzRhNjE3ODZkYgAA
BQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDEzAAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNl
cHRpb25UaHJvd3MB6DAAAAAAAAAAAAAA/jAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAwAAAA
AAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAsAMAAAAAAAAAAAAAsAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAAV8VBQAAAEABXxUFD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBBADAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAw
ADAAMAA0AGIAMAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwBiADkANgBiADkAYQA2ADAANgBhADkAZAA0AGEAZQA1ADkAZABiADIAYQAxAGMANABhADYAMQA3
ADgANgBkAGIAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANQAyADAA
NAAuADMAMQA3ADQAOQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBi
ADkANgBiADkAYQA2ADAANgBhADkAZAA0AGEAZQA1ADkAZABiADIAYQAxAGMANABhADYAMQA3ADgA
NgBkAGIALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEAMwAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkA
bABlAG4AYQBtAGUAAABTAFQAXwBiADkANgBiADkAYQA2ADAANgBhADkAZAA0AGEAZQA1ADkAZABi
ADIAYQAxAGMANABhADYAMQA3ADgANgBkAGIALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQA
TgBhAG0AZQAAAAAAUwBUAF8AYgA5ADYAYgA5AGEANgAwADYAYQA5AGQANABhAGUANQA5AGQAYgAy
AGEAMQBjADQAYQA2ADEANwA4ADYAZABiAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkA
bwBuAAAAMQAuADAALgA1ADIAMAA0AC4AMwAxADcANAA5AAAAAABIAA8AAQBBAHMAcwBlAG0AYgBs
AHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA1ADIAMAA0AC4AMwAxADcANAA5AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAABAxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="294,42"
          Id="Package\Insert Error Record into StagingExecutionLog"
          TopLeft="1032.7380952381,2491.96031746032" />
        <NodeLayout
          Size="156,42"
          Id="Package\Sequence Container\Bulk File Processing\File Bulk Upload"
          TopLeft="107.948773448774,179.03823953824" />
        <NodeLayout
          Size="172,42"
          Id="Package\Sequence Container\Bulk File Processing\Get Variable Values"
          TopLeft="81.5000000000002,52.4841269841268" />
        <EdgeLayout
          Id="Package\Sequence Container\Bulk File Processing.PrecedenceConstraints[Constraint]"
          TopLeft="167.5,94.4841269841268">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="18.4487734487738,84.5541125541132"
              Start="0,0"
              End="18.4487734487738,77.0541125541132">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.2770562770566" />
                  <mssgle:CubicBezierSegment
                    Point1="0,38.2770562770566"
                    Point2="0,42.2770562770566"
                    Point3="4,42.2770562770566" />
                  <mssgle:LineSegment
                    End="14.4487734487738,42.2770562770566" />
                  <mssgle:CubicBezierSegment
                    Point1="14.4487734487738,42.2770562770566"
                    Point2="18.4487734487738,42.2770562770566"
                    Point3="18.4487734487738,46.2770562770566" />
                  <mssgle:LineSegment
                    End="18.4487734487738,77.0541125541132" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43.924528301886795"
          IsExpanded="True"
          PanelSize="321,276"
          Size="321,320"
          Id="Package\Sequence Container\Bulk File Processing"
          TopLeft="986.420634920632,577.206349206348" />
        <NodeLayout
          Size="160,42"
          Id="Package\Sequence Container\Get ExtractEndTime"
          TopLeft="659,15.666666666667" />
        <NodeLayout
          Size="174,42"
          Id="Package\Sequence Container\Get Standard Variable Values"
          TopLeft="660.047619047616,183.960317460313" />
        <NodeLayout
          Size="307,42"
          Id="Package\Sequence Container\Log Information Exection guid and build version"
          TopLeft="591.738095238092,100.912698412694" />
        <NodeLayout
          Size="418,42"
          Id="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables\Do Nothing - Dummy task otherwise the variables do not get populated"
          TopLeft="2.16666666666652,22.1666666666665" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="429,119"
          Size="429,162"
          Id="Package\Sequence Container\Populate Get Standard Variable Values from full result set into variables"
          TopLeft="525.83333333333,291.436507936503" />
        <NodeLayout
          Size="319,52"
          Id="Package\Sequence Container\Sequence Container\Get ExtractRowCount and NextExtractStartTime  for this extract in extract table"
          TopLeft="301.770562770562,339.023809523811" />
        <NodeLayout
          Size="201,42"
          Id="Package\Sequence Container\Sequence Container\Get NextExtractStartTime"
          TopLeft="3.83333333333326,336.404761904762" />
        <NodeLayout
          Size="186,44"
          Id="Package\Sequence Container\Sequence Container\Get Variables Values Sql Bulk"
          TopLeft="173.5,18.9047619047633" />
        <NodeLayout
          Size="189,42"
          Id="Package\Sequence Container\Sequence Container\Log Package Execution"
          TopLeft="137.02380952381,449.904761904763" />
        <NodeLayout
          Size="190,42"
          Id="Package\Sequence Container\Sequence Container\Run Merge Stored Proc"
          TopLeft="198.690476190477,187.952380952383" />
        <NodeLayout
          Size="137,42"
          Id="Package\Sequence Container\Sequence Container\Sql Bulk Upload"
          TopLeft="201.690476190476,102.166666666667" />
        <EdgeLayout
          Id="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint]"
          TopLeft="268.345238095238,62.9047619047633">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,39.2619047619037"
              Start="0,0"
              End="0,31.7619047619037">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.7619047619037" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 2]"
          TopLeft="324.02380952381,229.952380952383">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="137.246753246752,109.071428571428"
              Start="0,0"
              End="137.246753246752,101.571428571428">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,40.1750671040857" />
                  <mssgle:CubicBezierSegment
                    Point1="0,40.1750671040857"
                    Point2="0,44.1750671040857"
                    Point3="4,44.1750671040857" />
                  <mssgle:LineSegment
                    End="133.246753246752,44.1750671040857" />
                  <mssgle:CubicBezierSegment
                    Point1="133.246753246752,44.1750671040857"
                    Point2="137.246753246752,44.1750671040857"
                    Point3="137.246753246752,48.1750671040857" />
                  <mssgle:LineSegment
                    End="137.246753246752,101.571428571428" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-16.9116233766242,49.1750671040857,171.07,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 3]"
          TopLeft="104.333333333333,378.404761904762">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="97.0238095238096,71.5000000000014"
              Start="0,0"
              End="97.0238095238096,64.0000000000014">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.5398740818476" />
                  <mssgle:CubicBezierSegment
                    Point1="0,38.5398740818476"
                    Point2="0,42.5398740818476"
                    Point3="4,42.5398740818476" />
                  <mssgle:LineSegment
                    End="93.0238095238096,42.5398740818476" />
                  <mssgle:CubicBezierSegment
                    Point1="93.0238095238096,42.5398740818476"
                    Point2="97.0238095238096,42.5398740818476"
                    Point3="97.0238095238096,46.5398740818476" />
                  <mssgle:LineSegment
                    End="97.0238095238096,64.0000000000014" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 4]"
          TopLeft="461.270562770562,391.023809523811">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-199.580086580086,58.8809523809527"
              Start="0,0"
              End="-199.580086580086,51.3809523809527">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.032004197272" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.032004197272"
                    Point2="0,35.032004197272"
                    Point3="-4,35.032004197272" />
                  <mssgle:LineSegment
                    End="-195.580086580086,35.032004197272" />
                  <mssgle:CubicBezierSegment
                    Point1="-195.580086580086,35.032004197272"
                    Point2="-199.580086580086,35.032004197272"
                    Point3="-199.580086580086,39.032004197272" />
                  <mssgle:LineSegment
                    End="-199.580086580086,51.3809523809527" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 7]"
          TopLeft="263.357142857144,229.952380952383">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-159.02380952381,106.452380952379"
              Start="0,0"
              End="-159.02380952381,98.952380952379">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,39.1143254796692" />
                  <mssgle:CubicBezierSegment
                    Point1="0,39.1143254796692"
                    Point2="0,43.1143254796692"
                    Point3="-4,43.1143254796692" />
                  <mssgle:LineSegment
                    End="-155.02380952381,43.1143254796692" />
                  <mssgle:CubicBezierSegment
                    Point1="-155.02380952381,43.1143254796692"
                    Point2="-159.02380952381,43.1143254796692"
                    Point3="-159.02380952381,47.1143254796692" />
                  <mssgle:LineSegment
                    End="-159.02380952381,98.952380952379" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-166.141904761905,48.1143254796692,173.26,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 8]"
          TopLeft="270.190476190476,144.166666666667">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="23.500000000001,43.785714285716"
              Start="0,0"
              End="23.500000000001,36.285714285716">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.892857142858" />
                  <mssgle:CubicBezierSegment
                    Point1="0,17.892857142858"
                    Point2="0,21.892857142858"
                    Point3="4,21.892857142858" />
                  <mssgle:LineSegment
                    End="19.500000000001,21.892857142858" />
                  <mssgle:CubicBezierSegment
                    Point1="19.500000000001,21.892857142858"
                    Point2="23.500000000001,21.892857142858"
                    Point3="23.500000000001,25.892857142858" />
                  <mssgle:LineSegment
                    End="23.500000000001,36.285714285716" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="672,651"
          Size="672,694"
          Id="Package\Sequence Container\Sequence Container"
          TopLeft="116,588.666666666667" />
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint]"
          TopLeft="670.166666666663,453.436507936503">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-218.166666666663,135.230158730163"
              Start="0,0"
              End="-218.166666666663,127.730158730163">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.3935520020072" />
                  <mssgle:CubicBezierSegment
                    Point1="0,50.3935520020072"
                    Point2="0,54.3935520020072"
                    Point3="-4,54.3935520020072" />
                  <mssgle:LineSegment
                    End="-214.166666666663,54.3935520020072" />
                  <mssgle:CubicBezierSegment
                    Point1="-214.166666666663,54.3935520020072"
                    Point2="-218.166666666663,54.3935520020072"
                    Point3="-218.166666666663,58.3935520020072" />
                  <mssgle:LineSegment
                    End="-218.166666666663,127.730158730163" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-180.666848958332,59.3935520020072,143.16703125,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 1]"
          TopLeft="810.499999999997,453.436507936503">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="336.420634920635,123.769841269845"
              Start="0,0"
              End="336.420634920635,116.269841269845">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,45.7838748442572" />
                  <mssgle:CubicBezierSegment
                    Point1="0,45.7838748442572"
                    Point2="0,49.7838748442572"
                    Point3="4,49.7838748442572" />
                  <mssgle:LineSegment
                    End="332.420634920635,49.7838748442572" />
                  <mssgle:CubicBezierSegment
                    Point1="332.420634920635,49.7838748442572"
                    Point2="336.420634920635,49.7838748442572"
                    Point3="336.420634920635,53.7838748442572" />
                  <mssgle:LineSegment
                    End="336.420634920635,116.269841269845" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="95.6768018353177,54.7838748442572,145.06703125,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 2]"
          TopLeft="742.119047619046,57.666666666667">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,43.2460317460269"
              Start="0,0"
              End="0,35.7460317460269">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,35.7460317460269" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 5]"
          TopLeft="746.142857142854,142.912698412694">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,41.0476190476191"
              Start="0,0"
              End="0,33.5476190476191">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,33.5476190476191" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 6]"
          TopLeft="743.690476190473,225.960317460313">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,65.4761904761901"
              Start="0,0"
              End="0,57.9761904761901">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,57.9761904761901" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="1313,1346"
          Size="1313,1389"
          Id="Package\Sequence Container"
          TopLeft="408.412698412701,1034.11111111111" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="1064.9126984127,2423.11111111111">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="114.825396825399,68.8492063492099"
              Start="0,0"
              End="114.825396825399,61.3492063492099">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,30.424603174605" />
                  <mssgle:CubicBezierSegment
                    Point1="0,30.424603174605"
                    Point2="0,34.424603174605"
                    Point3="4,34.424603174605" />
                  <mssgle:LineSegment
                    End="110.825396825399,34.424603174605" />
                  <mssgle:CubicBezierSegment
                    Point1="110.825396825399,34.424603174605"
                    Point2="114.825396825399,34.424603174605"
                    Point3="114.825396825399,38.424603174605" />
                  <mssgle:LineSegment
                    End="114.825396825399,61.3492063492099" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="42.1713507564495,39.424603174605,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="Package.EventHandlers[OnError]\Append Error to Error Message"
          TopLeft="NaN,NaN" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 2]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container\Sequence Container.PrecedenceConstraints[Constraint 7]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container.PrecedenceConstraints[Constraint]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
  <PrecedenceConstraint
    design-time-name="Package\Sequence Container.PrecedenceConstraints[Constraint 1]">
    <ShowAnnotation>ConstraintDescription</ShowAnnotation>
  </PrecedenceConstraint>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>